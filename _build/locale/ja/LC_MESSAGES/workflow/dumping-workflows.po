# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the Symfony Framework
# Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Symfony Framework Documentation \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-08 14:21+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../../workflow/dumping-workflows.rst:5
msgid "How to Dump Workflows"
msgstr ""

#: ../../../workflow/dumping-workflows.rst:7
msgid ""
"To help you debug your workflows, you can generate a visual "
"representation of them as SVG or PNG images. First, install any of these "
"free and open source applications needed to generate the images:"
msgstr ""

#: ../../../workflow/dumping-workflows.rst:11
msgid "`Graphviz`_, provides the ``dot`` command;"
msgstr ""

#: ../../../workflow/dumping-workflows.rst:12
msgid "`PlantUML`_, provides the ``plantuml.jar`` file (which requires Java)."
msgstr ""

#: ../../../workflow/dumping-workflows.rst:14
msgid ""
"If you are defining the workflow inside a Symfony application, run this "
"command to dump it as an image:"
msgstr ""

#: ../../../workflow/dumping-workflows.rst:31
msgid "The DOT image will look like this:"
msgstr ""

#: ../../../workflow/dumping-workflows.rst:35
#: ../../../workflow/dumping-workflows.rst:308
msgid "The PlantUML image will look like this:"
msgstr ""

#: ../../../workflow/dumping-workflows.rst:39
msgid ""
"If you are creating workflows outside of a Symfony application, use the "
"``GraphvizDumper`` or ``StateMachineGraphvizDumper`` class to create the "
"DOT files and ``PlantUmlDumper`` to create the PlantUML files::"
msgstr ""

#: ../../../workflow/dumping-workflows.rst:58
msgid "Styling"
msgstr ""

#: ../../../workflow/dumping-workflows.rst:60
msgid "You can use ``metadata`` with the following keys to style the workflow:"
msgstr ""

#: ../../../workflow/dumping-workflows.rst:62
msgid "for places:"
msgstr ""

#: ../../../workflow/dumping-workflows.rst:64
msgid "``bg_color``: a color;"
msgstr ""

#: ../../../workflow/dumping-workflows.rst:65
msgid "``description``: a string that describes the state."
msgstr ""

#: ../../../workflow/dumping-workflows.rst:67
msgid "for transitions:"
msgstr ""

#: ../../../workflow/dumping-workflows.rst:69
msgid "``label``: a string that replaces the name of the transition;"
msgstr ""

#: ../../../workflow/dumping-workflows.rst:70
msgid "``color``: a color;"
msgstr ""

#: ../../../workflow/dumping-workflows.rst:71
msgid "``arrow_color``: a color."
msgstr ""

#: ../../../workflow/dumping-workflows.rst:73
msgid ""
"Strings can include ``\\n`` characters to display the contents in "
"multiple lines. Colors can be defined as:"
msgstr ""

#: ../../../workflow/dumping-workflows.rst:76
msgid "a color name from `PlantUML's color list`_;"
msgstr ""

#: ../../../workflow/dumping-workflows.rst:77
msgid ""
"an hexadecimal color (both ``#AABBCC`` and ``#ABC`` formats are "
"supported)."
msgstr ""

#: ../../../workflow/dumping-workflows.rst:79
msgid ""
"Below is the configuration for the pull request state machine with "
"styling added."
msgstr ""

