# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the Symfony Framework
# Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Symfony Framework Documentation \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-08 14:21+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../../profiler.rst:2
msgid "Profiler"
msgstr ""

#: ../../../profiler.rst:4
msgid ""
"The profiler is a powerful **development tool** that gives detailed "
"information about the execution of any request. **Never** enable the "
"profiler in production environments as it will lead to major security "
"vulnerabilities in your project."
msgstr ""

#: ../../../profiler.rst:9
msgid "Installation"
msgstr ""

#: ../../../profiler.rst:11
msgid ""
"In applications using :ref:`Symfony Flex <symfony-flex>`, run this "
"command to install the ``profiler`` :ref:`Symfony pack <symfony-packs>` "
"before using it:"
msgstr ""

#: ../../../profiler.rst:18
msgid ""
"Now browse any page of your application in the development environment to"
" let the profiler collect information. Then, click on any element of the "
"debug toolbar injected at the bottom of your pages to open the web "
"interface of the Symfony Profiler, which will look like this:"
msgstr ""

#: ../../../profiler.rst:28
msgid "Accessing Profiling Data Programmatically"
msgstr ""

#: ../../../profiler.rst:30
msgid ""
"Most of the times, the profiler information is accessed and analyzed "
"using its web-based interface. However, you can also retrieve profiling "
"information programmatically thanks to the methods provided by the "
"``profiler`` service."
msgstr ""

#: ../../../profiler.rst:34
msgid ""
"When the response object is available, use the "
":method:`Symfony\\\\Component\\\\HttpKernel\\\\Profiler\\\\Profiler::loadProfileFromResponse`"
" method to access to its associated profile::"
msgstr ""

#: ../../../profiler.rst:41
msgid ""
"When the profiler stores data about a request, it also associates a token"
" with it; this token is available in the ``X-Debug-Token`` HTTP header of"
" the response. Using this token, you can access the profile of any past "
"response thanks to the "
":method:`Symfony\\\\Component\\\\HttpKernel\\\\Profiler\\\\Profiler::loadProfile`"
" method::"
msgstr ""

#: ../../../profiler.rst:51
msgid ""
"When the profiler is enabled but not the web debug toolbar, inspect the "
"page with your browser's developer tools to get the value of the ``X"
"-Debug-Token`` HTTP header."
msgstr ""

#: ../../../profiler.rst:55
msgid ""
"The ``profiler`` service also provides the "
":method:`Symfony\\\\Component\\\\HttpKernel\\\\Profiler\\\\Profiler::find`"
" method to look for tokens based on some criteria::"
msgstr ""

#: ../../../profiler.rst:72
msgid "Data Collectors"
msgstr ""

#: ../../../profiler.rst:74
msgid ""
"The profiler gets its information using some services called \"data "
"collectors\". Symfony comes with several collectors that get information "
"about the request, the logger, the routing, the cache, etc."
msgstr ""

#: ../../../profiler.rst:78
msgid ""
"Run this command to get the list of collectors actually enabled in your "
"app:"
msgstr ""

#: ../../../profiler.rst:84
msgid ""
"You can also :doc:`create your own data collector "
"</profiler/data_collector>` to store any data generated by your app and "
"display it in the debug toolbar and the profiler web interface."
msgstr ""

#: ../../../profiler.rst:91
msgid "Timing the Execution of the Application"
msgstr ""

#: ../../../profiler.rst:93
msgid ""
"If you want to measure the time some tasks take in your application, "
"there's no need to create a custom data collector. Instead, use the "
"`Stopwatch component`_ which provides utilities to profile code and "
"displays the results on the \"Performance\" panel of the Profiler web "
"interface."
msgstr ""

#: ../../../profiler.rst:98
msgid ""
"When using :ref:`autowiring <services-autowire>`, type-hint any argument "
"with the :class:`Symfony\\\\Component\\\\Stopwatch\\\\Stopwatch` class "
"and Symfony will inject the Stopwatch service. Then, use the ``start()``,"
" ``lap()`` and ``stop()`` methods to measure time::"
msgstr ""

#: ../../../profiler.rst:114
msgid ""
"Consider using a professional profiler such as `Blackfire`_ to measure "
"and analyze the execution of your application in detail."
msgstr ""

#: ../../../profiler.rst:118
msgid "Enabling the Profiler Conditionally"
msgstr ""

#: ../../../profiler.rst:122
msgid ""
"The possibility to use a matcher to enable the profiler conditionally was"
" removed in Symfony 4.0."
msgstr ""

#: ../../../profiler.rst:125
msgid ""
"Symfony Profiler cannot be enabled/disabled conditionally using matchers,"
" because that feature was removed in Symfony 4.0. However, you can use "
"the ``enable()`` and ``disable()`` methods of the "
":class:`Symfony\\\\Component\\\\HttpKernel\\\\Profiler\\\\Profiler` class"
" in your controllers to manage the profiler programmatically::"
msgstr ""

#: ../../../profiler.rst:149
msgid ""
"In order for the profiler to be injected into your controller you need to"
" create an alias pointing to the existing ``profiler`` service:"
msgstr ""

#: ../../../profiler.rst:182
msgid "Updating the Web Debug Toolbar After AJAX Requests"
msgstr ""

#: ../../../profiler.rst:184
msgid ""
"`Single-page applications`_ (SPA) are web applications that interact with"
" the user by dynamically rewriting the current page rather than loading "
"entire new pages from a server."
msgstr ""

#: ../../../profiler.rst:188
msgid ""
"By default, the debug toolbar displays the information of the initial "
"page load and doesn't refresh after each AJAX request. However, you can "
"set the ``Symfony-Debug-Toolbar-Replace`` header to a value of ``1`` in "
"the response to the AJAX request to force the refresh of the toolbar::"
msgstr ""

#: ../../../profiler.rst:195
msgid ""
"Ideally this header should only be set during development and not for "
"production. To do that, create an :doc:`event subscriber "
"</event_dispatcher>` and listen to the :ref:`kernel.response<component-"
"http-kernel-kernel-response>` event::"
msgstr ""

