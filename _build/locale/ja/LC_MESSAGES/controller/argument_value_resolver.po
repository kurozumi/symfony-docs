# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the Symfony Framework
# Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Symfony Framework Documentation \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-08 14:21+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../../controller/argument_value_resolver.rst:5
msgid "Extending Action Argument Resolving"
msgstr ""

#: ../../../controller/argument_value_resolver.rst:7
msgid ""
"In the :doc:`controller guide </controller>`, you've learned that you can"
" get the :class:`Symfony\\\\Component\\\\HttpFoundation\\\\Request` "
"object via an argument in your controller. This argument has to be type-"
"hinted by the ``Request`` class in order to be recognized. This is done "
"via the "
":class:`Symfony\\\\Component\\\\HttpKernel\\\\Controller\\\\ArgumentResolver`."
" By creating and registering custom argument value resolvers, you can "
"extend this functionality."
msgstr ""

#: ../../../controller/argument_value_resolver.rst:18
msgid "Built-In Value Resolvers"
msgstr ""

#: ../../../controller/argument_value_resolver.rst:20
msgid ""
"Symfony ships with the following value resolvers in the :doc:`HttpKernel "
"component </components/http_kernel>`:"
msgstr ""

#: ../../../controller/argument_value_resolver.rst:24
msgid ":class:`Symfony\\\\Component\\\\HttpKernel\\\\Controller\\\\ArgumentResolver\\\\RequestAttributeValueResolver`"
msgstr ""

#: ../../../controller/argument_value_resolver.rst:24
msgid ""
"Attempts to find a request attribute that matches the name of the "
"argument."
msgstr ""

#: ../../../controller/argument_value_resolver.rst:28
msgid ":class:`Symfony\\\\Component\\\\HttpKernel\\\\Controller\\\\ArgumentResolver\\\\RequestValueResolver`"
msgstr ""

#: ../../../controller/argument_value_resolver.rst:27
msgid ""
"Injects the current ``Request`` if type-hinted with ``Request`` or a "
"class extending ``Request``."
msgstr ""

#: ../../../controller/argument_value_resolver.rst:32
msgid ":class:`Symfony\\\\Component\\\\HttpKernel\\\\Controller\\\\ArgumentResolver\\\\ServiceValueResolver`"
msgstr ""

#: ../../../controller/argument_value_resolver.rst:31
msgid ""
"Injects a service if type-hinted with a valid service class or interface."
" This works like :doc:`autowiring </service_container/autowiring>`."
msgstr ""

#: ../../../controller/argument_value_resolver.rst:37
msgid ":class:`Symfony\\\\Component\\\\HttpKernel\\\\Controller\\\\ArgumentResolver\\\\SessionValueResolver`"
msgstr ""

#: ../../../controller/argument_value_resolver.rst:35
msgid ""
"Injects the configured session class implementing ``SessionInterface`` if"
" type-hinted with ``SessionInterface`` or a class implementing "
"``SessionInterface``."
msgstr ""

#: ../../../controller/argument_value_resolver.rst:41
msgid ":class:`Symfony\\\\Component\\\\HttpKernel\\\\Controller\\\\ArgumentResolver\\\\DefaultValueResolver`"
msgstr ""

#: ../../../controller/argument_value_resolver.rst:40
msgid ""
"Will set the default value of the argument if present and the argument is"
" optional."
msgstr ""

#: ../../../controller/argument_value_resolver.rst:46
msgid ":class:`Symfony\\\\Component\\\\HttpKernel\\\\Controller\\\\ArgumentResolver\\\\VariadicValueResolver`"
msgstr ""

#: ../../../controller/argument_value_resolver.rst:44
msgid ""
"Verifies if the request data is an array and will add all of them to the "
"argument list. When the action is called, the last (variadic) argument "
"will contain all the values of this array."
msgstr ""

#: ../../../controller/argument_value_resolver.rst:48
msgid ""
"In addition, some components and official bundles provide other value "
"resolvers:"
msgstr ""

#: ../../../controller/argument_value_resolver.rst:54
msgid ":class:`Symfony\\\\Component\\\\Security\\\\Http\\\\Controller\\\\UserValueResolver`"
msgstr ""

#: ../../../controller/argument_value_resolver.rst:51
msgid ""
"Injects the object that represents the current logged in user if type-"
"hinted with ``UserInterface``. Default value can be set to ``null`` in "
"case the controller can be accessed by anonymous users. It requires "
"installing the :doc:`Security component </components/security>`."
msgstr ""

#: ../../../controller/argument_value_resolver.rst:59
msgid "``Psr7ServerRequestResolver``"
msgstr ""

#: ../../../controller/argument_value_resolver.rst:57
msgid ""
"Injects a `PSR-7`_ compliant version of the current request if type-"
"hinted with ``RequestInterface``, ``MessageInterface`` or "
"``ServerRequestInterface``. It requires installing the "
"`SensioFrameworkExtraBundle`_."
msgstr ""

#: ../../../controller/argument_value_resolver.rst:62
msgid "Adding a Custom Value Resolver"
msgstr ""

#: ../../../controller/argument_value_resolver.rst:64
msgid ""
"In the next example, you'll create a value resolver to inject the object "
"that represents the current user whenever a controller method type-hints "
"an argument with the ``User`` class::"
msgstr ""

#: ../../../controller/argument_value_resolver.rst:81
msgid ""
"Beware that this feature is already provided by the `@ParamConverter`_ "
"annotation from the SensioFrameworkExtraBundle. If you have that bundle "
"installed in your project, add this config to disable the auto-conversion"
" of type-hinted method arguments:"
msgstr ""

#: ../../../controller/argument_value_resolver.rst:123
msgid ""
"Adding a new value resolver requires creating a class that implements "
":class:`Symfony\\\\Component\\\\HttpKernel\\\\Controller\\\\ArgumentValueResolverInterface`"
" and defining a service for it. The interface defines two methods:"
msgstr ""

#: ../../../controller/argument_value_resolver.rst:128
msgid "``supports()``"
msgstr ""

#: ../../../controller/argument_value_resolver.rst:128
msgid ""
"This method is used to check whether the value resolver supports the "
"given argument. ``resolve()`` will only be executed when this returns "
"``true``."
msgstr ""

#: ../../../controller/argument_value_resolver.rst:132
msgid "``resolve()``"
msgstr ""

#: ../../../controller/argument_value_resolver.rst:131
msgid ""
"This method will resolve the actual value for the argument. Once the "
"value is resolved, you must `yield`_ the value to the "
"``ArgumentResolver``."
msgstr ""

#: ../../../controller/argument_value_resolver.rst:134
msgid ""
"Both methods get the ``Request`` object, which is the current request, "
"and an "
":class:`Symfony\\\\Component\\\\HttpKernel\\\\ControllerMetadata\\\\ArgumentMetadata`"
" instance. This object contains all information retrieved from the method"
" signature for the current argument."
msgstr ""

#: ../../../controller/argument_value_resolver.rst:139
msgid ""
"Now that you know what to do, you can implement this interface. To get "
"the current ``User``, you need the current security token. This token can"
" be retrieved from the token storage::"
msgstr ""

#: ../../../controller/argument_value_resolver.rst:176
msgid ""
"In order to get the actual ``User`` object in your argument, the given "
"value must fulfill the following requirements:"
msgstr ""

#: ../../../controller/argument_value_resolver.rst:179
msgid ""
"An argument must be type-hinted as ``User`` in your action method "
"signature;"
msgstr ""

#: ../../../controller/argument_value_resolver.rst:180
msgid "The value must be an instance of the ``User`` class."
msgstr ""

#: ../../../controller/argument_value_resolver.rst:182
msgid ""
"When all those requirements are met and ``true`` is returned, the "
"``ArgumentResolver`` calls ``resolve()`` with the same values as it "
"called ``supports()``."
msgstr ""

#: ../../../controller/argument_value_resolver.rst:186
msgid ""
"That's it! Now all you have to do is add the configuration for the "
"service container. This can be done by tagging the service with "
"``controller.argument_value_resolver`` and adding a priority."
msgstr ""

#: ../../../controller/argument_value_resolver.rst:235
msgid ""
"While adding a priority is optional, it's recommended to add one to make "
"sure the expected value is injected. The "
"``RequestAttributeValueResolver`` has a priority of 100. As this one is "
"responsible for fetching attributes from the ``Request``, it's "
"recommended to trigger your custom value resolver with a lower priority. "
"This makes sure the argument resolvers are not triggered when the "
"attribute is present. For instance, when passing the user along a sub-"
"requests."
msgstr ""

#: ../../../controller/argument_value_resolver.rst:245
msgid ""
"As you can see in the ``UserValueResolver::supports()`` method, the user "
"may not be available (e.g. when the controller is not behind a firewall)."
" In these cases, the resolver will not be executed. If no argument value "
"is resolved, an exception will be thrown."
msgstr ""

#: ../../../controller/argument_value_resolver.rst:250
msgid ""
"To prevent this, you can add a default value in the controller (e.g. "
"``User $user = null``). The ``DefaultValueResolver`` is executed as the "
"last resolver and will use the default value if no value was already "
"resolved."
msgstr ""

