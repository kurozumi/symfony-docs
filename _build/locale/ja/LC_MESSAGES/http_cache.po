# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the Symfony Framework
# Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Symfony Framework Documentation \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-08 14:21+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../../http_cache.rst:5
msgid "HTTP Cache"
msgstr ""

#: ../../../http_cache.rst:7
msgid ""
"The nature of rich web applications means that they're dynamic. No matter"
" how efficient your application, each request will always contain more "
"overhead than serving a static file. Usually, that's fine. But when you "
"need your requests to be lightning fast, you need HTTP caching."
msgstr ""

#: ../../../http_cache.rst:13
msgid "Caching on the Shoulders of Giants"
msgstr ""

#: ../../../http_cache.rst:15
msgid ""
"With HTTP Caching, you cache the full output of a page (i.e. the "
"response) and bypass your application *entirely* on subsequent requests. "
"Caching entire responses isn't always possible for highly dynamic sites, "
"or is it? With :doc:`Edge Side Includes (ESI) </http_cache/esi>`, you can"
" use the power of HTTP caching on only *fragments* of your site."
msgstr ""

#: ../../../http_cache.rst:21
msgid ""
"The Symfony cache system is different because it relies on the simplicity"
" and power of the HTTP cache as defined in `RFC 7234 - Caching`_. Instead"
" of reinventing a caching methodology, Symfony embraces the standard that"
" defines basic communication on the Web. Once you understand the "
"fundamental HTTP validation and expiration caching models, you'll be "
"ready to master the Symfony cache system."
msgstr ""

#: ../../../http_cache.rst:28
msgid ""
"Since caching with HTTP isn't unique to Symfony, many articles already "
"exist on the topic. If you're new to HTTP caching, Ryan Tomayko's article"
" `Things Caches Do`_ is *highly* recommended. Another in-depth resource "
"is Mark Nottingham's `Cache Tutorial`_."
msgstr ""

#: ../../../http_cache.rst:40
msgid "Caching with a Gateway Cache"
msgstr ""

#: ../../../http_cache.rst:42
msgid ""
"When caching with HTTP, the *cache* is separated from your application "
"entirely and sits between your application and the client making the "
"request."
msgstr ""

#: ../../../http_cache.rst:45
msgid ""
"The job of the cache is to accept requests from the client and pass them "
"back to your application. The cache will also receive responses back from"
" your application and forward them on to the client. The cache is the "
"\"middle-man\" of the request-response communication between the client "
"and your application."
msgstr ""

#: ../../../http_cache.rst:50
msgid ""
"Along the way, the cache will store each response that is deemed "
"\"cacheable\" (See :ref:`http-cache-introduction`). If the same resource "
"is requested again, the cache sends the cached response to the client, "
"ignoring your application entirely."
msgstr ""

#: ../../../http_cache.rst:55
msgid ""
"This type of cache is known as an HTTP gateway cache and many exist such "
"as `Varnish`_, `Squid in reverse proxy mode`_, and the Symfony reverse "
"proxy."
msgstr ""

#: ../../../http_cache.rst:60
msgid ""
"Gateway caches are sometimes referred to as reverse proxy caches, "
"surrogate caches, or even HTTP accelerators."
msgstr ""

#: ../../../http_cache.rst:70
msgid "Symfony Reverse Proxy"
msgstr ""

#: ../../../http_cache.rst:72
msgid ""
"Symfony comes with a reverse proxy (i.e. gateway cache) written in PHP. "
":ref:`It's not a fully-featured reverse proxy cache like Varnish <http-"
"cache-symfony-versus-varnish>`, but is a great way to start."
msgstr ""

#: ../../../http_cache.rst:78
msgid "For details on setting up Varnish, see :doc:`/http_cache/varnish`."
msgstr ""

#: ../../../http_cache.rst:80
msgid "To enable the proxy, first create a caching kernel::"
msgstr ""

#: ../../../http_cache.rst:91
msgid ""
"Modify the code of your front controller to wrap the default kernel into "
"the caching kernel:"
msgstr ""

#: ../../../http_cache.rst:111
msgid ""
"The caching kernel will immediately act as a reverse proxy: caching "
"responses from your application and returning them to the client."
msgstr ""

#: ../../../http_cache.rst:116
msgid ""
"If you're using the :ref:`framework.http_method_override <configuration-"
"framework-http_method_override>` option to read the HTTP method from a "
"``_method`` parameter, see the above link for a tweak you need to make."
msgstr ""

#: ../../../http_cache.rst:122
msgid ""
"The cache kernel has a special ``getLog()`` method that returns a string "
"representation of what happened in the cache layer. In the development "
"environment, use it to debug and validate your cache strategy::"
msgstr ""

#: ../../../http_cache.rst:128
msgid ""
"The ``CacheKernel`` object has a sensible default configuration, but it "
"can be finely tuned via a set of options you can set by overriding the "
":method:`Symfony\\\\Bundle\\\\FrameworkBundle\\\\HttpCache\\\\HttpCache::getOptions`"
" method::"
msgstr ""

#: ../../../http_cache.rst:149
msgid ""
"For a full list of the options and their meaning, see the "
":method:`HttpCache::__construct() documentation "
"<Symfony\\\\Component\\\\HttpKernel\\\\HttpCache\\\\HttpCache::__construct>`."
msgstr ""

#: ../../../http_cache.rst:152
msgid ""
"When you're in debug mode (the second argument of ``Kernel`` constructor "
"in the front controller is ``true``), Symfony automatically adds an ``X"
"-Symfony-Cache`` header to the response. You can also use the "
"``trace_level`` config option and set it to either ``none``, ``short`` or"
" ``full`` to add this information."
msgstr ""

#: ../../../http_cache.rst:158
msgid ""
"``short`` will add the information for the master request only. It's "
"written in a concise way that makes it easy to record the information in "
"your server log files. For example, in Apache you can use ``%{X-Symfony-"
"Cache}o`` in ``LogFormat`` format statements. This information can be "
"used to extract general information about cache efficiency of your "
"routes."
msgstr ""

#: ../../../http_cache.rst:167
msgid ""
"You can change the name of the header used for the trace information "
"using the ``trace_header`` config option."
msgstr ""

#: ../../../http_cache.rst
msgid "Changing from one Reverse Proxy to another"
msgstr ""

#: ../../../http_cache.rst:174
msgid ""
"The Symfony reverse proxy is a great tool to use when developing your "
"website or when you deploy your website to a shared host where you cannot"
" install anything beyond PHP code. But being written in PHP, it cannot be"
" as fast as a proxy written in C."
msgstr ""

#: ../../../http_cache.rst:179
msgid ""
"Fortunately, since all reverse proxies are effectively the same, you "
"should be able to switch to something more robust - like Varnish - "
"without any problems. See :doc:`How to use Varnish </http_cache/varnish>`"
msgstr ""

#: ../../../http_cache.rst:189
msgid "Making your Responses HTTP Cacheable"
msgstr ""

#: ../../../http_cache.rst:191
msgid ""
"Once you've added a reverse proxy cache (e.g. like the Symfony reverse "
"proxy or Varnish), you're ready to cache your responses. To do that, you "
"need to *communicate* to your cache *which* responses are cacheable and "
"for how long. This is done by setting HTTP cache headers on the response."
msgstr ""

#: ../../../http_cache.rst:196
msgid ""
"HTTP specifies four response cache headers that you can set to enable "
"caching:"
msgstr ""

#: ../../../http_cache.rst:198
msgid "``Cache-Control``"
msgstr ""

#: ../../../http_cache.rst:199
msgid "``Expires``"
msgstr ""

#: ../../../http_cache.rst:200
msgid "``ETag``"
msgstr ""

#: ../../../http_cache.rst:201
msgid "``Last-Modified``"
msgstr ""

#: ../../../http_cache.rst:203
msgid ""
"These four headers are used to help cache your responses via *two* "
"different models:"
msgstr ""

#: ../../../http_cache.rst:208
msgid ""
":ref:`Expiration Caching <http-cache-expiration-intro>` Used to cache "
"your entire response for a specific amount of time (e.g. 24 hours). "
"Simple, but cache invalidation is more difficult."
msgstr ""

#: ../../../http_cache.rst:212
msgid ""
":ref:`Validation Caching <http-cache-validation-intro>` More complex: "
"used to cache your response, but allows you to dynamically invalidate it "
"as soon as your content changes."
msgstr ""

#: ../../../http_cache.rst
msgid "Reading the HTTP Specification"
msgstr ""

#: ../../../http_cache.rst:218
msgid ""
"All of the HTTP headers you'll read about are *not* invented by Symfony! "
"They're part of an HTTP specification that's used by sites all over the "
"web. To dig deeper into HTTP Caching, check out the documents `RFC 7234 -"
" Caching`_ and `RFC 7232 - Conditional Requests`_."
msgstr ""

#: ../../../http_cache.rst:223
msgid ""
"As a web developer, you are strongly urged to read the specification. Its"
" clarity and power - even more than fifteen years after its creation - is"
" invaluable. Don't be put-off by the appearance of the spec - its "
"contents are much more beautiful than its cover!"
msgstr ""

#: ../../../http_cache.rst:234
msgid "Expiration Caching"
msgstr ""

#: ../../../http_cache.rst:236
msgid ""
"The *easiest* way to cache a response is by caching it for a specific "
"amount of time::"
msgstr ""

#: ../../../http_cache.rst:256
msgid ""
"Thanks to this new code, your HTTP response will have the following "
"header:"
msgstr ""

#: ../../../http_cache.rst:262
msgid ""
"This tells your HTTP reverse proxy to cache this response for 3600 "
"seconds. If *anyone* requests this URL again before 3600 seconds, your "
"application *won't* be hit at all. If you're using the Symfony reverse "
"proxy, look at the ``X-Symfony-Cache`` header for debugging information "
"about cache hits and misses."
msgstr ""

#: ../../../http_cache.rst:269
msgid ""
"The URI of the request is used as the cache key (unless you :doc:`vary "
"</http_cache/cache_vary>`)."
msgstr ""

#: ../../../http_cache.rst:271
msgid ""
"This provides great performance and is simple to use. But, cache "
"*invalidation* is not supported. If your content change, you'll need to "
"wait until your cache expires for the page to update."
msgstr ""

#: ../../../http_cache.rst:277
msgid ""
"Actually, you *can* manually invalidate your cache, but it's not part of "
"the HTTP Caching spec. See :ref:`http-cache-invalidation`."
msgstr ""

#: ../../../http_cache.rst:280
msgid ""
"If you need to set cache headers for many different controller actions, "
"check out `FOSHttpCacheBundle`_. It provides a way to define cache "
"headers based on the URL pattern and other request properties."
msgstr ""

#: ../../../http_cache.rst:284
msgid ""
"Finally, for more information about expiration caching, see "
":doc:`/http_cache/expiration`."
msgstr ""

#: ../../../http_cache.rst:289
msgid "Validation Caching"
msgstr ""

#: ../../../http_cache.rst:295
msgid ""
"With expiration caching, you say \"cache for 3600 seconds!\". But, when "
"someone updates cached content, you won't see that content on your site "
"until the cache expires."
msgstr ""

#: ../../../http_cache.rst:299
msgid ""
"If you need to see updated content *immediately*, you either need to "
":ref:`invalidate <http-cache-invalidation>` your cache *or* use the "
"validation caching model."
msgstr ""

#: ../../../http_cache.rst:303
msgid "For details, see :doc:`/http_cache/validation`."
msgstr ""

#: ../../../http_cache.rst:309
msgid "Safe Methods: Only caching GET or HEAD requests"
msgstr ""

#: ../../../http_cache.rst:311
msgid ""
"HTTP caching only works for \"safe\" HTTP methods (like GET and HEAD). "
"This means two things:"
msgstr ""

#: ../../../http_cache.rst:314
msgid ""
"Don't try to cache PUT or DELETE requests. It won't work and with good "
"reason. These methods are meant to be used when mutating the state of "
"your application (e.g. deleting a blog post). Caching them would prevent "
"certain requests from hitting and mutating your application."
msgstr ""

#: ../../../http_cache.rst:319
msgid ""
"POST requests are generally considered uncacheable, but `they can be "
"cached`_ when they include explicit freshness information. However, POST "
"caching is not widely implemented, so you should avoid it if possible."
msgstr ""

#: ../../../http_cache.rst:323
msgid ""
"You should *never* change the state of your application (e.g. update a "
"blog post) when responding to a GET or HEAD request. If those requests "
"are cached, future requests may not actually hit your server."
msgstr ""

#: ../../../http_cache.rst:331
msgid "More Response Methods"
msgstr ""

#: ../../../http_cache.rst:333
msgid ""
"The Response class provides many more methods related to the cache. Here "
"are the most useful ones::"
msgstr ""

#: ../../../http_cache.rst:342
msgid ""
"Additionally, most cache-related HTTP headers can be set via the single "
":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Response::setCache` "
"method::"
msgstr ""

#: ../../../http_cache.rst:364
msgid ""
"The ``must_revalidate``, ``no_cache``, ``no_store``, ``no_transform`` and"
" ``proxy_revalidate`` directives were introduced in Symfony 5.1."
msgstr ""

#: ../../../http_cache.rst:368
msgid "Cache Invalidation"
msgstr ""

#: ../../../http_cache.rst:370
msgid ""
"Cache invalidation is *not* part of the HTTP specification. Still, it can"
" be really useful to delete various HTTP cache entries as soon as some "
"content on your site is updated."
msgstr ""

#: ../../../http_cache.rst:374
msgid "For details, see :doc:`/http_cache/cache_invalidation`."
msgstr ""

#: ../../../http_cache.rst:377
msgid "Using Edge Side Includes"
msgstr ""

#: ../../../http_cache.rst:379
msgid ""
"When pages contain dynamic parts, you may not be able to cache entire "
"pages, but only parts of it. Read :doc:`/http_cache/esi` to find out how "
"to configure different cache strategies for specific parts of your page."
msgstr ""

#: ../../../http_cache.rst:384
msgid "HTTP Caching and User Sessions"
msgstr ""

#: ../../../http_cache.rst:386
msgid ""
"Whenever the session is started during a request, Symfony turns the "
"response into a private non-cacheable response. This is the best default "
"behavior to not cache private user information (e.g. a shopping cart, a "
"user profile details, etc.) and expose it to other visitors."
msgstr ""

#: ../../../http_cache.rst:391
msgid ""
"However, even requests making use of the session can be cached under some"
" circumstances. For example, information related to some user group could"
" be cached for all the users belonging to that group. Handling these "
"advanced caching scenarios is out of the scope of Symfony, but they can "
"be solved with the `FOSHttpCacheBundle`_."
msgstr ""

#: ../../../http_cache.rst:397
msgid ""
"In order to disable the default Symfony behavior that makes requests "
"using the session uncacheable, add the following internal header to your "
"response and Symfony won't modify it::"
msgstr ""

#: ../../../http_cache.rst:406
msgid "Summary"
msgstr ""

#: ../../../http_cache.rst:408
msgid ""
"Symfony was designed to follow the proven rules of the road: HTTP. "
"Caching is no exception. Mastering the Symfony cache system means "
"becoming familiar with the HTTP cache models and using them effectively. "
"This means that, instead of relying only on Symfony documentation and "
"code examples, you have access to a world of knowledge related to HTTP "
"caching and gateway caches such as Varnish."
msgstr ""

#: ../../../http_cache.rst:416
msgid "Learn more"
msgstr ""

