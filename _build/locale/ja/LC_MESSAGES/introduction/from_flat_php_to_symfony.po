# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the Symfony Framework
# Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Symfony Framework Documentation \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-08 14:21+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../../introduction/from_flat_php_to_symfony.rst:7
msgid "Symfony versus Flat PHP"
msgstr ""

#: ../../../introduction/from_flat_php_to_symfony.rst:9
msgid ""
"**Why is Symfony better than just opening up a file and writing flat "
"PHP?**"
msgstr ""

#: ../../../introduction/from_flat_php_to_symfony.rst:11
msgid ""
"If you've never used a PHP framework, aren't familiar with the `Model-"
"View-Controller`_ (MVC) philosophy, or just wonder what all the *hype* is"
" around Symfony, this article is for you. Instead of *telling* you that "
"Symfony allows you to develop faster and better software than with flat "
"PHP, you'll see for yourself."
msgstr ""

#: ../../../introduction/from_flat_php_to_symfony.rst:17
msgid ""
"In this article, you'll write a simple application in flat PHP, and then "
"refactor it to be more organized. You'll travel through time, seeing the "
"decisions behind why web development has evolved over the past several "
"years to where it is now."
msgstr ""

#: ../../../introduction/from_flat_php_to_symfony.rst:22
msgid ""
"By the end, you'll see how Symfony can rescue you from mundane tasks and "
"let you take back control of your code."
msgstr ""

#: ../../../introduction/from_flat_php_to_symfony.rst:26
msgid "A Simple Blog in Flat PHP"
msgstr ""

#: ../../../introduction/from_flat_php_to_symfony.rst:28
msgid ""
"In this article, you'll build the token blog application using only flat "
"PHP. To begin, create a single page that displays blog entries that have "
"been persisted to the database. Writing in flat PHP is quick and dirty:"
msgstr ""

#: ../../../introduction/from_flat_php_to_symfony.rst:64
msgid ""
"That's quick to write, fast to execute, and, as your app grows, "
"impossible to maintain. There are several problems that need to be "
"addressed:"
msgstr ""

#: ../../../introduction/from_flat_php_to_symfony.rst:67
msgid "**No error-checking**: What if the connection to the database fails?"
msgstr ""

#: ../../../introduction/from_flat_php_to_symfony.rst:69
msgid ""
"**Poor organization**: If the application grows, this single file will "
"become increasingly unmaintainable. Where should you put code to handle a"
" form submission? How can you validate data? Where should code go for "
"sending emails?"
msgstr ""

#: ../../../introduction/from_flat_php_to_symfony.rst:74
msgid ""
"**Difficult to reuse code**: Since everything is in one file, there's no "
"way to reuse any part of the application for other \"pages\" of the blog."
msgstr ""

#: ../../../introduction/from_flat_php_to_symfony.rst:79
msgid ""
"Another problem not mentioned here is the fact that the database is tied "
"to MySQL. Though not covered here, Symfony fully integrates `Doctrine`_, "
"a library dedicated to database abstraction and mapping."
msgstr ""

#: ../../../introduction/from_flat_php_to_symfony.rst:84
msgid "Isolating the Presentation"
msgstr ""

#: ../../../introduction/from_flat_php_to_symfony.rst:86
msgid ""
"The code can immediately gain from separating the application \"logic\" "
"from the code that prepares the HTML \"presentation\"::"
msgstr ""

#: ../../../introduction/from_flat_php_to_symfony.rst:104
msgid ""
"The HTML code is now stored in a separate file ``templates/list.php``, "
"which is primarily an HTML file that uses a template-like PHP syntax:"
msgstr ""

#: ../../../introduction/from_flat_php_to_symfony.rst:129
msgid ""
"By convention, the file that contains all the application logic - "
"``index.php`` - is known as a \"controller\". The term controller is a "
"word you'll hear a lot, regardless of the language or framework you use. "
"It refers to the area of *your* code that processes user input and "
"prepares the response."
msgstr ""

#: ../../../introduction/from_flat_php_to_symfony.rst:134
msgid ""
"In this case, the controller prepares data from the database and then "
"includes a template to present that data. With the controller isolated, "
"you could change *just* the template file if you needed to render the "
"blog entries in some other format (e.g. ``list.json.php`` for JSON "
"format)."
msgstr ""

#: ../../../introduction/from_flat_php_to_symfony.rst:140
msgid "Isolating the Application (Domain) Logic"
msgstr ""

#: ../../../introduction/from_flat_php_to_symfony.rst:142
msgid ""
"So far the application contains only one page. But what if a second page "
"needed to use the same database connection, or even the same array of "
"blog posts? Refactor the code so that the core behavior and data-access "
"functions of the application are isolated in a new file called "
"``model.php``::"
msgstr ""

#: ../../../introduction/from_flat_php_to_symfony.rst:177
msgid ""
"The filename ``model.php`` is used because the logic and data access of "
"an application is traditionally known as the \"model\" layer. In a well-"
"organized application, the majority of the code representing your "
"\"business logic\" should live in the model (as opposed to living in a "
"controller). And unlike in this example, only a portion (or none) of the "
"model is actually concerned with accessing a database."
msgstr ""

#: ../../../introduction/from_flat_php_to_symfony.rst:184
msgid "The controller (``index.php``) is now just a few lines of code::"
msgstr ""

#: ../../../introduction/from_flat_php_to_symfony.rst:193
msgid ""
"Now, the sole task of the controller is to get data from the model layer "
"of the application (the model) and to call a template to render that "
"data. This is a very concise example of the model-view-controller "
"pattern."
msgstr ""

#: ../../../introduction/from_flat_php_to_symfony.rst:198
msgid "Isolating the Layout"
msgstr ""

#: ../../../introduction/from_flat_php_to_symfony.rst:200
msgid ""
"At this point, the application has been refactored into three distinct "
"pieces offering various advantages and the opportunity to reuse almost "
"everything on different pages."
msgstr ""

#: ../../../introduction/from_flat_php_to_symfony.rst:204
msgid ""
"The only part of the code that *can't* be reused is the page layout. Fix "
"that by creating a new ``templates/layout.php`` file:"
msgstr ""

#: ../../../introduction/from_flat_php_to_symfony.rst:220
msgid ""
"The template ``templates/list.php`` can now be simplified to \"extend\" "
"the ``templates/layout.php``:"
msgstr ""

#: ../../../introduction/from_flat_php_to_symfony.rst:243
msgid ""
"You now have a setup that will allow you to reuse the layout. "
"Unfortunately, to accomplish this, you're forced to use a few ugly PHP "
"functions (``ob_start()``, ``ob_get_clean()``) in the template. Symfony "
"solves this using a :doc:`Templating </components/templating>` component."
" You'll see it in action shortly."
msgstr ""

#: ../../../introduction/from_flat_php_to_symfony.rst:250
msgid "Adding a Blog \"show\" Page"
msgstr ""

#: ../../../introduction/from_flat_php_to_symfony.rst:252
msgid ""
"The blog \"list\" page has now been refactored so that the code is "
"better-organized and reusable. To prove it, add a blog \"show\" page, "
"which displays an individual blog post identified by an ``id`` query "
"parameter."
msgstr ""

#: ../../../introduction/from_flat_php_to_symfony.rst:256
msgid ""
"To begin, create a new function in the ``model.php`` file that retrieves "
"an individual blog result based on a given id::"
msgstr ""

#: ../../../introduction/from_flat_php_to_symfony.rst:276
msgid ""
"Next, create a new file called ``show.php`` - the controller for this new"
" page::"
msgstr ""

#: ../../../introduction/from_flat_php_to_symfony.rst:286
msgid ""
"Finally, create the new template file - ``templates/show.php`` - to "
"render the individual blog post:"
msgstr ""

#: ../../../introduction/from_flat_php_to_symfony.rst:305
msgid ""
"Creating the second page now requires very little work and no code is "
"duplicated. Still, this page introduces even more lingering problems that"
" a framework can solve for you. For example, a missing or invalid ``id`` "
"query parameter will cause the page to crash. It would be better if this "
"caused a 404 page to be rendered, but this can't really be done yet."
msgstr ""

#: ../../../introduction/from_flat_php_to_symfony.rst:311
msgid ""
"Another major problem is that each individual controller file must "
"include the ``model.php`` file. What if each controller file suddenly "
"needed to include an additional file or perform some other global task "
"(e.g. enforce security)? As it stands now, that code would need to be "
"added to every controller file. If you forget to include something in one"
" file, hopefully it doesn't relate to security..."
msgstr ""

#: ../../../introduction/from_flat_php_to_symfony.rst:321
msgid "A \"Front Controller\" to the Rescue"
msgstr ""

#: ../../../introduction/from_flat_php_to_symfony.rst:323
msgid ""
"The solution is to use a front controller: a single PHP file through "
"which *all* requests are processed. With a front controller, the URIs for"
" the application change slightly, but start to become more flexible:"
msgstr ""

#: ../../../_includes/_rewrite_rule_tip.rst.inc:3
msgid ""
"By using rewrite rules in your :doc:`web server configuration "
"</setup/web_server_configuration>`, the ``index.php`` won't be needed and"
" you will have beautiful, clean URLs (e.g. ``/show``)."
msgstr ""

#: ../../../introduction/from_flat_php_to_symfony.rst:339
msgid ""
"When using a front controller, a single PHP file (``index.php`` in this "
"case) renders *every* request. For the blog post show page, "
"``/index.php/show`` will actually execute the ``index.php`` file, which "
"is now responsible for routing requests internally based on the full URI."
" As you'll see, a front controller is a very powerful tool."
msgstr ""

#: ../../../introduction/from_flat_php_to_symfony.rst:346
msgid "Creating the Front Controller"
msgstr ""

#: ../../../introduction/from_flat_php_to_symfony.rst:348
msgid ""
"You're about to take a **big** step with the application. With one file "
"handling all requests, you can centralize things such as security "
"handling, configuration loading, and routing. In this application, "
"``index.php`` must now be smart enough to render the blog post list page "
"*or* the blog post show page based on the requested URI::"
msgstr ""

#: ../../../introduction/from_flat_php_to_symfony.rst:371
msgid ""
"For organization, both controllers (formerly ``/index.php`` and "
"``/index.php/show``) are now PHP functions and each has been moved into a"
" separate file named ``controllers.php``::"
msgstr ""

#: ../../../introduction/from_flat_php_to_symfony.rst:387
msgid ""
"As a front controller, ``index.php`` has taken on an entirely new role, "
"one that includes loading the core libraries and routing the application "
"so that one of the two controllers (the ``list_action()`` and "
"``show_action()`` functions) is called. In reality, the front controller "
"is beginning to look and act a lot like how Symfony handles and routes "
"requests."
msgstr ""

#: ../../../introduction/from_flat_php_to_symfony.rst:393
msgid ""
"But be careful not to confuse the terms *front controller* and "
"*controller*. Your app will usually have just *one* front controller, "
"which boots your code. You will have *many* controller functions: one for"
" each page."
msgstr ""

#: ../../../introduction/from_flat_php_to_symfony.rst:399
msgid ""
"Another advantage of a front controller is flexible URLs. Notice that the"
" URL to the blog post show page could be changed from ``/show`` to "
"``/read`` by changing code in only one location. Before, an entire file "
"needed to be renamed. In Symfony, URLs are even more flexible."
msgstr ""

#: ../../../introduction/from_flat_php_to_symfony.rst:404
msgid ""
"By now, the application has evolved from a single PHP file into a "
"structure that is organized and allows for code reuse. You should be "
"happier, but far from satisfied. For example, the routing system is "
"fickle, and wouldn't recognize that the list page - ``/index.php``  - "
"should be accessible also via ``/`` (if Apache rewrite rules were added)."
" Also, instead of developing the blog, a lot of time is being spent "
"working on the \"architecture\" of the code (e.g. routing, calling "
"controllers, templates, etc.). More time will need to be spent to handle "
"form submissions, input validation, logging and security. Why should you "
"have to reinvent solutions to all these routine problems?"
msgstr ""

#: ../../../introduction/from_flat_php_to_symfony.rst:417
msgid "Add a Touch of Symfony"
msgstr ""

#: ../../../introduction/from_flat_php_to_symfony.rst:419
msgid ""
"Symfony to the rescue. Before actually using Symfony, you need to "
"download it. This can be done by using `Composer`_, which takes care of "
"downloading the correct version and all its dependencies and provides an "
"autoloader. An autoloader is a tool that makes it possible to start using"
" PHP classes without explicitly including the file containing the class."
msgstr ""

#: ../../../introduction/from_flat_php_to_symfony.rst:425
msgid ""
"In your root directory, create a ``composer.json`` file with the "
"following content:"
msgstr ""

#: ../../../introduction/from_flat_php_to_symfony.rst:439
msgid ""
"Next, `download Composer`_ and then run the following command, which will"
" download Symfony into a ``vendor/`` directory:"
msgstr ""

#: ../../../introduction/from_flat_php_to_symfony.rst:446
msgid ""
"Beside downloading your dependencies, Composer generates a "
"``vendor/autoload.php`` file, which takes care of autoloading for all the"
" files in the Symfony Framework as well as the files mentioned in the "
"autoload section of your ``composer.json``."
msgstr ""

#: ../../../introduction/from_flat_php_to_symfony.rst:450
msgid ""
"Core to Symfony's philosophy is the idea that an application's main job "
"is to interpret each request and return a response. To this end, Symfony "
"provides both a "
":class:`Symfony\\\\Component\\\\HttpFoundation\\\\Request` and a "
":class:`Symfony\\\\Component\\\\HttpFoundation\\\\Response` class. These "
"classes are object-oriented representations of the raw HTTP request being"
" processed and the HTTP response being returned. Use them to improve the "
"blog::"
msgstr ""

#: ../../../introduction/from_flat_php_to_symfony.rst:478
msgid ""
"The controllers are now responsible for returning a ``Response`` object. "
"To make this easier, you can add a new ``render_template()`` function, "
"which, incidentally, acts quite a bit like the Symfony templating "
"engine::"
msgstr ""

#: ../../../introduction/from_flat_php_to_symfony.rst:512
msgid ""
"By bringing in a small part of Symfony, the application is more flexible "
"and reliable. The ``Request`` provides a dependable way to access "
"information about the HTTP request. Specifically, the "
":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Request::getPathInfo` "
"method returns a cleaned URI (always returning ``/show`` and never "
"``/index.php/show``). So, even if the user goes to ``/index.php/show``, "
"the application is intelligent enough to route the request through "
"``show_action()``."
msgstr ""

#: ../../../introduction/from_flat_php_to_symfony.rst:520
msgid ""
"The ``Response`` object gives flexibility when constructing the HTTP "
"response, allowing HTTP headers and content to be added via an object-"
"oriented interface. And while the responses in this application are "
"simple, this flexibility will pay dividends as your application grows."
msgstr ""

#: ../../../introduction/from_flat_php_to_symfony.rst:528
msgid "The Sample Application in Symfony"
msgstr ""

#: ../../../introduction/from_flat_php_to_symfony.rst:530
msgid ""
"The blog has come a *long* way, but it still contains a lot of code for "
"such a simple application. Along the way, you've made a simple routing "
"system and a method using ``ob_start()`` and ``ob_get_clean()`` to render"
" templates. If, for some reason, you needed to continue building this "
"\"framework\" from scratch, you could at least use Symfony's standalone "
":doc:`Routing </routing>` component and :doc:`Twig </templates>`, which "
"already solve these problems."
msgstr ""

#: ../../../introduction/from_flat_php_to_symfony.rst:538
msgid ""
"Instead of re-solving common problems, you can let Symfony take care of "
"them for you. Here's the same sample application, now built in Symfony::"
msgstr ""

#: ../../../introduction/from_flat_php_to_symfony.rst:573
msgid ""
"Notice, both controller functions now live inside a \"controller class\"."
" This is a nice way to group related pages. The controller functions are "
"also sometimes called *actions*."
msgstr ""

#: ../../../introduction/from_flat_php_to_symfony.rst:577
msgid ""
"The two controllers (or actions) are still lightweight. Each uses the "
":doc:`Doctrine ORM library </doctrine>` to retrieve objects from the "
"database and the Templating component to render a template and return a "
"``Response`` object. The ``list.html.twig`` template is now quite a bit "
"simpler, and uses Twig:"
msgstr ""

#: ../../../introduction/from_flat_php_to_symfony.rst:603
msgid "The ``layout.php`` file is nearly identical:"
msgstr ""

#: ../../../introduction/from_flat_php_to_symfony.rst:623
msgid ""
"The ``show.html.twig`` template is left as an exercise: updating it "
"should be really similar to updating the ``list.html.twig`` template."
msgstr ""

#: ../../../introduction/from_flat_php_to_symfony.rst:626
msgid ""
"When Symfony's engine (called the Kernel) boots up, it needs a map so "
"that it knows which controllers to execute based on the request "
"information. A routing configuration map - ``config/routes.yaml`` - "
"provides this information in a readable format:"
msgstr ""

#: ../../../introduction/from_flat_php_to_symfony.rst:642
msgid ""
"Now that Symfony is handling all the mundane tasks, the front controller "
"``public/index.php`` is reduced to bootstrapping. And since it does so "
"little, you'll never have to touch it::"
msgstr ""

#: ../../../introduction/from_flat_php_to_symfony.rst:655
msgid ""
"The front controller's only job is to initialize Symfony's engine (called"
" the Kernel) and pass it a ``Request`` object to handle. The Symfony core"
" asks the router to inspect the request. The router matches the incoming "
"URL to a specific route and returns information about the route, "
"including the controller that should be executed. The correct controller "
"from the matched route is executed and your code inside the controller "
"creates and returns the appropriate ``Response`` object. The HTTP headers"
" and content of the ``Response`` object are sent back to the client."
msgstr ""

#: ../../../introduction/from_flat_php_to_symfony.rst:664
msgid "It's a beautiful thing."
msgstr ""

#: ../../../introduction/from_flat_php_to_symfony.rst:671
msgid "Where Symfony Delivers"
msgstr ""

#: ../../../introduction/from_flat_php_to_symfony.rst:673
msgid ""
"In the rest of the documentation articles, you'll learn more about how "
"each piece of Symfony works and how you can organize your project. For "
"now, celebrate how migrating the blog from flat PHP to Symfony has "
"improved your life:"
msgstr ""

#: ../../../introduction/from_flat_php_to_symfony.rst:677
msgid ""
"Your application now has **clear and consistently organized code** "
"(though Symfony doesn't force you into this). This promotes "
"**reusability** and allows for new developers to be productive in your "
"project more quickly;"
msgstr ""

#: ../../../introduction/from_flat_php_to_symfony.rst:681
#, python-format
msgid ""
"100% of the code you write is for *your* application. You **don't need to"
" develop or maintain low-level utilities** such as autoloading, "
":doc:`routing </routing>`, or rendering :doc:`controllers </controller>`;"
msgstr ""

#: ../../../introduction/from_flat_php_to_symfony.rst:685
msgid ""
"Symfony gives you **access to open source tools** such as `Doctrine`_ and"
" the :doc:`Templating </components/templating>`, :doc:`Security "
"</components/security>`, :doc:`Form </components/form>`, `Validator`_ and"
" `Translation`_ components (to name a few);"
msgstr ""

#: ../../../introduction/from_flat_php_to_symfony.rst:692
msgid ""
"The application now enjoys **fully-flexible URLs** thanks to the Routing "
"component;"
msgstr ""

#: ../../../introduction/from_flat_php_to_symfony.rst:695
msgid ""
"Symfony's HTTP-centric architecture gives you access to powerful tools "
"such as **HTTP caching** powered by **Symfony's internal HTTP cache** or "
"more powerful tools such as `Varnish`_. This is covered in another "
"article all about :doc:`caching </http_cache>`."
msgstr ""

#: ../../../introduction/from_flat_php_to_symfony.rst:700
msgid ""
"And perhaps best of all, by using Symfony, you now have access to a whole"
" set of **high-quality open source tools developed by the Symfony "
"community**! A good selection of `Symfony community tools`_ can be found "
"on GitHub."
msgstr ""

