# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the Symfony Framework
# Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Symfony Framework Documentation \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-08 14:21+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../../create_framework/event_dispatcher.rst:2
msgid "The EventDispatcher Component"
msgstr ""

#: ../../../create_framework/event_dispatcher.rst:4
msgid ""
"Our framework is still missing a major characteristic of any good "
"framework: *extensibility*. Being extensible means that the developer "
"should be able to hook into the framework life cycle to modify the way "
"the request is handled."
msgstr ""

#: ../../../create_framework/event_dispatcher.rst:8
msgid ""
"What kind of hooks are we talking about? Authentication or caching for "
"instance. To be flexible, hooks must be plug-and-play; the ones you "
"\"register\" for an application are different from the next one depending"
" on your specific needs. Many software have a similar concept like Drupal"
" or Wordpress. In some languages, there is even a standard like `WSGI`_ "
"in Python or `Rack`_ in Ruby."
msgstr ""

#: ../../../create_framework/event_dispatcher.rst:14
msgid ""
"As there is no standard for PHP, we are going to use a well-known design "
"pattern, the *Mediator*, to allow any kind of behaviors to be attached to"
" our framework; the Symfony EventDispatcher Component implements a "
"lightweight version of this pattern:"
msgstr ""

#: ../../../create_framework/event_dispatcher.rst:23
msgid ""
"How does it work? The *dispatcher*, the central object of the event "
"dispatcher system, notifies *listeners* of an *event* dispatched to it. "
"Put another way: your code dispatches an event to the dispatcher, the "
"dispatcher notifies all registered listeners for the event, and each "
"listener do whatever it wants with the event."
msgstr ""

#: ../../../create_framework/event_dispatcher.rst:29
msgid ""
"As an example, let's create a listener that transparently adds the Google"
" Analytics code to all responses."
msgstr ""

#: ../../../create_framework/event_dispatcher.rst:32
msgid ""
"To make it work, the framework must dispatch an event just before "
"returning the Response instance::"
msgstr ""

#: ../../../create_framework/event_dispatcher.rst:85
msgid ""
"Each time the framework handles a Request, a ``ResponseEvent`` event is "
"now dispatched::"
msgstr ""

#: ../../../create_framework/event_dispatcher.rst:117
msgid ""
"The last step is the creation of the dispatcher in the front controller "
"and the registration of a listener for the ``response`` event::"
msgstr ""

#: ../../../create_framework/event_dispatcher.rst:151
msgid ""
"The listener is just a proof of concept and you should add the Google "
"Analytics code just before the body tag."
msgstr ""

#: ../../../create_framework/event_dispatcher.rst:154
msgid ""
"As you can see, ``addListener()`` associates a valid PHP callback to a "
"named event (``response``); the event name must be the same as the one "
"used in the ``dispatch()`` call."
msgstr ""

#: ../../../create_framework/event_dispatcher.rst:158
msgid ""
"In the listener, we add the Google Analytics code only if the response is"
" not a redirection, if the requested format is HTML and if the response "
"content type is HTML (these conditions demonstrate the ease of "
"manipulating the Request and Response data from your code)."
msgstr ""

#: ../../../create_framework/event_dispatcher.rst:163
msgid ""
"So far so good, but let's add another listener on the same event. Let's "
"say that we want to set the ``Content-Length`` of the Response if it is "
"not already set::"
msgstr ""

#: ../../../create_framework/event_dispatcher.rst:176
msgid ""
"Depending on whether you have added this piece of code before the "
"previous listener registration or after it, you will have the wrong or "
"the right value for the ``Content-Length`` header. Sometimes, the order "
"of the listeners matter but by default, all listeners are registered with"
" the same priority, ``0``. To tell the dispatcher to run a listener "
"early, change the priority to a positive number; negative numbers can be "
"used for low priority listeners. Here, we want the ``Content-Length`` "
"listener to be executed last, so change the priority to ``-255``::"
msgstr ""

#: ../../../create_framework/event_dispatcher.rst:196
msgid ""
"When creating your framework, think about priorities (reserve some "
"numbers for internal listeners for instance) and document them "
"thoroughly."
msgstr ""

#: ../../../create_framework/event_dispatcher.rst:199
msgid ""
"Let's refactor the code a bit by moving the Google listener to its own "
"class::"
msgstr ""

#: ../../../create_framework/event_dispatcher.rst:221
msgid "And do the same with the other listener::"
msgstr ""

#: ../../../create_framework/event_dispatcher.rst:239
msgid "Our front controller should now look like the following::"
msgstr ""

#: ../../../create_framework/event_dispatcher.rst:245
msgid ""
"Even if the code is now nicely wrapped in classes, there is still a "
"slight issue: the knowledge of the priorities is \"hardcoded\" in the "
"front controller, instead of being in the listeners themselves. For each "
"application, you have to remember to set the appropriate priorities. "
"Moreover, the listener method names are also exposed here, which means "
"that refactoring our listeners would mean changing all the applications "
"that rely on those listeners. The solution to this dilemma is to use "
"subscribers instead of listeners::"
msgstr ""

#: ../../../create_framework/event_dispatcher.rst:257
msgid ""
"A subscriber knows about all the events it is interested in and pass this"
" information to the dispatcher via the ``getSubscribedEvents()`` method. "
"Have a look at the new version of the ``GoogleListener``::"
msgstr ""

#: ../../../create_framework/event_dispatcher.rst:276
msgid "And here is the new version of ``ContentLengthListener``::"
msgstr ""

#: ../../../create_framework/event_dispatcher.rst:295
msgid ""
"A single subscriber can host as many listeners as you want on as many "
"events as needed."
msgstr ""

#: ../../../create_framework/event_dispatcher.rst:298
msgid ""
"To make your framework truly flexible, don't hesitate to add more events;"
" and to make it more awesome out of the box, add more listeners. Again, "
"this book is not about creating a generic framework, but one that is "
"tailored to your needs. Stop whenever you see fit, and further evolve the"
" code from there."
msgstr ""

