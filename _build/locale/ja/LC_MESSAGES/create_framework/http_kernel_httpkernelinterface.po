# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the Symfony Framework
# Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Symfony Framework Documentation \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-08 14:21+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../../create_framework/http_kernel_httpkernelinterface.rst:2
msgid "The HttpKernel Component: HttpKernelInterface"
msgstr ""

#: ../../../create_framework/http_kernel_httpkernelinterface.rst:4
msgid ""
"In the conclusion of the second chapter of this book, I've talked about "
"one great benefit of using the Symfony components: the *interoperability*"
" between all frameworks and applications using them. Let's do a big step "
"towards this goal by making our framework implement "
"``HttpKernelInterface``::"
msgstr ""

#: ../../../create_framework/http_kernel_httpkernelinterface.rst:24
msgid ""
"``HttpKernelInterface`` is probably the most important piece of code in "
"the HttpKernel component, no kidding. Frameworks and applications that "
"implement this interface are fully interoperable. Moreover, a lot of "
"great features will come with it for free."
msgstr ""

#: ../../../create_framework/http_kernel_httpkernelinterface.rst:29
msgid "Update your framework so that it implements this interface::"
msgstr ""

#: ../../../create_framework/http_kernel_httpkernelinterface.rst:49
msgid ""
"Even if this change looks not too complex, it brings us a lot! Let's talk"
" about one of the most impressive one: transparent :doc:`HTTP caching "
"</http_cache>` support."
msgstr ""

#: ../../../create_framework/http_kernel_httpkernelinterface.rst:52
msgid ""
"The ``HttpCache`` class implements a fully-featured reverse proxy, "
"written in PHP; it implements ``HttpKernelInterface`` and wraps another "
"``HttpKernelInterface`` instance::"
msgstr ""

#: ../../../create_framework/http_kernel_httpkernelinterface.rst:69
msgid ""
"That's all it takes to add HTTP caching support to our framework. Isn't "
"it amazing?"
msgstr ""

#: ../../../create_framework/http_kernel_httpkernelinterface.rst:72
msgid ""
"Configuring the cache needs to be done via HTTP cache headers. For "
"instance, to cache a response for 10 seconds, use the "
"``Response::setTtl()`` method::"
msgstr ""

#: ../../../create_framework/http_kernel_httpkernelinterface.rst:94
msgid ""
"If you are running your framework from the command line by simulating "
"requests (``Request::create('/is_leap_year/2012')``), you can debug "
"Response instances by dumping their string representation (``echo "
"$response;``) as it displays all headers as well as the response content."
msgstr ""

#: ../../../create_framework/http_kernel_httpkernelinterface.rst:99
msgid ""
"To validate that it works correctly, add a random number to the response "
"content and check that the number only changes every 10 seconds::"
msgstr ""

#: ../../../create_framework/http_kernel_httpkernelinterface.rst:106
msgid ""
"When deploying to your production environment, keep using the Symfony "
"reverse proxy (great for shared hosting) or even better, switch to a more"
" efficient reverse proxy like `Varnish`_."
msgstr ""

#: ../../../create_framework/http_kernel_httpkernelinterface.rst:110
msgid ""
"Using HTTP cache headers to manage your application cache is very "
"powerful and allows you to tune finely your caching strategy as you can "
"use both the expiration and the validation models of the HTTP "
"specification. If you are not comfortable with these concepts, read the "
":doc:`HTTP caching </http_cache>` chapter of the Symfony documentation."
msgstr ""

#: ../../../create_framework/http_kernel_httpkernelinterface.rst:116
msgid ""
"The Response class contains methods that let you configure the HTTP "
"cache. One of the most powerful is ``setCache()`` as it abstracts the "
"most frequently used caching strategies into a single array::"
msgstr ""

#: ../../../create_framework/http_kernel_httpkernelinterface.rst:143
msgid ""
"When using the validation model, the ``isNotModified()`` method allows "
"you to cut on the response time by short-circuiting the response "
"generation as early as possible::"
msgstr ""

#: ../../../create_framework/http_kernel_httpkernelinterface.rst:157
msgid ""
"Using HTTP caching is great, but what if you cannot cache the whole page?"
" What if you can cache everything but some sidebar that is more dynamic "
"that the rest of the content? Edge Side Includes (`ESI`_) to the rescue! "
"Instead of generating the whole content in one go, ESI allows you to mark"
" a region of a page as being the content of a sub-request call:"
msgstr ""

#: ../../../create_framework/http_kernel_httpkernelinterface.rst:171
msgid ""
"For ESI tags to be supported by HttpCache, you need to pass it an "
"instance of the ``ESI`` class. The ``ESI`` class automatically parses ESI"
" tags and makes sub-requests to convert them to their proper content::"
msgstr ""

#: ../../../create_framework/http_kernel_httpkernelinterface.rst:183
msgid ""
"For ESI to work, you need to use a reverse proxy that supports it like "
"the Symfony implementation. `Varnish`_ is the best alternative and it is "
"Open-Source."
msgstr ""

#: ../../../create_framework/http_kernel_httpkernelinterface.rst:187
msgid ""
"When using complex HTTP caching strategies and/or many ESI include tags, "
"it can be hard to understand why and when a resource should be cached or "
"not. To ease debugging, you can enable the debug mode::"
msgstr ""

#: ../../../create_framework/http_kernel_httpkernelinterface.rst:198
msgid ""
"The debug mode adds a ``X-Symfony-Cache`` header to each response that "
"describes what the cache layer did:"
msgstr ""

#: ../../../create_framework/http_kernel_httpkernelinterface.rst:207
msgid ""
"HttpCache has many features like support for the ``stale-while-"
"revalidate`` and ``stale-if-error`` HTTP Cache-Control extensions as "
"defined in RFC 5861."
msgstr ""

#: ../../../create_framework/http_kernel_httpkernelinterface.rst:211
msgid ""
"With the addition of a single interface, our framework can now benefit "
"from the many features built into the HttpKernel component; HTTP caching "
"being just one of them but an important one as it can make your "
"applications fly!"
msgstr ""

