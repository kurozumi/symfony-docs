# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the Symfony Framework
# Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Symfony Framework Documentation \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-08 14:21+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../../create_framework/unit_testing.rst:2
msgid "Unit Testing"
msgstr ""

#: ../../../create_framework/unit_testing.rst:4
msgid ""
"You might have noticed some subtle but nonetheless important bugs in the "
"framework we built in the previous chapter. When creating a framework, "
"you must be sure that it behaves as advertised. If not, all the "
"applications based on it will exhibit the same bugs. The good news is "
"that whenever you fix a bug, you are fixing a bunch of applications too."
msgstr ""

#: ../../../create_framework/unit_testing.rst:10
msgid ""
"Today's mission is to write unit tests for the framework we have created "
"by using `PHPUnit`_. Create a PHPUnit configuration file in "
"``example.com/phpunit.xml.dist``:"
msgstr ""

#: ../../../create_framework/unit_testing.rst:37
msgid ""
"This configuration defines sensible defaults for most PHPUnit settings; "
"more interesting, the autoloader is used to bootstrap the tests, and "
"tests will be stored under the ``example.com/tests/`` directory."
msgstr ""

#: ../../../create_framework/unit_testing.rst:41
msgid ""
"Now, let's write a test for \"not found\" resources. To avoid the "
"creation of all dependencies when writing tests and to really just unit-"
"test what we want, we are going to use `test doubles`_. Test doubles are "
"easier to create when we rely on interfaces instead of concrete classes. "
"Fortunately, Symfony provides such interfaces for core objects like the "
"URL matcher and the controller resolver. Modify the framework to make use"
" of them::"
msgstr ""

#: ../../../create_framework/unit_testing.rst:74
msgid "We are now ready to write our first test::"
msgstr ""

#: ../../../create_framework/unit_testing.rst:121
msgid ""
"This test simulates a request that does not match any route. As such, the"
" ``match()`` method returns a ``ResourceNotFoundException`` exception and"
" we are testing that our framework converts this exception to a 404 "
"response."
msgstr ""

#: ../../../create_framework/unit_testing.rst:125
msgid "Execute this test by running ``phpunit`` in the ``example.com`` directory:"
msgstr ""

#: ../../../create_framework/unit_testing.rst:133
msgid ""
"If you don't understand what the hell is going on in the code, read the "
"PHPUnit documentation on `test doubles`_."
msgstr ""

#: ../../../create_framework/unit_testing.rst:136
msgid ""
"After the test ran, you should see a green bar. If not, you have a bug "
"either in the test or in the framework code!"
msgstr ""

#: ../../../create_framework/unit_testing.rst:139
msgid "Adding a unit test for any exception thrown in a controller::"
msgstr ""

#: ../../../create_framework/unit_testing.rst:150
msgid ""
"Last, but not the least, let's write a test for when we actually have a "
"proper Response::"
msgstr ""

#: ../../../create_framework/unit_testing.rst:189
msgid ""
"In this test, we simulate a route that matches and returns a simple "
"controller. We check that the response status is 200 and that its content"
" is the one we have set in the controller."
msgstr ""

#: ../../../create_framework/unit_testing.rst:193
msgid ""
"To check that we have covered all possible use cases, run the PHPUnit "
"test coverage feature (you need to enable `XDebug`_ first):"
msgstr ""

#: ../../../create_framework/unit_testing.rst:200
msgid ""
"Open ``example.com/cov/src/Simplex/Framework.php.html`` in a browser and "
"check that all the lines for the Framework class are green (it means that"
" they have been visited when the tests were executed)."
msgstr ""

#: ../../../create_framework/unit_testing.rst:204
msgid "Alternatively you can output the result directly to the console:"
msgstr ""

#: ../../../create_framework/unit_testing.rst:210
msgid ""
"Thanks to the clean object-oriented code that we have written so far, we "
"have been able to write unit-tests to cover all possible use cases of our"
" framework; test doubles ensured that we were actually testing our code "
"and not Symfony code."
msgstr ""

#: ../../../create_framework/unit_testing.rst:215
msgid ""
"Now that we are confident (again) about the code we have written, we can "
"safely think about the next batch of features we want to add to our "
"framework."
msgstr ""

