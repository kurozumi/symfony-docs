# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the Symfony Framework
# Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Symfony Framework Documentation \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-08 14:21+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../../reference/forms/types/collection.rst:5
msgid "CollectionType Field"
msgstr ""

#: ../../../reference/forms/types/collection.rst:7
msgid ""
"This field type is used to render a \"collection\" of some field or form."
" In the easiest sense, it could be an array of ``TextType`` fields that "
"populate an array ``emails`` values. In more complex examples, you can "
"embed entire forms, which is useful when creating forms that expose one-"
"to-many relationships (e.g. a product from where you can manage many "
"related product photos)."
msgstr ""

#: ../../../reference/forms/types/collection.rst:15
msgid "Rendered as"
msgstr ""

#: ../../../reference/forms/types/collection.rst:15
msgid "depends on the `entry_type`_ option"
msgstr ""

#: ../../../reference/forms/types/collection.rst:17
msgid "Options"
msgstr ""

#: ../../../reference/forms/types/collection.rst:17
msgid "`allow_add`_"
msgstr ""

#: ../../../reference/forms/types/collection.rst:18
msgid "`allow_delete`_"
msgstr ""

#: ../../../reference/forms/types/collection.rst:19
msgid "`delete_empty`_"
msgstr ""

#: ../../../reference/forms/types/collection.rst:20
msgid "`entry_options`_"
msgstr ""

#: ../../../reference/forms/types/collection.rst:21
msgid "`entry_type`_"
msgstr ""

#: ../../../reference/forms/types/collection.rst:22
msgid "`prototype`_"
msgstr ""

#: ../../../reference/forms/types/collection.rst:23
msgid "`prototype_data`_"
msgstr ""

#: ../../../reference/forms/types/collection.rst:24
msgid "`prototype_name`_"
msgstr ""

#: ../../../reference/forms/types/collection.rst:26
msgid "Inherited options"
msgstr ""

#: ../../../reference/forms/types/collection.rst:26
msgid "`attr`_"
msgstr ""

#: ../../../reference/forms/types/collection.rst:27
msgid "`by_reference`_"
msgstr ""

#: ../../../reference/forms/types/collection.rst:28
msgid "`empty_data`_"
msgstr ""

#: ../../../reference/forms/types/collection.rst:29
msgid "`error_bubbling`_"
msgstr ""

#: ../../../reference/forms/types/collection.rst:30
msgid "`error_mapping`_"
msgstr ""

#: ../../../reference/forms/types/collection.rst:31
msgid "`help`_"
msgstr ""

#: ../../../reference/forms/types/collection.rst:32
msgid "`help_attr`_"
msgstr ""

#: ../../../reference/forms/types/collection.rst:33
msgid "`help_html`_"
msgstr ""

#: ../../../reference/forms/types/collection.rst:34
msgid "`label`_"
msgstr ""

#: ../../../reference/forms/types/collection.rst:35
msgid "`label_attr`_"
msgstr ""

#: ../../../reference/forms/types/collection.rst:36
msgid "`label_format`_"
msgstr ""

#: ../../../reference/forms/types/collection.rst:37
msgid "`mapped`_"
msgstr ""

#: ../../../reference/forms/types/collection.rst:38
msgid "`required`_"
msgstr ""

#: ../../../reference/forms/types/collection.rst:39
msgid "`row_attr`_"
msgstr ""

#: ../../../reference/forms/types/collection.rst:41
msgid "Parent type"
msgstr ""

#: ../../../reference/forms/types/collection.rst:41
msgid ":doc:`FormType </reference/forms/types/form>`"
msgstr ""

#: ../../../reference/forms/types/collection.rst:43
msgid "Class"
msgstr ""

#: ../../../reference/forms/types/collection.rst:43
msgid ":class:`Symfony\\\\Component\\\\Form\\\\Extension\\\\Core\\\\Type\\\\CollectionType`"
msgstr ""

#: ../../../reference/forms/types/options/_debug_form.rst.inc:3
msgid ""
"The full list of options defined and inherited by this form type is "
"available running this command in your app:"
msgstr ""

#: ../../../reference/forms/types/collection.rst:50
msgid ""
"If you are working with a collection of Doctrine entities, pay special "
"attention to the `allow_add`_, `allow_delete`_ and `by_reference`_ "
"options. You can also see a complete example in the "
":doc:`/form/form_collections` article."
msgstr ""

#: ../../../reference/forms/types/collection.rst:56
msgid "Basic Usage"
msgstr ""

#: ../../../reference/forms/types/collection.rst:58
msgid ""
"This type is used when you want to manage a collection of similar items "
"in a form. For example, suppose you have an ``emails`` field that "
"corresponds to an array of email addresses. In the form, you want to "
"expose each email address as its own input text box::"
msgstr ""

#: ../../../reference/forms/types/collection.rst:76
msgid "The simplest way to render this is all at once:"
msgstr ""

#: ../../../reference/forms/types/collection.rst:82
msgid "A much more flexible method would look like this:"
msgstr ""

#: ../../../reference/forms/types/collection.rst:98
msgid ""
"In both cases, no input fields would render unless your ``emails`` data "
"array already contained some emails."
msgstr ""

#: ../../../reference/forms/types/collection.rst:101
msgid ""
"In this simple example, it's still impossible to add new addresses or "
"remove existing addresses. Adding new addresses is possible by using the "
"`allow_add`_ option (and optionally the `prototype`_ option) (see example"
" below). Removing emails from the ``emails`` array is possible with the "
"`allow_delete`_ option."
msgstr ""

#: ../../../reference/forms/types/collection.rst:107
msgid "Adding and Removing Items"
msgstr ""

#: ../../../reference/forms/types/collection.rst:109
msgid ""
"If `allow_add`_ is set to ``true``, then if any unrecognized items are "
"submitted, they'll be added seamlessly to the array of items. This is "
"great in theory, but takes a little bit more effort in practice to get "
"the client-side JavaScript correct."
msgstr ""

#: ../../../reference/forms/types/collection.rst:114
msgid ""
"Following along with the previous example, suppose you start with two "
"emails in the ``emails`` data array. In that case, two input fields will "
"be rendered that will look something like this (depending on the name of "
"your form):"
msgstr ""

#: ../../../reference/forms/types/collection.rst:124
msgid ""
"To allow your user to add another email, just set `allow_add`_ to "
"``true`` and - via JavaScript - render another field with the name "
"``form[emails][2]`` (and so on for more and more fields)."
msgstr ""

#: ../../../reference/forms/types/collection.rst:128
msgid ""
"To help make this easier, setting the `prototype`_ option to ``true`` "
"allows you to render a \"template\" field, which you can then use in your"
" JavaScript to help you dynamically create these new fields. A rendered "
"prototype field will look like this:"
msgstr ""

#: ../../../reference/forms/types/collection.rst:141
msgid ""
"By replacing ``__name__`` with some unique value (e.g. ``2``), you can "
"build and insert new HTML fields into your form."
msgstr ""

#: ../../../reference/forms/types/collection.rst:144
msgid ""
"Using jQuery, a simple example might look like this. If you're rendering "
"your collection fields all at once (e.g. ``form_row(form.emails)``), then"
" things are even easier because the ``data-prototype`` attribute is "
"rendered automatically for you (with a slight difference - see note "
"below) and all you need is this JavaScript code:"
msgstr ""

#: ../../../reference/forms/types/collection.rst:176
msgid "And update the template as follows:"
msgstr ""

#: ../../../reference/forms/types/collection.rst:207
msgid ""
"If you're rendering the entire collection at once, then the prototype is "
"automatically available on the ``data-prototype`` attribute of the "
"element (e.g. ``div`` or ``table``) that surrounds your collection. The "
"only difference is that the entire \"form row\" is rendered for you, "
"meaning you wouldn't have to wrap it in any container element as it was "
"done above."
msgstr ""

#: ../../../reference/forms/types/collection.rst:215
msgid "Field Options"
msgstr ""

#: ../../../reference/forms/types/collection.rst:218
#: ../../../reference/forms/types/collection.rst:452
msgid "allow_add"
msgstr ""

#: ../../../reference/forms/types/collection.rst:220
#: ../../../reference/forms/types/collection.rst:242
msgid "**type**: ``boolean`` **default**: ``false``"
msgstr ""

#: ../../../reference/forms/types/collection.rst:222
msgid ""
"If set to ``true``, then if unrecognized items are submitted to the "
"collection, they will be added as new items. The ending array will "
"contain the existing items as well as the new item that was in the "
"submitted data. See the above example for more details."
msgstr ""

#: ../../../reference/forms/types/collection.rst:227
msgid ""
"The `prototype`_ option can be used to help render a prototype item that "
"can be used - with JavaScript - to create new form items dynamically on "
"the client side. For more information, see the above example and :ref"
":`form-collections-new-prototype`."
msgstr ""

#: ../../../reference/forms/types/collection.rst:234
msgid ""
"If you're embedding entire other forms to reflect a one-to-many database "
"relationship, you may need to manually ensure that the foreign key of "
"these new objects is set correctly. If you're using Doctrine, this won't "
"happen automatically. See the above link for more details."
msgstr ""

#: ../../../reference/forms/types/collection.rst:240
#: ../../../reference/forms/types/collection.rst:453
msgid "allow_delete"
msgstr ""

#: ../../../reference/forms/types/collection.rst:244
msgid ""
"If set to ``true``, then if an existing item is not contained in the "
"submitted data, it will be correctly absent from the final array of "
"items. This means that you can implement a \"delete\" button via "
"JavaScript which removes a form element from the DOM. When the user "
"submits the form, its absence from the submitted data will mean that it's"
" removed from the final array."
msgstr ""

#: ../../../reference/forms/types/collection.rst:250
msgid "For more information, see :ref:`form-collections-remove`."
msgstr ""

#: ../../../reference/forms/types/collection.rst:254
msgid ""
"Be careful when using this option when you're embedding a collection of "
"objects. In this case, if any embedded forms are removed, they *will* "
"correctly be missing from the final array of objects. However, depending "
"on your application logic, when one of those objects is removed, you may "
"want to delete it or at least remove its foreign key reference to the "
"main object. None of this is handled automatically. For more information,"
" see :ref:`form-collections-remove`."
msgstr ""

#: ../../../reference/forms/types/collection.rst:263
msgid "delete_empty"
msgstr ""

#: ../../../reference/forms/types/collection.rst:265
msgid "**type**: ``Boolean`` or ``callable`` **default**: ``false``"
msgstr ""

#: ../../../reference/forms/types/collection.rst:267
msgid ""
"If you want to explicitly remove entirely empty collection entries from "
"your form you have to set this option to ``true``. However, existing "
"collection entries will only be deleted if you have the allow_delete_ "
"option enabled. Otherwise the empty values will be kept."
msgstr ""

#: ../../../reference/forms/types/collection.rst:274
msgid ""
"The ``delete_empty`` option only removes items when the normalized value "
"is ``null``. If the nested `entry_type`_ is a compound form type, you "
"must either set the ``required`` option to ``false`` or set the "
"``empty_data`` option to ``null``. Both of these options can be set "
"inside `entry_options`_. Read about the :ref:`form's empty_data option "
"<reference-form-option-empty-data>` to learn why this is necessary."
msgstr ""

#: ../../../reference/forms/types/collection.rst:281
msgid ""
"A value is deleted from the collection only if the normalized value is "
"``null``. However, you can also set the option value to a callable, which"
" will be executed for each value in the submitted collection. If the "
"callable returns ``true``, the value is removed from the collection. For "
"example::"
msgstr ""

#: ../../../reference/forms/types/collection.rst:296
msgid ""
"Using a callable is particularly useful in case of compound form types, "
"which may define complex conditions for considering them empty."
msgstr ""

#: ../../../reference/forms/types/collection.rst:300
msgid "entry_options"
msgstr ""

#: ../../../reference/forms/types/collection.rst:302
#: ../../../reference/forms/types/options/attr.rst.inc:4
#: ../../../reference/forms/types/options/error_mapping.rst.inc:4
#: ../../../reference/forms/types/options/help_attr.rst.inc:4
#: ../../../reference/forms/types/options/label_attr.rst.inc:4
#: ../../../reference/forms/types/options/row_attr.rst.inc:4
msgid "**type**: ``array`` **default**: ``[]``"
msgstr ""

#: ../../../reference/forms/types/collection.rst:304
msgid ""
"This is the array that's passed to the form type specified in the "
"`entry_type`_ option. For example, if you used the :doc:`ChoiceType "
"</reference/forms/types/choice>` as your `entry_type`_ option (e.g. for a"
" collection of drop-down menus), then you'd need to at least pass the "
"``choices`` option to the underlying type::"
msgstr ""

#: ../../../reference/forms/types/collection.rst:327
msgid "entry_type"
msgstr ""

#: ../../../reference/forms/types/collection.rst:329
msgid ""
"**type**: ``string`` **default**: "
"``'Symfony\\Component\\Form\\Extension\\Core\\Type\\TextType'``"
msgstr ""

#: ../../../reference/forms/types/collection.rst:331
msgid ""
"This is the field type for each item in this collection (e.g. "
"``TextType``, ``ChoiceType``, etc). For example, if you have an array of "
"email addresses, you'd use the :doc:`EmailType "
"</reference/forms/types/email>`. If you want to embed a collection of "
"some other form, pass the form type class as this option (e.g. "
"``MyFormType::class``)."
msgstr ""

#: ../../../reference/forms/types/collection.rst:338
msgid "prototype"
msgstr ""

#: ../../../reference/forms/types/collection.rst:340
#: ../../../reference/forms/types/collection.rst:422
#: ../../../reference/forms/types/options/by_reference.rst.inc:4
#: ../../../reference/forms/types/options/required.rst.inc:4
msgid "**type**: ``boolean`` **default**: ``true``"
msgstr ""

#: ../../../reference/forms/types/collection.rst:342
msgid ""
"This option is useful when using the `allow_add`_ option. If ``true`` "
"(and if `allow_add`_ is also ``true``), a special \"prototype\" attribute"
" will be available so that you can render a \"template\" example on your "
"page of what a new element should look like. The ``name`` attribute given"
" to this element is ``__name__``. This allows you to add a \"add "
"another\" button via JavaScript which reads the prototype, replaces "
"``__name__`` with some unique name or number and render it inside your "
"form. When submitted, it will be added to your underlying array due to "
"the `allow_add`_ option."
msgstr ""

#: ../../../reference/forms/types/collection.rst:351
msgid ""
"The prototype field can be rendered via the ``prototype`` variable in the"
" collection field:"
msgstr ""

#: ../../../reference/forms/types/collection.rst:358
msgid ""
"Note that all you really need is the \"widget\", but depending on how "
"you're rendering your form, having the entire \"form row\" may be easier "
"for you."
msgstr ""

#: ../../../reference/forms/types/collection.rst:363
msgid ""
"If you're rendering the entire collection field at once, then the "
"prototype form row is automatically available on the ``data-prototype`` "
"attribute of the element (e.g. ``div`` or ``table``) that surrounds your "
"collection."
msgstr ""

#: ../../../reference/forms/types/collection.rst:367
msgid ""
"For details on how to actually use this option, see the above example as "
"well as :ref:`form-collections-new-prototype`."
msgstr ""

#: ../../../reference/forms/types/collection.rst:371
msgid "prototype_data"
msgstr ""

#: ../../../reference/forms/types/collection.rst:373
msgid "**type**: ``mixed`` **default**: ``null``"
msgstr ""

#: ../../../reference/forms/types/collection.rst:375
msgid ""
"Allows you to define specific data for the prototype. Each new row added "
"will initially contain the data set by this option. By default, the data "
"configured for all entries with the `entry_options`_ option will be "
"used::"
msgstr ""

#: ../../../reference/forms/types/collection.rst:391
msgid "prototype_name"
msgstr ""

#: ../../../reference/forms/types/collection.rst:393
msgid "**type**: ``string`` **default**: ``__name__``"
msgstr ""

#: ../../../reference/forms/types/collection.rst:395
msgid ""
"If you have several collections in your form, or worse, nested "
"collections you may want to change the placeholder so that unrelated "
"placeholders are not replaced with the same value."
msgstr ""

#: ../../../reference/forms/types/collection.rst:400
msgid "Inherited Options"
msgstr ""

#: ../../../reference/forms/types/collection.rst:402
msgid ""
"These options inherit from the :doc:`FormType "
"</reference/forms/types/form>`. Not all options are listed here - only "
"the most applicable to this type:"
msgstr ""

#: ../../../reference/forms/types/options/attr.rst.inc:2
msgid "``attr``"
msgstr ""

#: ../../../reference/forms/types/options/attr.rst.inc:6
msgid ""
"If you want to add extra attributes to an HTML field representation you "
"can use the ``attr`` option. It's an associative array with HTML "
"attributes as keys. This can be useful when you need to set a custom "
"class for some widget::"
msgstr ""

#: ../../../reference/forms/types/options/attr.rst.inc:16
msgid ""
"Use the ``row_attr`` option if you want to add these attributes to the "
"the :ref:`form type row <form-rendering-basics>` element."
msgstr ""

#: ../../../reference/forms/types/options/by_reference.rst.inc:2
msgid "``by_reference``"
msgstr ""

#: ../../../reference/forms/types/options/by_reference.rst.inc:6
msgid ""
"In most cases, if you have an ``author`` field, then you expect "
"``setAuthor()`` to be called on the underlying object. In some cases, "
"however, ``setAuthor()`` may *not* be called. Setting ``by_reference`` to"
" ``false`` ensures that the setter is called in all cases."
msgstr ""

#: ../../../reference/forms/types/options/by_reference.rst.inc:11
msgid "To explain this further, here's a simple example::"
msgstr ""

#: ../../../reference/forms/types/options/by_reference.rst.inc:27
msgid ""
"If ``by_reference`` is true, the following takes place behind the scenes "
"when you call ``submit()`` (or ``handleRequest()``) on the form::"
msgstr ""

#: ../../../reference/forms/types/options/by_reference.rst.inc:34
msgid ""
"Notice that ``setAuthor()`` is not called. The author is modified by "
"reference."
msgstr ""

#: ../../../reference/forms/types/options/by_reference.rst.inc:36
msgid "If you set ``by_reference`` to false, submitting looks like this::"
msgstr ""

#: ../../../reference/forms/types/options/by_reference.rst.inc:44
msgid ""
"So, all that ``by_reference=false`` really does is that it clones the "
"object, which enforces the framework to call the setter on the parent "
"object."
msgstr ""

#: ../../../reference/forms/types/options/by_reference.rst.inc:47
msgid ""
"Similarly, if you're using the :doc:`CollectionType "
"</reference/forms/types/collection>` field where your underlying "
"collection data is an object (like with Doctrine's ``ArrayCollection``), "
"then ``by_reference`` must be set to ``false`` if you need the adder and "
"remover (e.g. ``addAuthor()`` and ``removeAuthor()``) to be called."
msgstr ""

#: ../../../reference/forms/types/options/empty_data.rst.inc:2
msgid "``empty_data``"
msgstr ""

#: ../../../reference/forms/types/options/empty_data.rst.inc:4
msgid "**type**: ``mixed``"
msgstr ""

#: ../../../reference/forms/types/collection.rst:414
msgid "The default value is ``[]`` (empty array)."
msgstr ""

#: ../../../reference/forms/types/options/empty_data.rst.inc:3
msgid ""
"This option determines what value the field will *return* when the "
"submitted value is empty (or missing). It does not set an initial value "
"if none is provided when the form is rendered in a view."
msgstr ""

#: ../../../reference/forms/types/options/empty_data.rst.inc:7
msgid ""
"This means it helps you handling form submission with blank fields. For "
"example, if you want the ``name`` field to be explicitly set to ``John "
"Doe`` when no value is selected, you can do it like this::"
msgstr ""

#: ../../../reference/forms/types/options/empty_data.rst.inc:16
msgid ""
"This will still render an empty text box, but upon submission the ``John "
"Doe`` value will be set. Use the ``data`` or ``placeholder`` options to "
"show this initial value in the rendered form."
msgstr ""

#: ../../../reference/forms/types/options/empty_data.rst.inc:20
msgid ""
"If a form is compound, you can set ``empty_data`` as an array, object or "
"closure. See the :doc:`/form/use_empty_data` article for more details "
"about these options."
msgstr ""

#: ../../../reference/forms/types/options/empty_data.rst.inc:26
msgid ""
"If you want to set the ``empty_data`` option for your entire form class, "
"see the :doc:`/form/use_empty_data` article."
msgstr ""

#: ../../../reference/forms/types/options/empty_data.rst.inc:31
msgid ""
":doc:`Form data transformers </form/data_transformers>` will still be "
"applied to the ``empty_data`` value. This means that an empty string will"
" be cast to ``null``. Use a custom data transformer if you explicitly "
"want to return the empty string."
msgstr ""

#: ../../../reference/forms/types/collection.rst:420
msgid "error_bubbling"
msgstr ""

#: ../../../reference/forms/types/options/_error_bubbling_body.rst.inc:1
msgid ""
"If ``true``, any errors for this field will be passed to the parent field"
" or form. For example, if set to ``true`` on a normal field, any errors "
"for that field will be attached to the main form, not to the specific "
"field."
msgstr ""

#: ../../../reference/forms/types/options/error_mapping.rst.inc:2
msgid "``error_mapping``"
msgstr ""

#: ../../../reference/forms/types/options/error_mapping.rst.inc:6
msgid "This option allows you to modify the target of a validation error."
msgstr ""

#: ../../../reference/forms/types/options/error_mapping.rst.inc:8
msgid ""
"Imagine you have a custom method named ``matchingCityAndZipCode()`` that "
"validates whether the city and zip code match. Unfortunately, there is no"
" ``matchingCityAndZipCode`` field in your form, so all that Symfony can "
"do is display the error on top of the form."
msgstr ""

#: ../../../reference/forms/types/options/error_mapping.rst.inc:13
msgid ""
"With customized error mapping, you can do better: map the error to the "
"city field so that it displays above it::"
msgstr ""

#: ../../../reference/forms/types/options/error_mapping.rst.inc:25
msgid "Here are the rules for the left and the right side of the mapping:"
msgstr ""

#: ../../../reference/forms/types/options/error_mapping.rst.inc:27
msgid "The left side contains property paths;"
msgstr ""

#: ../../../reference/forms/types/options/error_mapping.rst.inc:28
msgid ""
"If the violation is generated on a property or method of a class, its "
"path is the ``propertyName``;"
msgstr ""

#: ../../../reference/forms/types/options/error_mapping.rst.inc:30
msgid ""
"If the violation is generated on an entry of an ``array`` or "
"``ArrayAccess`` object, the property path is ``[indexName]``;"
msgstr ""

#: ../../../reference/forms/types/options/error_mapping.rst.inc:32
msgid ""
"You can construct nested property paths by concatenating them, separating"
" properties by dots. For example: "
"``addresses[work].matchingCityAndZipCode``;"
msgstr ""

#: ../../../reference/forms/types/options/error_mapping.rst.inc:34
msgid "The right side contains the names of fields in the form."
msgstr ""

#: ../../../reference/forms/types/options/error_mapping.rst.inc:36
msgid ""
"By default, errors for any property that is not mapped will bubble up to "
"the parent form. You can use the dot (``.``) on the left side to map "
"errors of all unmapped properties to a particular field. For instance, to"
" map all these errors to the ``city`` field, use::"
msgstr ""

#: ../../../reference/forms/types/options/help.rst.inc:2
msgid "help"
msgstr ""

#: ../../../reference/forms/types/options/help.rst.inc:4
msgid "**type**: ``string`` **default**: null"
msgstr ""

#: ../../../reference/forms/types/options/help.rst.inc:6
msgid ""
"Allows you to define a help message for the form field, which by default "
"is rendered below the field::"
msgstr ""

#: ../../../reference/forms/types/options/help_attr.rst.inc:2
msgid "help_attr"
msgstr ""

#: ../../../reference/forms/types/options/help_attr.rst.inc:6
msgid ""
"Sets the HTML attributes for the element used to display the help message"
" of the form field. Its value is an associative array with HTML attribute"
" names as keys. These attributes can also be set in the template:"
msgstr ""

#: ../../../reference/forms/types/options/help_html.rst.inc:2
msgid "help_html"
msgstr ""

#: ../../../reference/forms/types/options/help_html.rst.inc:4
msgid "**type**: ``bool`` **default**: ``false``"
msgstr ""

#: ../../../reference/forms/types/options/help_html.rst.inc:6
msgid ""
"By default, the contents of the ``help`` option are escaped before "
"rendering them in the template. Set this option to ``true`` to not escape"
" them, which is useful when the help contains HTML elements."
msgstr ""

#: ../../../reference/forms/types/options/label.rst.inc:2
msgid "``label``"
msgstr ""

#: ../../../reference/forms/types/options/label.rst.inc:4
msgid ""
"**type**: ``string`` **default**: The label is \"guessed\" from the field"
" name"
msgstr ""

#: ../../../reference/forms/types/options/label.rst.inc:6
msgid ""
"Sets the label that will be used when rendering the field. Setting to "
"false will suppress the label. The label can also be directly set inside "
"the template:"
msgstr ""

#: ../../../reference/forms/types/options/label_attr.rst.inc:2
msgid "``label_attr``"
msgstr ""

#: ../../../reference/forms/types/options/label_attr.rst.inc:6
msgid ""
"Sets the HTML attributes for the ``<label>`` element, which will be used "
"when rendering the label for the field. It's an associative array with "
"HTML attribute as a key. This attributes can also be directly set inside "
"the template:"
msgstr ""

#: ../../../reference/forms/types/options/label_format.rst.inc:2
msgid "``label_format``"
msgstr ""

#: ../../../reference/forms/types/options/label_format.rst.inc:4
msgid "**type**: ``string`` **default**: ``null``"
msgstr ""

#: ../../../reference/forms/types/options/label_format.rst.inc:6
msgid ""
"Configures the string used as the label of the field, in case the "
"``label`` option was not set. This is useful when using :ref:`keyword "
"translation messages <translation-real-vs-keyword-messages>`."
msgstr ""

#: ../../../reference/forms/types/options/label_format.rst.inc:10
msgid ""
"If you're using keyword translation messages as labels, you often end up "
"having multiple keyword messages for the same label (e.g. "
"``profile_address_street``, ``invoice_address_street``). This is because "
"the label is built for each \"path\" to a field. To avoid duplicated "
"keyword messages, you can configure the label format to a static value, "
"like::"
msgstr ""

#: ../../../reference/forms/types/options/label_format.rst.inc:25
msgid ""
"This option is inherited by the child types. With the code above, the "
"label of the ``street`` field of both forms will use the "
"``form.address.street`` keyword message."
msgstr ""

#: ../../../reference/forms/types/options/label_format.rst.inc:29
msgid "Two variables are available in the label format:"
msgstr ""

#: ../../../reference/forms/types/options/label_format.rst.inc:32
#, python-format
msgid "``%id%``"
msgstr ""

#: ../../../reference/forms/types/options/label_format.rst.inc:32
msgid ""
"A unique identifier for the field, consisting of the complete path to the"
" field and the field name (e.g. ``profile_address_street``);"
msgstr ""

#: ../../../reference/forms/types/options/label_format.rst.inc:35
msgid "``%name%``"
msgstr ""

#: ../../../reference/forms/types/options/label_format.rst.inc:35
msgid "The field name (e.g. ``street``)."
msgstr ""

#: ../../../reference/forms/types/options/label_format.rst.inc:37
msgid ""
"The default value (``null``) results in a :ref:`\"humanized\" version "
"<reference-twig-humanize-filter>` of the field name."
msgstr ""

#: ../../../reference/forms/types/options/label_format.rst.inc:42
msgid ""
"The ``label_format`` option is evaluated in the form theme. Make sure to "
"update your templates in case you :doc:`customized form theming "
"</form/form_customization>`."
msgstr ""

#: ../../../reference/forms/types/options/mapped.rst.inc:2
msgid "``mapped``"
msgstr ""

#: ../../../reference/forms/types/options/mapped.rst.inc:4
msgid "**type**: ``boolean``  **default**: ``true``"
msgstr ""

#: ../../../reference/forms/types/options/mapped.rst.inc:6
msgid ""
"If you wish the field to be ignored when reading or writing to the "
"object, you can set the ``mapped`` option to ``false``."
msgstr ""

#: ../../../reference/forms/types/options/required.rst.inc:2
msgid "``required``"
msgstr ""

#: ../../../reference/forms/types/options/required.rst.inc:6
msgid ""
"If true, an `HTML5 required attribute`_ will be rendered. The "
"corresponding ``label`` will also render with a ``required`` class."
msgstr ""

#: ../../../reference/forms/types/options/required.rst.inc:9
msgid ""
"This is superficial and independent of validation. At best, if you let "
"Symfony guess your field type, then the value of this option will be "
"guessed from your validation information."
msgstr ""

#: ../../../reference/forms/types/options/required.rst.inc:15
msgid ""
"The required option also affects how empty data for each field is "
"handled. For more details, see the `empty_data`_ option."
msgstr ""

#: ../../../reference/forms/types/options/row_attr.rst.inc:2
msgid "row_attr"
msgstr ""

#: ../../../reference/forms/types/options/row_attr.rst.inc:6
msgid ""
"An associative array of the HTML attributes added to the element which is"
" used to render the :ref:`form type row <form-rendering-basics>`::"
msgstr ""

#: ../../../reference/forms/types/options/row_attr.rst.inc:15
msgid ""
"Use the ``attr`` option if you want to add these attributes to the the "
":ref:`form type widget <form-rendering-basics>` element."
msgstr ""

#: ../../../reference/forms/types/collection.rst:447
msgid "Field Variables"
msgstr ""

#: ../../../reference/forms/types/collection.rst:450
msgid "Variable"
msgstr ""

#: ../../../reference/forms/types/collection.rst:450
msgid "Type"
msgstr ""

#: ../../../reference/forms/types/collection.rst:450
msgid "Usage"
msgstr ""

#: ../../../reference/forms/types/collection.rst:452
#: ../../../reference/forms/types/collection.rst:453
msgid "``boolean``"
msgstr ""

#: ../../../reference/forms/types/collection.rst:452
msgid "The value of the `allow_add`_ option."
msgstr ""

#: ../../../reference/forms/types/collection.rst:453
msgid "The value of the `allow_delete`_ option."
msgstr ""

