# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the Symfony Framework
# Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Symfony Framework Documentation \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-08 14:21+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../../reference/constraints/UniqueEntity.rst:2
msgid "UniqueEntity"
msgstr ""

#: ../../../reference/constraints/UniqueEntity.rst:4
msgid ""
"Validates that a particular field (or fields) in a Doctrine entity is "
"(are) unique. This is commonly used, for example, to prevent a new user "
"to register using an email address that already exists in the system."
msgstr ""

#: ../../../reference/constraints/UniqueEntity.rst:10
msgid ""
"If you want to validate that all the elements of the collection are "
"unique use the :doc:`Unique constraint </reference/constraints/Unique>`."
msgstr ""

#: ../../../reference/constraints/UniqueEntity.rst:14
msgid "Applies to"
msgstr ""

#: ../../../reference/constraints/UniqueEntity.rst:14
msgid ":ref:`class <validation-class-target>`"
msgstr ""

#: ../../../reference/constraints/UniqueEntity.rst:15
#: ../../../reference/constraints/UniqueEntity.rst:126
msgid "Options"
msgstr ""

#: ../../../reference/constraints/UniqueEntity.rst:15
msgid "`em`_"
msgstr ""

#: ../../../reference/constraints/UniqueEntity.rst:16
msgid "`entityClass`_"
msgstr ""

#: ../../../reference/constraints/UniqueEntity.rst:17
msgid "`errorPath`_"
msgstr ""

#: ../../../reference/constraints/UniqueEntity.rst:18
msgid "`fields`_"
msgstr ""

#: ../../../reference/constraints/UniqueEntity.rst:19
msgid "`groups`_"
msgstr ""

#: ../../../reference/constraints/UniqueEntity.rst:20
msgid "`ignoreNull`_"
msgstr ""

#: ../../../reference/constraints/UniqueEntity.rst:21
msgid "`message`_"
msgstr ""

#: ../../../reference/constraints/UniqueEntity.rst:22
msgid "`payload`_"
msgstr ""

#: ../../../reference/constraints/UniqueEntity.rst:23
msgid "`repositoryMethod`_"
msgstr ""

#: ../../../reference/constraints/UniqueEntity.rst:24
msgid "Class"
msgstr ""

#: ../../../reference/constraints/UniqueEntity.rst:24
msgid ":class:`Symfony\\\\Bridge\\\\Doctrine\\\\Validator\\\\Constraints\\\\UniqueEntity`"
msgstr ""

#: ../../../reference/constraints/UniqueEntity.rst:25
msgid "Validator"
msgstr ""

#: ../../../reference/constraints/UniqueEntity.rst:25
msgid ":class:`Symfony\\\\Bridge\\\\Doctrine\\\\Validator\\\\Constraints\\\\UniqueEntityValidator`"
msgstr ""

#: ../../../reference/constraints/UniqueEntity.rst:29
msgid "Basic Usage"
msgstr ""

#: ../../../reference/constraints/UniqueEntity.rst:31
msgid ""
"Suppose you have a ``User`` entity that has an ``email`` field. You can "
"use the ``UniqueEntity`` constraint to guarantee that the ``email`` field"
" remains unique between all of the rows in your user table:"
msgstr ""

#: ../../../reference/constraints/UniqueEntity.rst:114
msgid ""
"This constraint doesn't provide any protection against `race "
"conditions`_. They may occur when another entity is persisted by an "
"external process after this validation has passed and before this entity "
"is actually persisted in the database."
msgstr ""

#: ../../../reference/constraints/UniqueEntity.rst:121
msgid ""
"This constraint cannot deal with duplicates found in a collection of "
"items that haven't been persisted as entities yet. You'll need to create "
"your own validator to handle that case."
msgstr ""

#: ../../../reference/constraints/UniqueEntity.rst:129
msgid "em"
msgstr ""

#: ../../../reference/constraints/UniqueEntity.rst:131
#: ../../../reference/constraints/UniqueEntity.rst:141
msgid "**type**: ``string``"
msgstr ""

#: ../../../reference/constraints/UniqueEntity.rst:133
msgid ""
"The name of the entity manager to use for making the query to determine "
"the uniqueness. If it's left blank, the correct entity manager will be "
"determined for this class. For that reason, this option should probably "
"not need to be used."
msgstr ""

#: ../../../reference/constraints/UniqueEntity.rst:139
msgid "entityClass"
msgstr ""

#: ../../../reference/constraints/UniqueEntity.rst:143
msgid ""
"By default, the query performed to ensure the uniqueness uses the "
"repository of the current class instance. However, in some cases, such as"
" when using Doctrine inheritance mapping, you need to execute the query "
"in a different repository. Use this option to define the fully-qualified "
"class name (FQCN) of the Doctrine entity associated with the repository "
"you want to use."
msgstr ""

#: ../../../reference/constraints/UniqueEntity.rst:150
msgid "errorPath"
msgstr ""

#: ../../../reference/constraints/UniqueEntity.rst:152
msgid "**type**: ``string`` **default**: The name of the first field in `fields`_"
msgstr ""

#: ../../../reference/constraints/UniqueEntity.rst:154
msgid ""
"If the entity violates the constraint the error message is bound to the "
"first field in `fields`_. If there is more than one field, you may want "
"to map the error message to another field."
msgstr ""

#: ../../../reference/constraints/UniqueEntity.rst:158
msgid "Consider this example:"
msgstr ""

#: ../../../reference/constraints/UniqueEntity.rst:245
msgid ""
"Now, the message would be bound to the ``port`` field with this "
"configuration."
msgstr ""

#: ../../../reference/constraints/UniqueEntity.rst:248
msgid "fields"
msgstr ""

#: ../../../reference/constraints/UniqueEntity.rst:250
msgid ""
"**type**: ``array`` | ``string`` [:ref:`default option <validation-"
"default-option>`]"
msgstr ""

#: ../../../reference/constraints/UniqueEntity.rst:252
msgid ""
"This required option is the field (or list of fields) on which this "
"entity should be unique. For example, if you specified both the ``email``"
" and ``name`` field in a single ``UniqueEntity`` constraint, then it "
"would enforce that the combination value is unique (e.g. two users could "
"have the same email, as long as they don't have the same name also)."
msgstr ""

#: ../../../reference/constraints/UniqueEntity.rst:258
msgid ""
"If you need to require two fields to be individually unique (e.g. a "
"unique ``email`` *and* a unique ``username``), you use two "
"``UniqueEntity`` entries, each with a single field."
msgstr ""

#: ../../../reference/constraints/_groups-option.rst.inc:2
msgid "``groups``"
msgstr ""

#: ../../../reference/constraints/_groups-option.rst.inc:4
msgid "**type**: ``array`` | ``string``"
msgstr ""

#: ../../../reference/constraints/_groups-option.rst.inc:6
msgid ""
"It defines the validation group or groups this constraint belongs to. "
"Read more about :doc:`validation groups </validation/groups>`."
msgstr ""

#: ../../../reference/constraints/UniqueEntity.rst:265
msgid "ignoreNull"
msgstr ""

#: ../../../reference/constraints/UniqueEntity.rst:267
msgid "**type**: ``boolean`` **default**: ``true``"
msgstr ""

#: ../../../reference/constraints/UniqueEntity.rst:269
msgid ""
"If this option is set to ``true``, then the constraint will allow "
"multiple entities to have a ``null`` value for a field without failing "
"validation. If set to ``false``, only one ``null`` value is allowed - if "
"a second entity also has a ``null`` value, validation would fail."
msgstr ""

#: ../../../reference/constraints/UniqueEntity.rst:275
msgid "message"
msgstr ""

#: ../../../reference/constraints/UniqueEntity.rst:277
msgid "**type**: ``string`` **default**: ``This value is already used.``"
msgstr ""

#: ../../../reference/constraints/UniqueEntity.rst:279
msgid ""
"The message that's displayed when this constraint fails. This message is "
"by default mapped to the first field causing the violation. When using "
"multiple fields in the constraint, the mapping can be specified via the "
"`errorPath`_ property."
msgstr ""

#: ../../../reference/constraints/UniqueEntity.rst:283
msgid ""
"Messages can include the ``{{ value }}`` placeholder to display a string "
"representation of the invalid entity. If the entity doesn't define the "
"``__toString()`` method, the following generic value will be used: "
"*\"Object of class __CLASS__ identified by <comma separated IDs>\"*"
msgstr ""

#: ../../../reference/constraints/UniqueEntity.rst:288
msgid "You can use the following parameters in this message:"
msgstr ""

#: ../../../reference/constraints/UniqueEntity.rst:291
msgid "Parameter"
msgstr ""

#: ../../../reference/constraints/UniqueEntity.rst:291
msgid "Description"
msgstr ""

#: ../../../reference/constraints/UniqueEntity.rst:293
msgid "``{{ value }}``"
msgstr ""

#: ../../../reference/constraints/UniqueEntity.rst:293
msgid "The current (invalid) value"
msgstr ""

#: ../../../reference/constraints/_payload-option.rst.inc:2
msgid "``payload``"
msgstr ""

#: ../../../reference/constraints/_payload-option.rst.inc:4
msgid "**type**: ``mixed`` **default**: ``null``"
msgstr ""

#: ../../../reference/constraints/_payload-option.rst.inc:6
msgid ""
"This option can be used to attach arbitrary domain-specific data to a "
"constraint. The configured payload is not used by the Validator "
"component, but its processing is completely up to you."
msgstr ""

#: ../../../reference/constraints/_payload-option.rst.inc:10
msgid ""
"For example, you may want to use :doc:`several error levels "
"</validation/severity>` to present failed constraints differently in the "
"front-end depending on the severity of the error."
msgstr ""

#: ../../../reference/constraints/UniqueEntity.rst:299
msgid "repositoryMethod"
msgstr ""

#: ../../../reference/constraints/UniqueEntity.rst:301
msgid "**type**: ``string`` **default**: ``findBy``"
msgstr ""

#: ../../../reference/constraints/UniqueEntity.rst:303
msgid ""
"The name of the repository method used to determine the uniqueness. If "
"it's left blank, ``findBy()`` will be used. The method receives as its "
"argument a ``fieldName => value`` associative array (where ``fieldName`` "
"is each of the fields configured in the ``fields`` option). The method "
"should return a :phpfunction:`countable PHP variable <is_countable>`."
msgstr ""

