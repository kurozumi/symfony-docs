# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the Symfony Framework
# Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Symfony Framework Documentation \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-08 14:21+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../../console.rst:5
msgid "Console Commands"
msgstr ""

#: ../../../console.rst:7
msgid ""
"The Symfony framework provides lots of commands through the "
"``bin/console`` script (e.g. the well-known ``bin/console cache:clear`` "
"command). These commands are created with the :doc:`Console component "
"</components/console>`. You can also use it to create your own commands."
msgstr ""

#: ../../../console.rst:13
msgid "The Console: APP_ENV & APP_DEBUG"
msgstr ""

#: ../../../console.rst:15
msgid ""
"Console commands run in the :ref:`environment <config-dot-env>` defined "
"in the ``APP_ENV`` variable of the ``.env`` file, which is ``dev`` by "
"default. It also reads the ``APP_DEBUG`` value to turn \"debug\" mode on "
"or off (it defaults to ``1``, which is on)."
msgstr ""

#: ../../../console.rst:19
msgid ""
"To run the command in another environment or debug mode, edit the value "
"of ``APP_ENV`` and ``APP_DEBUG``."
msgstr ""

#: ../../../console.rst:23
msgid "Creating a Command"
msgstr ""

#: ../../../console.rst:25
msgid ""
"Commands are defined in classes extending "
":class:`Symfony\\\\Component\\\\Console\\\\Command\\\\Command`. For "
"example, you may want a command to create a user::"
msgstr ""

#: ../../../console.rst:65
msgid ""
"The ``Command::SUCCESS`` and ``Command::FAILURE`` constants were "
"introduced in Symfony 5.1."
msgstr ""

#: ../../../console.rst:69
msgid "Configuring the Command"
msgstr ""

#: ../../../console.rst:71
msgid ""
"You can optionally define a description, help message and the :doc:`input"
" options and arguments </console/input>`::"
msgstr ""

#: ../../../console.rst:87
msgid ""
"The ``configure()`` method is called automatically at the end of the "
"command constructor. If your command defines its own constructor, set the"
" properties first and then call to the parent constructor, to make those "
"properties available in the ``configure()`` method::"
msgstr ""

#: ../../../console.rst:120
msgid "Registering the Command"
msgstr ""

#: ../../../console.rst:122
msgid ""
"Symfony commands must be registered as services and :doc:`tagged "
"</service_container/tags>` with the ``console.command`` tag. If you're "
"using the :ref:`default services.yaml configuration <service-container-"
"services-load-example>`, this is already done for you, thanks to "
":ref:`autoconfiguration <services-autoconfigure>`."
msgstr ""

#: ../../../console.rst:128
msgid "Executing the Command"
msgstr ""

#: ../../../console.rst:130
msgid ""
"After configuring and registering the command, you can execute it in the "
"terminal:"
msgstr ""

#: ../../../console.rst:136
msgid ""
"As you might expect, this command will do nothing as you didn't write any"
" logic yet. Add your own logic inside the ``execute()`` method."
msgstr ""

#: ../../../console.rst:140
msgid "Console Output"
msgstr ""

#: ../../../console.rst:142
msgid ""
"The ``execute()`` method has access to the output stream to write "
"messages to the console::"
msgstr ""

#: ../../../console.rst:169
msgid "Now, try executing the command:"
msgstr ""

#: ../../../console.rst:183
msgid "Output Sections"
msgstr ""

#: ../../../console.rst:185
msgid ""
"The regular console output can be divided into multiple independent "
"regions called \"output sections\". Create one or more of these sections "
"when you need to clear and overwrite the output information."
msgstr ""

#: ../../../console.rst:189
msgid ""
"Sections are created with the "
":method:`Symfony\\\\Component\\\\Console\\\\Output\\\\ConsoleOutput::section`"
" method, which returns an instance of "
":class:`Symfony\\\\Component\\\\Console\\\\Output\\\\ConsoleSectionOutput`::"
msgstr ""

#: ../../../console.rst:223
msgid ""
"A new line is appended automatically when displaying information in a "
"section."
msgstr ""

#: ../../../console.rst:225
msgid ""
"Output sections let you manipulate the Console output in advanced ways, "
"such as :ref:`displaying multiple progress bars <console-multiple-"
"progress-bars>` which are updated independently and :ref:`appending rows "
"to tables <console-modify-rendered-tables>` that have already been "
"rendered."
msgstr ""

#: ../../../console.rst:231
msgid "Console Input"
msgstr ""

#: ../../../console.rst:233
msgid "Use input options or arguments to pass information to the command::"
msgstr ""

#: ../../../console.rst:262
msgid "Now, you can pass the username to the command:"
msgstr ""

#: ../../../console.rst:274
msgid ""
"Read :doc:`/console/input` for more information about console options and"
" arguments."
msgstr ""

#: ../../../console.rst:278
msgid "Getting Services from the Service Container"
msgstr ""

#: ../../../console.rst:280
msgid ""
"To actually create a new user, the command has to access some "
":doc:`services </service_container>`. Since your command is already "
"registered as a service, you can use normal dependency injection. Imagine"
" you have a ``App\\Service\\UserManager`` service that you want to "
"access::"
msgstr ""

#: ../../../console.rst:315
msgid "Command Lifecycle"
msgstr ""

#: ../../../console.rst:317
msgid ""
"Commands have three lifecycle methods that are invoked when running the "
"command:"
msgstr ""

#: ../../../console.rst:323
msgid ""
":method:`Symfony\\\\Component\\\\Console\\\\Command\\\\Command::initialize`"
" *(optional)*"
msgstr ""

#: ../../../console.rst:321
msgid ""
"This method is executed before the ``interact()`` and the ``execute()`` "
"methods. Its main purpose is to initialize variables used in the rest of "
"the command methods."
msgstr ""

#: ../../../console.rst:330
msgid ""
":method:`Symfony\\\\Component\\\\Console\\\\Command\\\\Command::interact`"
" *(optional)*"
msgstr ""

#: ../../../console.rst:326
msgid ""
"This method is executed after ``initialize()`` and before ``execute()``. "
"Its purpose is to check if some of the options/arguments are missing and "
"interactively ask the user for those values. This is the last place where"
" you can ask for missing options/arguments. After this command, missing "
"options/arguments will result in an error."
msgstr ""

#: ../../../console.rst:335
msgid ""
":method:`Symfony\\\\Component\\\\Console\\\\Command\\\\Command::execute` "
"*(required)*"
msgstr ""

#: ../../../console.rst:333
msgid ""
"This method is executed after ``interact()`` and ``initialize()``. It "
"contains the logic you want the command to execute and it must return an "
"integer which will be used as the command `exit status`_."
msgstr ""

#: ../../../console.rst:340
msgid "Testing Commands"
msgstr ""

#: ../../../console.rst:342
msgid ""
"Symfony provides several tools to help you test your commands. The most "
"useful one is the "
":class:`Symfony\\\\Component\\\\Console\\\\Tester\\\\CommandTester` "
"class. It uses special input and output classes to ease testing without a"
" real console::"
msgstr ""

#: ../../../console.rst:381
msgid ""
"You can also test a whole console application by using "
":class:`Symfony\\\\Component\\\\Console\\\\Tester\\\\ApplicationTester`."
msgstr ""

#: ../../../console.rst:386
msgid ""
"When testing commands using the ``CommandTester`` class, console events "
"are not dispatched. If you need to test those events, use the "
":class:`Symfony\\\\Component\\\\Console\\\\Tester\\\\ApplicationTester` "
"instead."
msgstr ""

#: ../../../console.rst:392
msgid ""
"When using the Console component in a standalone project, use "
":class:`Symfony\\\\Component\\\\Console\\\\Application "
"<Symfony\\\\Component\\\\Console\\\\Application>` and extend the normal "
"``\\PHPUnit\\Framework\\TestCase``."
msgstr ""

#: ../../../console.rst:397
msgid "Logging Command Errors"
msgstr ""

#: ../../../console.rst:399
msgid ""
"Whenever an exception is thrown while running commands, Symfony adds a "
"log message for it including the entire failing command. In addition, "
"Symfony registers an :doc:`event subscriber </event_dispatcher>` to "
"listen to the :ref:`ConsoleEvents::TERMINATE event <console-events-"
"terminate>` and adds a log message whenever a command doesn't finish with"
" the ``0`` exit status."
msgstr ""

#: ../../../console.rst:406
msgid "Learn More"
msgstr ""

#: ../../../console.rst:414
msgid ""
"The console component also contains a set of \"helpers\" - different "
"small tools capable of helping you with different tasks:"
msgstr ""

#: ../../../console.rst:417
msgid ""
":doc:`/components/console/helpers/questionhelper`: interactively ask the "
"user for information"
msgstr ""

#: ../../../console.rst:418
msgid ""
":doc:`/components/console/helpers/formatterhelper`: customize the output "
"colorization"
msgstr ""

#: ../../../console.rst:419
msgid ":doc:`/components/console/helpers/progressbar`: shows a progress bar"
msgstr ""

#: ../../../console.rst:420
msgid ":doc:`/components/console/helpers/table`: displays tabular data as a table"
msgstr ""

