# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the Symfony Framework
# Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Symfony Framework Documentation \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-08 14:21+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../../messenger.rst:5
msgid "Messenger: Sync & Queued Message Handling"
msgstr ""

#: ../../../messenger.rst:7
msgid ""
"Messenger provides a message bus with the ability to send messages and "
"then handle them immediately in your application or send them through "
"transports (e.g. queues) to be handled later. To learn more deeply about "
"it, read the :doc:`Messenger component docs </components/messenger>`."
msgstr ""

#: ../../../messenger.rst:13
msgid "Installation"
msgstr ""

#: ../../../messenger.rst:15
msgid ""
"In applications using :ref:`Symfony Flex <symfony-flex>`, run this "
"command to install messenger:"
msgstr ""

#: ../../../messenger.rst:23
msgid "Creating a Message & Handler"
msgstr ""

#: ../../../messenger.rst:25
msgid ""
"Messenger centers around two different classes that you'll create: (1) a "
"message class that holds data and (2) a handler(s) class that will be "
"called when that message is dispatched. The handler class will read the "
"message class and perform some task."
msgstr ""

#: ../../../messenger.rst:30
msgid ""
"There are no specific requirements for a message class, except that it "
"can be serialized::"
msgstr ""

#: ../../../messenger.rst:53
msgid ""
"A message handler is a PHP callable, the recommended way to create it is "
"to create a class that implements "
":class:`Symfony\\\\Component\\\\Messenger\\\\Handler\\\\MessageHandlerInterface`"
" and has an ``__invoke()`` method that's type-hinted with the message "
"class (or a message interface)::"
msgstr ""

#: ../../../messenger.rst:72
msgid ""
"Thanks to :ref:`autoconfiguration <services-autoconfigure>` and the "
"``SmsNotification`` type-hint, Symfony knows that this handler should be "
"called when an ``SmsNotification`` message is dispatched. Most of the "
"time, this is all you need to do. But you can also :ref:`manually "
"configure message handlers <messenger-handler-config>`. To see all the "
"configured handlers, run:"
msgstr ""

#: ../../../messenger.rst:83
msgid "Dispatching the Message"
msgstr ""

#: ../../../messenger.rst:85
msgid ""
"You're ready! To dispatch the message (and call the handler), inject the "
"``message_bus`` service (via the ``MessageBusInterface``), like in a "
"controller::"
msgstr ""

#: ../../../messenger.rst:110
msgid "Transports: Async/Queued Messages"
msgstr ""

#: ../../../messenger.rst:112
msgid ""
"By default, messages are handled as soon as they are dispatched. If you "
"want to handle a message asynchronously, you can configure a transport. A"
" transport is capable of sending messages (e.g. to a queueing system) and"
" then :ref:`receiving them via a worker <messenger-worker>`. Messenger "
"supports :ref:`multiple transports <messenger-transports-config>`."
msgstr ""

#: ../../../messenger.rst:120
msgid ""
"If you want to use a transport that's not supported, check out the "
"`Enqueue's transport`_, which supports things like Kafka, Amazon SQS and "
"Google Pub/Sub."
msgstr ""

#: ../../../messenger.rst:124
msgid ""
"A transport is registered using a \"DSN\". Thanks to Messenger's Flex "
"recipe, your ``.env`` file already has a few examples."
msgstr ""

#: ../../../messenger.rst:133
msgid ""
"Uncomment whichever transport you want (or set it in ``.env.local``). See"
" :ref:`messenger-transports-config` for more details."
msgstr ""

#: ../../../messenger.rst:136
msgid ""
"Next, in ``config/packages/messenger.yaml``, let's define a transport "
"called ``async`` that uses this configuration:"
msgstr ""

#: ../../../messenger.rst:200
msgid "Routing Messages to a Transport"
msgstr ""

#: ../../../messenger.rst:202
msgid ""
"Now that you have a transport configured, instead of handling a message "
"immediately, you can configure them to be sent to a transport:"
msgstr ""

#: ../../../messenger.rst:253
msgid ""
"Thanks to this, the ``App\\Message\\SmsNotification`` will be sent to the"
" ``async`` transport and its handler(s) will *not* be called immediately."
" Any messages not matched under ``routing`` will still be handled "
"immediately."
msgstr ""

#: ../../../messenger.rst:257
msgid ""
"You can also route classes by their parent class or interface. Or send "
"messages to multiple transport:"
msgstr ""

#: ../../../messenger.rst:318
msgid "Doctrine Entities in Messages"
msgstr ""

#: ../../../messenger.rst:320
msgid ""
"If you need to pass a Doctrine entity in a message, it's better to pass "
"the entity's primary key (or whatever relevant information the handler "
"actually needs, like ``email``, etc) instead of the object::"
msgstr ""

#: ../../../messenger.rst:342
msgid "Then, in your handler, you can query for a fresh object::"
msgstr ""

#: ../../../messenger.rst:368
msgid "This guarantees the entity contains fresh data."
msgstr ""

#: ../../../messenger.rst:371
msgid "Handling Messages Synchronously"
msgstr ""

#: ../../../messenger.rst:373
msgid ""
"If a message doesn't :ref:`match any routing rules <messenger-routing>`, "
"it won't be sent to any transport and will be handled immediately. In "
"some cases (like when `binding handlers to different transports`_), it's "
"easier or more flexible to handle this explicitly: by creating a ``sync``"
" transport and \"sending\" messages there to be handled immediately:"
msgstr ""

#: ../../../messenger.rst:436
msgid "Creating your Own Transport"
msgstr ""

#: ../../../messenger.rst:438
msgid ""
"You can also create your own transport if you need to send or receive "
"messages from something that is not supported. See :doc:`/messenger"
"/custom-transport`."
msgstr ""

#: ../../../messenger.rst:444
msgid "Consuming Messages (Running the Worker)"
msgstr ""

#: ../../../messenger.rst:446
msgid ""
"Once your messages have been routed, in most cases, you'll need to "
"\"consume\" them. You can do this with the ``messenger:consume`` command:"
msgstr ""

#: ../../../messenger.rst:456
msgid ""
"The first argument is the receiver's name (or service id if you routed to"
" a custom service). By default, the command will run forever: looking for"
" new messages on your transport and handling them. This command is called"
" your \"worker\"."
msgstr ""

#: ../../../messenger.rst:461
msgid "Deploying to Production"
msgstr ""

#: ../../../messenger.rst:463
msgid "On production, there are a few important things to think about:"
msgstr ""

#: ../../../messenger.rst:467
msgid "**Use Supervisor to keep your worker(s) running**"
msgstr ""

#: ../../../messenger.rst:466
msgid ""
"You'll want one or more \"workers\" running at all times. To do that, use"
" a process control system like :ref:`Supervisor <messenger-supervisor>`."
msgstr ""

#: ../../../messenger.rst:474
msgid "**Don't Let Workers Run Forever**"
msgstr ""

#: ../../../messenger.rst:470
msgid ""
"Some services (like Doctrine's EntityManager) will consume more memory "
"over time. So, instead of allowing your worker to run forever, use a flag"
" like ``messenger:consume --limit=10`` to tell your worker to only handle"
" 10 messages before exiting (then Supervisor will create a new process). "
"There are also other options like ``--memory-limit=128M`` and ``--time-"
"limit=3600``."
msgstr ""

#: ../../../messenger.rst:482
msgid "**Restart Workers on Deploy**"
msgstr ""

#: ../../../messenger.rst:477
msgid ""
"Each time you deploy, you'll need to restart all your worker processes so"
" that they see the newly deployed code. To do this, run ``messenger:stop-"
"workers`` on deploy. This will signal to each worker that it should "
"finish the message it's currently handling and shut down gracefully. "
"Then, Supervisor will create new worker processes. The command uses the "
":ref:`app <cache-configuration-with-frameworkbundle>` cache internally - "
"so make sure this is configured to use an adapter you like."
msgstr ""

#: ../../../messenger.rst:485
msgid "Prioritized Transports"
msgstr ""

#: ../../../messenger.rst:487
msgid ""
"Sometimes certain types of messages should have a higher priority and be "
"handled before others. To make this possible, you can create multiple "
"transports and route different messages to them. For example:"
msgstr ""

#: ../../../messenger.rst:581
msgid ""
"You can then run individual workers for each transport or instruct one "
"worker to handle messages in a priority order:"
msgstr ""

#: ../../../messenger.rst:588
msgid ""
"The worker will always first look for messages waiting on "
"``async_priority_high``. If there are none, *then* it will consume "
"messages from ``async_priority_low``."
msgstr ""

#: ../../../messenger.rst:594
msgid "Supervisor Configuration"
msgstr ""

#: ../../../messenger.rst:596
msgid ""
"Supervisor is a great tool to guarantee that your worker process(es) is "
"*always* running (even if it closes due to failure, hitting a message "
"limit or thanks to ``messenger:stop-workers``). You can install it on "
"Ubuntu, for example, via:"
msgstr ""

#: ../../../messenger.rst:605
msgid ""
"Supervisor configuration files typically live in a "
"``/etc/supervisor/conf.d`` directory. For example, you can create a new "
"``messenger-worker.conf`` file there to make sure that 2 instances of "
"``messenger:consume`` are running at all times:"
msgstr ""

#: ../../../messenger.rst:622
msgid ""
"Change the ``async`` argument to use the name of your transport (or "
"transports) and ``user`` to the Unix user on your server. Next, tell "
"Supervisor to read your config and start your workers:"
msgstr ""

#: ../../../messenger.rst:634
msgid "See the `Supervisor docs`_ for more details."
msgstr ""

#: ../../../messenger.rst:639
msgid "Retries & Failures"
msgstr ""

#: ../../../messenger.rst:641
msgid ""
"If an exception is thrown while consuming a message from a transport it "
"will automatically be re-sent to the transport to be tried again. By "
"default, a message will be retried 3 times before being discarded or "
":ref:`sent to the failure transport <messenger-failure-transport>`. Each "
"retry will also be delayed, in case the failure was due to a temporary "
"issue. All of this is configurable for each transport:"
msgstr ""

#: ../../../messenger.rst:721
msgid "Avoiding Retrying"
msgstr ""

#: ../../../messenger.rst:723
msgid ""
"Sometimes handling a message might fail in a way that you *know* is "
"permanent and should not be retried. If you throw "
":class:`Symfony\\\\Component\\\\Messenger\\\\Exception\\\\UnrecoverableMessageHandlingException`,"
" the message will not be retried."
msgstr ""

#: ../../../messenger.rst:731
msgid "Saving & Retrying Failed Messages"
msgstr ""

#: ../../../messenger.rst:733
msgid ""
"If a message fails it is retried multiple times (``max_retries``) and "
"then will be discarded. To avoid this happening, you can instead "
"configure a ``failure_transport``:"
msgstr ""

#: ../../../messenger.rst:791
msgid ""
"In this example, if handling a message fails 3 times (default "
"``max_retries``), it will then be sent to the ``failed`` transport. While"
" you *can* use ``messenger:consume failed`` to consume this like a normal"
" transport, you'll usually want to manually view the messages in the "
"failure transport and choose to retry them:"
msgstr ""

#: ../../../messenger.rst:819
msgid "The ``--show-messages`` option was introduced in Symfony 5.1."
msgstr ""

#: ../../../messenger.rst:821
msgid ""
"If the message fails again, it will be re-sent back to the failure "
"transport due to the normal :ref:`retry rules <messenger-retries-"
"failures>`. Once the max retry has been hit, the message will be "
"discarded permanently."
msgstr ""

#: ../../../messenger.rst:828
msgid "Transport Configuration"
msgstr ""

#: ../../../messenger.rst:830
msgid ""
"Messenger supports a number of different transport types, each with their"
" own options."
msgstr ""

#: ../../../messenger.rst:834
msgid "AMQP Transport"
msgstr ""

#: ../../../messenger.rst:838
msgid ""
"Starting from Symfony 5.1, the AMQP transport has moved to a separate "
"package. Install it by running:"
msgstr ""

#: ../../../messenger.rst:845
msgid "The ``amqp`` transport configuration looks like this:"
msgstr ""

#: ../../../messenger.rst:852
msgid "To use Symfony's built-in AMQP transport, you need the AMQP PHP extension."
msgstr ""

#: ../../../messenger.rst:856
msgid ""
"By default, the transport will automatically create any exchanges, queues"
" and binding keys that are needed. That can be disabled, but some "
"functionality may not work correctly (like delayed queues)."
msgstr ""

#: ../../../messenger.rst:860
msgid ""
"The transport has a number of other options, including ways to configure "
"the exchange, queues binding keys and more. See the documentation on "
":class:`Symfony\\\\Component\\\\Messenger\\\\Bridge\\\\Amqp\\\\Transport\\\\Connection`."
msgstr ""

#: ../../../messenger.rst:864
msgid ""
"You can also configure AMQP-specific settings on your message by adding "
":class:`Symfony\\\\Component\\\\Messenger\\\\Bridge\\\\Amqp\\\\Transport\\\\AmqpStamp`"
" to your Envelope::"
msgstr ""

#: ../../../messenger.rst:878
msgid ""
"The consumers do not show up in an admin panel as this transport does not"
" rely on ``\\AmqpQueue::consume()`` which is blocking. Having a blocking "
"receiver makes the ``--time-limit/--memory-limit`` options of the "
"``messenger:consume`` command as well as the ``messenger:stop-workers`` "
"command inefficient, as they all rely on the fact that the receiver "
"returns immediately no matter if it finds a message or not. The consume "
"worker is responsible for iterating until it receives a message to handle"
" and/or until one of the stop conditions is reached. Thus, the worker's "
"stop logic cannot be reached if it is stuck in a blocking call."
msgstr ""

#: ../../../messenger.rst:888
msgid "Doctrine Transport"
msgstr ""

#: ../../../messenger.rst:892
msgid ""
"Starting from Symfony 5.1, the Doctrine transport has moved to a separate"
" package. Install it by running:"
msgstr ""

#: ../../../messenger.rst:899
msgid "The Doctrine transport can be used to store messages in a database table."
msgstr ""

#: ../../../messenger.rst:906
msgid ""
"The format is ``doctrine://<connection_name>``, in case you have multiple"
" connections and want to use one other than the \"default\". The "
"transport will automatically create a table named ``messenger_messages`` "
"(this is configurable) when the transport is first used. You can disable "
"that with the ``auto_setup`` option and set the table up manually by "
"calling the ``messenger:setup-transports`` command."
msgstr ""

#: ../../../messenger.rst:914
msgid ""
"To avoid tools like Doctrine Migrations from trying to remove this table "
"because it's not part of your normal schema, you can set the "
"``schema_filter`` option:"
msgstr ""

#: ../../../messenger.rst:924
msgid "The transport has a number of options:"
msgstr ""

#: ../../../messenger.rst:983
msgid ""
"Options defined under ``options`` take precedence over ones defined in "
"the DSN."
msgstr ""

#: ../../../messenger.rst:986 ../../../messenger.rst:1036
msgid "Option"
msgstr ""

#: ../../../messenger.rst:986 ../../../messenger.rst:1036
msgid "Description"
msgstr ""

#: ../../../messenger.rst:986 ../../../messenger.rst:1036
msgid "Default"
msgstr ""

#: ../../../messenger.rst:988
msgid "table_name"
msgstr ""

#: ../../../messenger.rst:988
msgid "Name of the table"
msgstr ""

#: ../../../messenger.rst:988
msgid "messenger_messages"
msgstr ""

#: ../../../messenger.rst:989
msgid "queue_name"
msgstr ""

#: ../../../messenger.rst:989
msgid ""
"Name of the queue (a column in the table, to use one table for multiple "
"transports)"
msgstr ""

#: ../../../messenger.rst:989
msgid "default"
msgstr ""

#: ../../../messenger.rst:992
msgid "redeliver_timeout"
msgstr ""

#: ../../../messenger.rst:992
msgid ""
"Timeout before retrying a message that's in the queue but in the "
"\"handling\" state (if a worker died for some reason, this will occur, "
"eventually you should retry the message) - in seconds."
msgstr ""

#: ../../../messenger.rst:992
msgid "3600"
msgstr ""

#: ../../../messenger.rst:998 ../../../messenger.rst:1041
msgid "auto_setup"
msgstr ""

#: ../../../messenger.rst:998
msgid "Whether the table should be created automatically during send / get."
msgstr ""

#: ../../../messenger.rst:999 ../../../messenger.rst:1041
msgid "true"
msgstr ""

#: ../../../messenger.rst:1003
msgid "Redis Transport"
msgstr ""

#: ../../../messenger.rst:1007
msgid ""
"Starting from Symfony 5.1, the Redis transport has moved to a separate "
"package. Install it by running:"
msgstr ""

#: ../../../messenger.rst:1014
msgid "The Redis transport uses `streams`_ to queue messages."
msgstr ""

#: ../../../messenger.rst:1027
msgid "The Unix socket DSN was introduced in Symfony 5.1."
msgstr ""

#: ../../../messenger.rst:1029
msgid ""
"To use the Redis transport, you will need the Redis PHP extension (>=4.3)"
" and a running Redis server (^5.0)."
msgstr ""

#: ../../../messenger.rst:1032
msgid ""
"A number of options can be configured via the DSN or via the ``options`` "
"key under the transport in ``messenger.yaml``:"
msgstr ""

#: ../../../messenger.rst:1038
msgid "stream"
msgstr ""

#: ../../../messenger.rst:1038
msgid "The Redis stream name"
msgstr ""

#: ../../../messenger.rst:1038
msgid "messages"
msgstr ""

#: ../../../messenger.rst:1039
msgid "group"
msgstr ""

#: ../../../messenger.rst:1039
msgid "The Redis consumer group name"
msgstr ""

#: ../../../messenger.rst:1039
msgid "symfony"
msgstr ""

#: ../../../messenger.rst:1040
msgid "consumer"
msgstr ""

#: ../../../messenger.rst:1040
msgid "Consumer name used in Redis"
msgstr ""

#: ../../../messenger.rst:1041
msgid "Create the Redis group automatically?"
msgstr ""

#: ../../../messenger.rst:1042
msgid "auth"
msgstr ""

#: ../../../messenger.rst:1042
msgid "The Redis password"
msgstr ""

#: ../../../messenger.rst:1043
msgid "serializer"
msgstr ""

#: ../../../messenger.rst:1043
msgid ""
"How to serialize the final payload in Redis (the "
"``Redis::OPT_SERIALIZER`` option)"
msgstr ""

#: ../../../messenger.rst:1043
msgid "``Redis::SERIALIZER_PHP``"
msgstr ""

#: ../../../messenger.rst:1046
msgid "stream_max_entries"
msgstr ""

#: ../../../messenger.rst:1046
msgid ""
"The maximum number of entries which the stream will be trimmed to. Set it"
" to a large enough number to avoid losing pending messages"
msgstr ""

#: ../../../messenger.rst:1046
msgid "``0`` (which means \"no trimming\")"
msgstr ""

#: ../../../messenger.rst:1050
msgid "tls"
msgstr ""

#: ../../../messenger.rst:1050
msgid "Enable TLS support for the connection"
msgstr ""

#: ../../../messenger.rst:1050
msgid "false"
msgstr ""

#: ../../../messenger.rst:1054
msgid "In Memory Transport"
msgstr ""

#: ../../../messenger.rst:1056
msgid ""
"The ``in-memory`` transport does not actually delivery messages. Instead,"
" it holds them in memory during the request, which can be useful for "
"testing. For example, if you have an ``async_priority_normal`` transport,"
" you could override it in the ``test`` environment to use this transport:"
msgstr ""

#: ../../../messenger.rst:1103
msgid ""
"Then, while testing, messages will *not* be delivered to the real "
"transport. Even better, in a test, you can check that exactly one message"
" was sent during a request::"
msgstr ""

#: ../../../messenger.rst:1130
msgid ""
"All ``in-memory`` transports will be reset automatically after each test "
"**in** test classes extending "
":class:`Symfony\\\\Bundle\\\\FrameworkBundle\\\\Test\\\\KernelTestCase` "
"or :class:`Symfony\\\\Bundle\\\\FrameworkBundle\\\\Test\\\\WebTestCase`."
msgstr ""

#: ../../../messenger.rst:1136
msgid "Serializing Messages"
msgstr ""

#: ../../../messenger.rst:1138
msgid ""
"When messages are sent to (and received from) a transport, they're "
"serialized using PHP's native ``serialize()`` & ``unserialize()`` "
"functions. You can change this globally (or for each transport) to a "
"service that implements "
":class:`Symfony\\\\Component\\\\Messenger\\\\Transport\\\\Serialization\\\\SerializerInterface`:"
msgstr ""

#: ../../../messenger.rst:1207
msgid ""
"The ``messenger.transport.symfony_serializer`` is a built-in service that"
" uses the :doc:`Serializer component </serializer>` and can be configured"
" in a few ways. If you *do* choose to use the Symfony serializer, you can"
" control the context on a case-by-case basis via the "
":class:`Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\SerializerStamp` "
"(see `Envelopes & Stamps`_)."
msgstr ""

#: ../../../messenger.rst:1215
msgid ""
"When sending/receiving messages to/from another application, you may need"
" more control over the serialization process. Using a custom serializer "
"provides that control. See `SymfonyCasts' message serializer tutorial`_ "
"for details."
msgstr ""

#: ../../../messenger.rst:1221
msgid "Customizing Handlers"
msgstr ""

#: ../../../messenger.rst:1226
msgid "Manually Configuring Handlers"
msgstr ""

#: ../../../messenger.rst:1228
msgid ""
"Symfony will normally :ref:`find and register your handler automatically "
"<messenger-handler>`. But, you can also configure a handler manually - "
"and pass it some extra config - by tagging the handler service with "
"``messenger.message_handler``"
msgstr ""

#: ../../../messenger.rst:1279
msgid "Possible options to configure with tags are:"
msgstr ""

#: ../../../messenger.rst:1281
msgid "``bus``"
msgstr ""

#: ../../../messenger.rst:1282
msgid "``from_transport``"
msgstr ""

#: ../../../messenger.rst:1283
msgid "``handles``"
msgstr ""

#: ../../../messenger.rst:1284
msgid "``method``"
msgstr ""

#: ../../../messenger.rst:1285
msgid "``priority``"
msgstr ""

#: ../../../messenger.rst:1288
msgid "Handler Subscriber & Options"
msgstr ""

#: ../../../messenger.rst:1290
msgid ""
"A handler class can handle multiple messages or configure itself by "
"implementing "
":class:`Symfony\\\\Component\\\\Messenger\\\\Handler\\\\MessageSubscriberInterface`::"
msgstr ""

#: ../../../messenger.rst:1327
msgid "Binding Handlers to Different Transports"
msgstr ""

#: ../../../messenger.rst:1329
msgid ""
"Each message can have multiple handlers, and when a message is consumed "
"*all* of its handlers are called. But you can also configure a handler to"
" only be called when it's received from a *specific* transport. This "
"allows you to have a single message where each handler is called by a "
"different \"worker\" that's consuming a different transport."
msgstr ""

#: ../../../messenger.rst:1335
msgid "Suppose you have an ``UploadedImage`` message with two handlers:"
msgstr ""

#: ../../../messenger.rst:1337
msgid ""
"``ThumbnailUploadedImageHandler``: you want this to be handled by a "
"transport called ``image_transport``"
msgstr ""

#: ../../../messenger.rst:1340
msgid ""
"``NotifyAboutNewUploadedImageHandler``: you want this to be handled by a "
"transport called ``async_priority_normal``"
msgstr ""

#: ../../../messenger.rst:1343
msgid ""
"To do this, add the ``from_transport`` option to each handler. For "
"example::"
msgstr ""

#: ../../../messenger.rst:1366
msgid "And similarly::"
msgstr ""

#: ../../../messenger.rst:1383
msgid "Then, make sure to \"route\" your message to *both* transports:"
msgstr ""

#: ../../../messenger.rst:1440
msgid "That's it! You can now consume each transport:"
msgstr ""

#: ../../../messenger.rst:1451
msgid ""
"If a handler does *not* have ``from_transport`` config, it will be "
"executed on *every* transport that the message is received from."
msgstr ""

#: ../../../messenger.rst:1455
msgid "Extending Messenger"
msgstr ""

#: ../../../messenger.rst:1458
msgid "Envelopes & Stamps"
msgstr ""

#: ../../../messenger.rst:1460
msgid ""
"A message can be any PHP object. Sometimes, you may need to configure "
"something extra about the message - like the way it should be handled "
"inside AMQP or adding a delay before the message should be handled. You "
"can do that by adding a \"stamp\" to your message::"
msgstr ""

#: ../../../messenger.rst:1484
msgid ""
"Internally, each message is wrapped in an ``Envelope``, which holds the "
"message and stamps. You can create this manually or allow the message bus"
" to do it. There are a variety of different stamps for different purposes"
" and they're used internally to track information about a message - like "
"the message bus that's handling it or if it's being retried after "
"failure."
msgstr ""

#: ../../../messenger.rst:1491
msgid "Middleware"
msgstr ""

#: ../../../messenger.rst:1493
msgid ""
"What happens when you dispatch a message to a message bus depends on its "
"collection of middleware and their order. By default, the middleware "
"configured for each bus looks like this:"
msgstr ""

#: ../../../messenger.rst:1497
msgid ""
"``add_bus_name_stamp_middleware`` - adds a stamp to record which bus this"
" message was dispatched into;"
msgstr ""

#: ../../../messenger.rst:1500
msgid "``dispatch_after_current_bus``- see :doc:`/messenger/message-recorder`;"
msgstr ""

#: ../../../messenger.rst:1502
msgid ""
"``failed_message_processing_middleware`` - processes messages that are "
"being retried via the :ref:`failure transport <messenger-failure-"
"transport>` to make them properly function as if they were being received"
" from their original transport;"
msgstr ""

#: ../../../messenger.rst:1506
msgid "Your own collection of middleware_;"
msgstr ""

#: ../../../messenger.rst:1508
msgid ""
"``send_message`` - if routing is configured for the transport, this sends"
" messages to that transport and stops the middleware chain;"
msgstr ""

#: ../../../messenger.rst:1511
msgid "``handle_message`` - calls the message handler(s) for the given message."
msgstr ""

#: ../../../messenger.rst:1515
msgid ""
"These middleware names are actually shortcut names. The real service ids "
"are prefixed with ``messenger.middleware.`` (e.g. "
"``messenger.middleware.handle_message``)."
msgstr ""

#: ../../../messenger.rst:1518
msgid ""
"The middleware are executed when the message is dispatched but *also* "
"again when a message is received via the worker (for messages that were "
"sent to a transport to be handled asynchronously). Keep this in mind if "
"you create your own middleware."
msgstr ""

#: ../../../messenger.rst:1522
msgid ""
"You can add your own middleware to this list, or completely disable the "
"default middleware and *only* include your own:"
msgstr ""

#: ../../../messenger.rst:1582
msgid ""
"If a middleware service is abstract, a different instance of the service "
"will be created per bus."
msgstr ""

#: ../../../messenger.rst:1586
msgid "Middleware for Doctrine"
msgstr ""

#: ../../../messenger.rst:1590
msgid "The following Doctrine middleware were introduced in DoctrineBundle 1.11."
msgstr ""

#: ../../../messenger.rst:1592
msgid ""
"If you use Doctrine in your app, a number of optional middleware exist "
"that you may want to use:"
msgstr ""

#: ../../../messenger.rst:1674
msgid "Messenger Events"
msgstr ""

#: ../../../messenger.rst:1676
msgid ""
"In addition to middleware, Messenger also dispatches several events. You "
"can :doc:`create an event listener </event_dispatcher>` to hook into "
"various parts of the process. For each, the event class is the event "
"name:"
msgstr ""

#: ../../../messenger.rst:1680
msgid ":class:`Symfony\\\\Component\\\\Messenger\\\\Event\\\\WorkerStartedEvent`"
msgstr ""

#: ../../../messenger.rst:1681
msgid ":class:`Symfony\\\\Component\\\\Messenger\\\\Event\\\\WorkerMessageReceivedEvent`"
msgstr ""

#: ../../../messenger.rst:1682
msgid ":class:`Symfony\\\\Component\\\\Messenger\\\\Event\\\\SendMessageToTransportsEvent`"
msgstr ""

#: ../../../messenger.rst:1683
msgid ":class:`Symfony\\\\Component\\\\Messenger\\\\Event\\\\WorkerMessageFailedEvent`"
msgstr ""

#: ../../../messenger.rst:1684
msgid ":class:`Symfony\\\\Component\\\\Messenger\\\\Event\\\\WorkerMessageHandledEvent`"
msgstr ""

#: ../../../messenger.rst:1685
msgid ":class:`Symfony\\\\Component\\\\Messenger\\\\Event\\\\WorkerRunningEvent`"
msgstr ""

#: ../../../messenger.rst:1686
msgid ":class:`Symfony\\\\Component\\\\Messenger\\\\Event\\\\WorkerStoppedEvent`"
msgstr ""

#: ../../../messenger.rst:1689
msgid "Multiple Buses, Command & Event Buses"
msgstr ""

#: ../../../messenger.rst:1691
msgid ""
"Messenger gives you a single message bus service by default. But, you can"
" configure as many as you want, creating \"command\", \"query\" or "
"\"event\" buses and controlling their middleware. See "
":doc:`/messenger/multiple_buses`."
msgstr ""

#: ../../../messenger.rst:1696
msgid "Learn more"
msgstr ""

