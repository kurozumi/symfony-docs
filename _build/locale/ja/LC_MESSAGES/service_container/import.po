# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the Symfony Framework
# Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Symfony Framework Documentation \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-08 14:21+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../../service_container/import.rst:6
msgid "How to Import Configuration Files/Resources"
msgstr ""

#: ../../../service_container/import.rst:10
msgid ""
"In this section, service configuration files are referred to as "
"*resources*. While most configuration resources are files (e.g. YAML, "
"XML, PHP), Symfony is able to load configuration from anywhere (e.g. a "
"database or even via an external web service)."
msgstr ""

#: ../../../service_container/import.rst:15
msgid ""
"The service container is built using a single configuration resource "
"(``config/services.yaml`` by default). This gives you absolute "
"flexibility over the services in your application."
msgstr ""

#: ../../../service_container/import.rst:19
msgid ""
"External service configuration can be imported in two different ways. The"
" first method, commonly used to import other resources, is via the "
"``imports`` directive. The second method, using dependency injection "
"extensions, is used by third-party bundles to load the configuration. "
"Read on to learn more about both methods."
msgstr ""

#: ../../../service_container/import.rst:31
msgid "Importing Configuration with ``imports``"
msgstr ""

#: ../../../service_container/import.rst:33
msgid ""
"By default, service configuration lives in ``config/services.yaml``. But "
"if that file becomes large, you're free to organize into multiple files. "
"Suppose you decided to move some configuration to a new file:"
msgstr ""

#: ../../../service_container/import.rst:73
msgid ""
"To import this file, use the ``imports`` key from any other file and pass"
" either a relative or absolute path to the imported file:"
msgstr ""

#: ../../../service_container/import.rst:136
msgid ""
"When loading a configuration file, Symfony loads first the imported files"
" and then it processes the parameters and services defined in the file. "
"If you use the :ref:`default services.yaml configuration <service-"
"container-services-load-example>` as in the above example, the ``App\\`` "
"definition creates services for classes found in ``../src/*``. If your "
"imported file defines services for those classes too, they will be "
"overridden."
msgstr ""

#: ../../../service_container/import.rst:143
msgid ""
"A possible solution for this is to add the classes and/or directories of "
"the imported files in the ``exclude`` option of the ``App\\`` definition."
" Another solution is to not use imports and add the service definitions "
"in the same file, but after the ``App\\`` definition to override it."
msgstr ""

#: ../../../components/dependency_injection/_imports-parameters-note.rst.inc:3
msgid ""
"Due to the way in which parameters are resolved, you cannot use them to "
"build paths in imports dynamically. This means that something like the "
"following doesn't work:"
msgstr ""

#: ../../../service_container/import.rst:156
msgid "Importing Configuration via Container Extensions"
msgstr ""

#: ../../../service_container/import.rst:158
msgid ""
"Third-party bundle container configuration, including Symfony core "
"services, are usually loaded using another method: a :doc:`container "
"extension </bundles/extension>`."
msgstr ""

#: ../../../service_container/import.rst:161
msgid ""
"Internally, each bundle defines its services in files like you've seen so"
" far. However, these files aren't imported using the ``import`` "
"directive. Instead, bundles use a *dependency injection extension* to "
"load the files automatically. As soon as you enable a bundle, its "
"extension is called, which is able to load service configuration files."
msgstr ""

#: ../../../service_container/import.rst:167
msgid ""
"In fact, each configuration file in ``config/packages/`` is passed to the"
" extension of its related  bundle - e.g. ``FrameworkBundle`` or "
"``TwigBundle`` - and used to configure those services further."
msgstr ""

