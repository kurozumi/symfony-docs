# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the Symfony Framework
# Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Symfony Framework Documentation \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-08 14:21+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../../service_container/3.3-di-changes.rst:2
msgid ""
"The Symfony 3.3 DI Container Changes Explained (autowiring, _defaults, "
"etc)"
msgstr ""

#: ../../../service_container/3.3-di-changes.rst:4
msgid ""
"If you look at the ``services.yaml`` file in a new Symfony 3.3 or newer "
"project, you'll notice some big changes: ``_defaults``, ``autowiring``, "
"``autoconfigure`` and more. These features are designed to *automate* "
"configuration and make development faster, without sacrificing "
"predictability, which is very important! Another goal is to make "
"controllers and services behave more consistently. In Symfony 3.3, "
"controllers *are* services by default."
msgstr ""

#: ../../../service_container/3.3-di-changes.rst:11
msgid ""
"The documentation has already been updated to assume you have these new "
"features enabled. If you're an existing Symfony user and want to "
"understand the \"what\" and \"why\" behind these changes, this article is"
" for you!"
msgstr ""

#: ../../../service_container/3.3-di-changes.rst:16
msgid "All Changes are Optional"
msgstr ""

#: ../../../service_container/3.3-di-changes.rst:18
msgid ""
"Most importantly, **you can upgrade to Symfony 3.3 today without making "
"any changes to your app**. Symfony has a strict :doc:`backwards "
"compatibility promise </contributing/code/bc>`, which means it's always "
"safe to upgrade across minor versions."
msgstr ""

#: ../../../service_container/3.3-di-changes.rst:22
msgid ""
"All of the new features are **optional**: they are not enabled by "
"default, so you need to actually change your configuration files to use "
"them."
msgstr ""

#: ../../../service_container/3.3-di-changes.rst:28
msgid "The new Default services.yaml File"
msgstr ""

#: ../../../service_container/3.3-di-changes.rst:30
msgid ""
"To understand the changes, look at the new default ``services.yaml`` file"
" (this is what the file looks like in Symfony 4):"
msgstr ""

#: ../../../service_container/3.3-di-changes.rst:111
msgid ""
"This small bit of configuration contains a paradigm shift of how services"
" are configured in Symfony."
msgstr ""

#: ../../../service_container/3.3-di-changes.rst:117
msgid "1) Services are Loaded Automatically"
msgstr ""

#: ../../../service_container/3.3-di-changes.rst:121
msgid ""
"Read the documentation for :ref:`automatic service loading <service-"
"psr4-loader>`."
msgstr ""

#: ../../../service_container/3.3-di-changes.rst:123
msgid ""
"The first big change is that services do *not* need to be defined one-by-"
"one anymore, thanks to the following config:"
msgstr ""

#: ../../../service_container/3.3-di-changes.rst:170
msgid ""
"This means that every class in ``src/`` is *available* to be used as a "
"service. And thanks to the ``_defaults`` section at the top of the file, "
"all of these services are **autowired** and **private** (i.e. ``public: "
"false``)."
msgstr ""

#: ../../../service_container/3.3-di-changes.rst:174
msgid ""
"The service ids are equal to the class name (e.g. "
"``App\\Service\\InvoiceGenerator``). And that's another change you'll "
"notice in Symfony 3.3: we recommend that you use the class name as your "
"service id, unless you have :ref:`multiple services for the same class "
"<services-explicitly-configure-wire-services>`."
msgstr ""

#: ../../../service_container/3.3-di-changes.rst:178
msgid "But how does the container know the arguments to my services?"
msgstr ""

#: ../../../service_container/3.3-di-changes.rst:180
msgid ""
"Since each service is :ref:`autowired <services-autowire>`, the container"
" is able to determine most arguments automatically. But, you can always "
"override the service and :ref:`manually configure arguments <services-"
"manually-wire-args>` or anything else special about your service."
msgstr ""

#: ../../../service_container/3.3-di-changes.rst:185
msgid ""
"But wait, if I have some model (non-service) classes in my ``src/`` "
"directory, doesn't this mean that *they* will also be registered as "
"services? Isn't that a problem?"
msgstr ""

#: ../../../service_container/3.3-di-changes.rst:189
msgid ""
"Actually, this is *not* a problem. Since all the new services are "
":ref:`private <container-public>` (thanks to ``_defaults``), if any of "
"the services are *not* used in your code, they're automatically removed "
"from the compiled container. This means that the number of services in "
"your container should be the *same* whether your explicitly configure "
"each service or load them all at once with this method."
msgstr ""

#: ../../../service_container/3.3-di-changes.rst:195
msgid "Ok, but can I exclude some paths that I *know* won't contain services?"
msgstr ""

#: ../../../service_container/3.3-di-changes.rst:197
msgid ""
"Yes! The ``exclude`` key is a glob pattern that can be used to "
"*blacklist* paths that you do *not* want to be included as services. But,"
" since unused services are automatically removed from the container, "
"``exclude`` is not that important. The biggest benefit is that those "
"paths are not *tracked* by the container, and so may result in the "
"container needing to be rebuilt less-often in the ``dev`` environment."
msgstr ""

#: ../../../service_container/3.3-di-changes.rst:204
msgid "2) Autowiring by Default: Use Type-hint instead of Service id"
msgstr ""

#: ../../../service_container/3.3-di-changes.rst:206
msgid ""
"The second big change is that autowiring is enabled (via ``_defaults``) "
"for all services you register. This also means that service id's are now "
"*less* important and \"types\" (i.e. class or interface names) are now "
"*more* important."
msgstr ""

#: ../../../service_container/3.3-di-changes.rst:210
msgid ""
"For example, before Symfony 3.3 (and this is still allowed), you could "
"pass one service as an argument to another with the following config:"
msgstr ""

#: ../../../service_container/3.3-di-changes.rst:259
msgid ""
"To pass the ``InvoiceGenerator`` as an argument to ``InvoiceMailer``, you"
" needed to specify the service's *id* as an argument: "
"``app.invoice_generator``. Service id's were the main way that you "
"configured things."
msgstr ""

#: ../../../service_container/3.3-di-changes.rst:263
msgid ""
"But in Symfony 3.3, thanks to autowiring, all you need to do is type-hint"
" the argument with ``InvoiceGenerator``::"
msgstr ""

#: ../../../service_container/3.3-di-changes.rst:281
msgid ""
"That's it! Both services are :ref:`automatically registered <service-33"
"-changes-automatic-registration>` and set to autowire. Without *any* "
"configuration, the container knows to pass the auto-registered "
"``App\\Service\\InvoiceGenerator`` as the first argument. As you can see,"
" the *type* of the class - ``App\\Service\\InvoiceGenerator`` - is what's"
" most important, not the id. You request an *instance* of a specific type"
" and the container automatically passes you the correct service."
msgstr ""

#: ../../../service_container/3.3-di-changes.rst:288
msgid ""
"Isn't that magic? How does it know which service to pass me exactly? What"
" if I have multiple services of the same instance?"
msgstr ""

#: ../../../service_container/3.3-di-changes.rst:291
msgid ""
"The autowiring system was designed to be *super* predictable. It first "
"works by looking for a service whose id *exactly* matches the type-hint. "
"This means you're in full control of what type-hint maps to what service."
" You can even use service aliases to get more control. If you have "
"multiple services for a specific type, *you* choose which should be used "
"for autowiring. For full details on the autowiring logic, see :ref"
":`autowiring-logic-explained`."
msgstr ""

#: ../../../service_container/3.3-di-changes.rst:297
msgid ""
"But what if I have a scalar (e.g. string) argument? How does it autowire "
"that?"
msgstr ""

#: ../../../service_container/3.3-di-changes.rst:299
msgid ""
"If you have an argument that is *not* an object, it can't be autowired. "
"But that's ok! Symfony will give you a clear exception (on the next "
"refresh of *any* page) telling you which argument of which service could "
"not be autowired. To fix it, you can :ref:`manually configure *just* that"
" one argument <services-manually-wire-args>`. This is the philosophy of "
"autowiring: only configure the parts that you need to. Most configuration"
" is automated."
msgstr ""

#: ../../../service_container/3.3-di-changes.rst:306
msgid ""
"Ok, but autowiring makes your applications less stable. If you change one"
" thing or make a mistake, unexpected things might happen. Isn't that a "
"problem?"
msgstr ""

#: ../../../service_container/3.3-di-changes.rst:309
msgid ""
"Symfony has always valued stability, security and predictability first. "
"Autowiring was designed with that in mind. Specifically:"
msgstr ""

#: ../../../service_container/3.3-di-changes.rst:312
msgid ""
"If there is a problem wiring *any* argument to *any* service, a clear "
"exception is thrown on the next refresh of *any* page, even if you don't "
"use that service on that page. That's *powerful*: it is *not* possible to"
" make an autowiring mistake and not realize it."
msgstr ""

#: ../../../service_container/3.3-di-changes.rst:317
msgid ""
"The container determines *which* service to pass in an explicit way: it "
"looks for a service whose id matches the type-hint exactly. It does *not*"
" scan all services looking for objects that have that class/interface."
msgstr ""

#: ../../../service_container/3.3-di-changes.rst:321
msgid "Autowiring aims to *automate* configuration without magic."
msgstr ""

#: ../../../service_container/3.3-di-changes.rst:324
msgid "3) Controllers are Registered as Services"
msgstr ""

#: ../../../service_container/3.3-di-changes.rst:326
msgid ""
"The third big change is that, in a new Symfony 3.3 project, your "
"controllers are *services*:"
msgstr ""

#: ../../../service_container/3.3-di-changes.rst:375
msgid ""
"But, you might not even notice this. First, your controllers *can* still "
"extend the same base controller class (``AbstractController``). This "
"means you have access to all of the same shortcuts as before. "
"Additionally, the ``@Route`` annotation and ``_controller`` syntax (e.g. "
"``App:Default:homepage``) used in routing will automatically use your "
"controller as a service (as long as its service id matches its class "
"name, which it *does* in this case). See :doc:`/controller/service` for "
"more details. You can even create :ref:`invokable controllers "
"<controller-service-invoke>`"
msgstr ""

#: ../../../service_container/3.3-di-changes.rst:383
msgid ""
"In other words, everything works the same. You can even add the above "
"configuration to your existing project without any issues: your "
"controllers will behave the same as before. But now that your controllers"
" are services, you can use dependency injection and autowiring like any "
"other service."
msgstr ""

#: ../../../service_container/3.3-di-changes.rst:388
msgid ""
"To make life even easier, it's now possible to autowire arguments to your"
" controller action methods, just like you can with the constructor of "
"services. For example::"
msgstr ""

#: ../../../service_container/3.3-di-changes.rst:401
msgid ""
"This is *only* possible in a controller, and your controller service must"
" be tagged with ``controller.service_arguments`` to make it happen. This "
"new feature is used throughout the documentation."
msgstr ""

#: ../../../service_container/3.3-di-changes.rst:405
msgid ""
"In general, the new best practice is to use normal constructor dependency"
" injection (or \"action\" injection in controllers) instead of fetching "
"public services via ``$this->get()`` (though that does still work)."
msgstr ""

#: ../../../service_container/3.3-di-changes.rst:412
msgid "4) Auto-tagging with autoconfigure"
msgstr ""

#: ../../../service_container/3.3-di-changes.rst:414
msgid ""
"The fourth big change is the ``autoconfigure`` key, which is set to "
"``true`` under ``_defaults``. Thanks to this, the container will auto-tag"
" services registered in this file. For example, suppose you want to "
"create an event subscriber. First, you create the class::"
msgstr ""

#: ../../../service_container/3.3-di-changes.rst:441
msgid ""
"Great! In Symfony 3.2 or lower, you would now need to register this as a "
"service in ``services.yaml`` and tag it with ``kernel.event_subscriber``."
" In Symfony 3.3, you're already done!"
msgstr ""

#: ../../../service_container/3.3-di-changes.rst:445
msgid ""
"The service is :ref:`automatically registered <service-33-changes-"
"automatic-registration>`. And thanks to ``autoconfigure``, Symfony "
"automatically tags the service because it implements "
"``EventSubscriberInterface``."
msgstr ""

#: ../../../service_container/3.3-di-changes.rst:449
msgid "That sounds like magic - it *automatically* tags my services?"
msgstr ""

#: ../../../service_container/3.3-di-changes.rst:451
msgid ""
"In this case, you've created a class that implements "
"``EventSubscriberInterface`` and registered it as a service. This is more"
" than enough for the container to know that you want this to be used as "
"an event subscriber: more configuration is not needed. And the tags "
"system is its own, Symfony-specific mechanism. And you can always set "
"``autoconfigure`` to ``false`` in ``services.yaml``, or disable it for a "
"specific service."
msgstr ""

#: ../../../service_container/3.3-di-changes.rst:458
msgid "Does this mean tags are dead? Does this work for all tags?"
msgstr ""

#: ../../../service_container/3.3-di-changes.rst:460
msgid ""
"This does *not* work for all tags. Many tags have *required* attributes, "
"like event *listeners*, where you also need to specify the event name and"
" method in your tag. Autoconfigure works only for tags without any "
"required tag attributes, and as you read the docs for a feature, it'll "
"tell you whether or not the tag is needed. You can also look at the "
"extension classes (e.g. `FrameworkExtension for 3.3.0`_) to see what it "
"autoconfigures."
msgstr ""

#: ../../../service_container/3.3-di-changes.rst:467
msgid "What if I need to add a priority to my tag?"
msgstr ""

#: ../../../service_container/3.3-di-changes.rst:469
msgid ""
"Many autoconfigured tags have an optional priority. If you need to "
"specify a priority (or any other optional tag attribute), no problem! "
":ref:`Manually configure your service <services-manually-wire-args>` and "
"add the tag. Your tag will take precedence over the one added by auto-"
"configuration."
msgstr ""

#: ../../../service_container/3.3-di-changes.rst:474
msgid "5) Auto-configure with _instanceof"
msgstr ""

#: ../../../service_container/3.3-di-changes.rst:476
msgid ""
"And the final big change is ``_instanceof``. It acts as a default "
"definition template (see `service-33-default_definition`_), but only for "
"services whose class matches a defined one."
msgstr ""

#: ../../../service_container/3.3-di-changes.rst:480
msgid ""
"This can be very useful when many services share some tag that cannot be "
"inherited from an abstract definition:"
msgstr ""

#: ../../../service_container/3.3-di-changes.rst:530
msgid "What about Performance"
msgstr ""

#: ../../../service_container/3.3-di-changes.rst:532
msgid ""
"Symfony is unique because it has a *compiled* container. This means that "
"there is *no* runtime performance impact for using any of these features."
" That's also why the autowiring system can give you such clear errors."
msgstr ""

#: ../../../service_container/3.3-di-changes.rst:536
msgid ""
"However, there is some performance impact in the ``dev`` environment. "
"Most importantly, your container will likely be rebuilt more often when "
"you modify your service classes. This is because it needs to rebuild "
"whenever you add a new argument to a service, or add an interface to your"
" class that should be autoconfigured."
msgstr ""

#: ../../../service_container/3.3-di-changes.rst:541
msgid ""
"In very big projects, this may be a problem. If it is, you can always opt"
" to *not* use autowiring. If you think the cache rebuilding system could "
"be smarter in some situation, please open an issue!"
msgstr ""

#: ../../../service_container/3.3-di-changes.rst:546
msgid "Upgrading to the new Symfony 3.3 Configuration"
msgstr ""

#: ../../../service_container/3.3-di-changes.rst:548
msgid ""
"Ready to upgrade your existing project? Great! Suppose you have the "
"following configuration:"
msgstr ""

#: ../../../service_container/3.3-di-changes.rst:572
msgid ""
"It's optional, but let's upgrade this to the new Symfony 3.3 "
"configuration step-by-step, *without* breaking our application."
msgstr ""

#: ../../../service_container/3.3-di-changes.rst:576
msgid "Step 1): Adding _defaults"
msgstr ""

#: ../../../service_container/3.3-di-changes.rst:578
msgid ""
"Start by adding a ``_defaults`` section with ``autowire`` and "
"``autoconfigure``."
msgstr ""

#: ../../../service_container/3.3-di-changes.rst:590
msgid ""
"You're already *explicitly* configuring all of your services. So, "
"``autowire`` does nothing. You're also already tagging your services, so "
"``autoconfigure`` also doesn't change any existing services."
msgstr ""

#: ../../../service_container/3.3-di-changes.rst:594
msgid "You have not added ``public: false`` yet. That will come in a minute."
msgstr ""

#: ../../../service_container/3.3-di-changes.rst:597
msgid "Step 2) Using Class Service id's"
msgstr ""

#: ../../../service_container/3.3-di-changes.rst:599
msgid ""
"Right now, the service ids are machine names - e.g. "
"``app.github_notifier``. To work well with the new configuration system, "
"your service ids should be class names, except when you have multiple "
"instances of the same service."
msgstr ""

#: ../../../service_container/3.3-di-changes.rst:603
msgid "Start by updating the service ids to class names:"
msgstr ""

#: ../../../service_container/3.3-di-changes.rst:629
msgid ""
"Services associated with global PHP classes (i.e. not using PHP "
"namespaces) must maintain the ``class`` parameter. For example, when "
"using the old Twig classes (e.g. ``Twig_Extensions_Extension_Intl`` "
"instead of ``Twig\\Extensions\\IntlExtension``), you can't redefine the "
"service as ``Twig_Extensions_Extension_Intl: ~`` and you must keep the "
"original ``class`` parameter."
msgstr ""

#: ../../../service_container/3.3-di-changes.rst:637
msgid ""
"If a service is processed by a :doc:`compiler pass "
"</service_container/compiler_passes>`, you could face a  \"You have "
"requested a non-existent service\" error. To get rid of this, be sure "
"that the Compiler Pass is using ``findDefinition()`` instead of "
"``getDefinition()``. The latter won't take aliases into account when "
"looking up for services. Furthermore it is always recommended to check "
"for definition existence using ``has()`` function."
msgstr ""

#: ../../../service_container/3.3-di-changes.rst:647
msgid ""
"If you get rid of deprecations and make your controllers extend from "
"``AbstractController`` instead of ``Controller``, you can skip the rest "
"of this step because ``AbstractController`` doesn't provide a container "
"where you can get the services from. All services need to be injected as "
"explained in the :ref:`step 5 of this article <step-5>`."
msgstr ""

#: ../../../service_container/3.3-di-changes.rst:653
msgid ""
"But, this change will break our app! The old service ids (e.g. "
"``app.github_notifier``) no longer exist. The simplest way to fix this is"
" to find all your old service ids and update them to the new class id: "
"``app.github_notifier`` to ``App\\Service\\GitHubNotifier``."
msgstr ""

#: ../../../service_container/3.3-di-changes.rst:657
msgid ""
"In large projects, there's a better way: create legacy aliases that map "
"the old id to the new id. Create a new ``legacy_aliases.yaml`` file:"
msgstr ""

#: ../../../service_container/3.3-di-changes.rst:672
msgid "Then import this at the top of ``services.yaml``:"
msgstr ""

#: ../../../service_container/3.3-di-changes.rst:682
msgid ""
"That's it! The old service ids still work. Later, (see the cleanup step "
"below), you can remove these from your app."
msgstr ""

#: ../../../service_container/3.3-di-changes.rst:686
msgid "Step 3) Make the Services Private"
msgstr ""

#: ../../../service_container/3.3-di-changes.rst:688
msgid "Now you're ready to default all services to be private:"
msgstr ""

#: ../../../service_container/3.3-di-changes.rst:701
msgid ""
"Thanks to this, any services created in this file cannot be fetched "
"directly from the container. But, since the old service id's are aliases "
"in a separate file (``legacy_aliases.yaml``), these *are* still public. "
"This makes sure the app keeps working."
msgstr ""

#: ../../../service_container/3.3-di-changes.rst:705
msgid ""
"If you did *not* change the id of some of your services (because there "
"are multiple instances of the same class), you may need to make those "
"public:"
msgstr ""

#: ../../../service_container/3.3-di-changes.rst:727
msgid ""
"This is to guarantee that the application doesn't break. If you're not "
"fetching these services directly from the container, this isn't needed. "
"In a minute, you'll clean that up."
msgstr ""

#: ../../../service_container/3.3-di-changes.rst:732
msgid "Step 4) Auto-registering Services"
msgstr ""

#: ../../../service_container/3.3-di-changes.rst:734
msgid ""
"You're now ready to automatically register all services in ``src/`` "
"(and/or any other directory/bundle you have):"
msgstr ""

#: ../../../service_container/3.3-di-changes.rst:755
msgid ""
"That's it! Actually, you're already overriding and reconfiguring all the "
"services you're using (``App\\Service\\GitHubNotifier`` and "
"``App\\Service\\MarkdownTransformer``). But now, you won't need to "
"manually register future services."
msgstr ""

#: ../../../service_container/3.3-di-changes.rst:759
msgid ""
"Once again, there is one extra complication if you have multiple services"
" of the same class:"
msgstr ""

#: ../../../service_container/3.3-di-changes.rst:778
msgid ""
"This guarantees that if you try to autowire an ``ApiClient`` instance, "
"the ``app.api_client_github`` will be used. If you *don't* have this, the"
" auto-registration feature will try to register a third ``ApiClient`` "
"service and use that for autowiring (which will fail, because the class "
"has a non-autowireable argument)."
msgstr ""

#: ../../../service_container/3.3-di-changes.rst:786
msgid "Step 5) Cleanup!"
msgstr ""

#: ../../../service_container/3.3-di-changes.rst:788
msgid ""
"To make sure your application didn't break, you did some extra work. Now "
"it's time to clean things up! First, update your application to *not* use"
" the old service id's (the ones in ``legacy_aliases.yaml``). This means "
"updating any service arguments (e.g. ``@app.github_notifier`` to "
"``@App\\Service\\GitHubNotifier``) and updating your code to not fetch "
"this service directly from the container. For example:"
msgstr ""

#: ../../../service_container/3.3-di-changes.rst:806
msgid ""
"As soon as you do this, you can delete ``legacy_aliases.yaml`` and remove"
" its import. You should do the same thing for any services that you made "
"public, like ``app.api_client_github`` and ``app.api_client_sl_connect``."
" Once you're not fetching these directly from the container, you can "
"remove the ``public: true`` flag:"
msgstr ""

#: ../../../service_container/3.3-di-changes.rst:825
msgid ""
"Finally, you can optionally remove any services from ``services.yaml`` "
"whose arguments can be autowired. The final configuration looks like "
"this:"
msgstr ""

#: ../../../service_container/3.3-di-changes.rst:864
msgid "You can now take advantage of the new features going forward."
msgstr ""

