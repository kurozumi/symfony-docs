# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the Symfony Framework
# Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Symfony Framework Documentation \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-08 14:21+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../../service_container/autowiring.rst:5
msgid "Defining Services Dependencies Automatically (Autowiring)"
msgstr ""

#: ../../../service_container/autowiring.rst:7
msgid ""
"Autowiring allows you to manage services in the container with minimal "
"configuration. It reads the type-hints on your constructor (or other "
"methods) and automatically passes the correct services to each method. "
"Symfony's autowiring is designed to be predictable: if it is not "
"absolutely clear which dependency should be passed, you'll see an "
"actionable exception."
msgstr ""

#: ../../../service_container/autowiring.rst:15
msgid ""
"Thanks to Symfony's compiled container, there is no runtime overhead for "
"using autowiring."
msgstr ""

#: ../../../service_container/autowiring.rst:19
msgid "An Autowiring Example"
msgstr ""

#: ../../../service_container/autowiring.rst:21
msgid ""
"Imagine you're building an API to publish statuses on a Twitter feed, "
"obfuscated with `ROT13`_, a fun encoder that shifts all characters 13 "
"letters forward in the alphabet."
msgstr ""

#: ../../../service_container/autowiring.rst:25
msgid "Start by creating a ROT13 transformer class::"
msgstr ""

#: ../../../service_container/autowiring.rst:37
msgid "And now a Twitter client using this transformer::"
msgstr ""

#: ../../../service_container/autowiring.rst:60
msgid ""
"If you're using the :ref:`default services.yaml configuration <service-"
"container-services-load-example>`, **both classes are automatically "
"registered as services and configured to be autowired**. This means you "
"can use them immediately without *any* configuration."
msgstr ""

#: ../../../service_container/autowiring.rst:64
msgid ""
"However, to understand autowiring better, the following examples "
"explicitly configure both services:"
msgstr ""

#: ../../../service_container/autowiring.rst:123
msgid ""
"Now, you can use the ``TwitterClient`` service immediately in a "
"controller::"
msgstr ""

#: ../../../service_container/autowiring.rst:146
msgid ""
"This works automatically! The container knows to pass the "
"``Rot13Transformer`` service as the first argument when creating the "
"``TwitterClient`` service."
msgstr ""

#: ../../../service_container/autowiring.rst:152
msgid "Autowiring Logic Explained"
msgstr ""

#: ../../../service_container/autowiring.rst:154
msgid ""
"Autowiring works by reading the ``Rot13Transformer`` *type-hint* in "
"``TwitterClient``::"
msgstr ""

#: ../../../service_container/autowiring.rst:169
msgid ""
"The autowiring system **looks for a service whose id exactly matches the "
"type-hint**: so ``App\\Util\\Rot13Transformer``. In this case, that "
"exists! When you configured the ``Rot13Transformer`` service, you used "
"its fully-qualified class name as its id. Autowiring isn't magic: it "
"looks for a service whose id matches the type-hint. If you :ref:`load "
"services automatically <service-container-services-load-example>`, each "
"service's id is its class name."
msgstr ""

#: ../../../service_container/autowiring.rst:176
msgid ""
"If there is *not* a service whose id exactly matches the type, a clear "
"exception will be thrown."
msgstr ""

#: ../../../service_container/autowiring.rst:179
msgid ""
"Autowiring is a great way to automate configuration, and Symfony tries to"
" be as *predictable* and clear as possible."
msgstr ""

#: ../../../service_container/autowiring.rst:185
msgid "Using Aliases to Enable Autowiring"
msgstr ""

#: ../../../service_container/autowiring.rst:187
msgid ""
"The main way to configure autowiring is to create a service whose id "
"exactly matches its class. In the previous example, the service's id is "
"``App\\Util\\Rot13Transformer``, which allows us to autowire this type "
"automatically."
msgstr ""

#: ../../../service_container/autowiring.rst:191
msgid ""
"This can also be accomplished using an :ref:`alias <services-alias>`. "
"Suppose that for some reason, the id of the service was instead "
"``app.rot13.transformer``. In this case, any arguments type-hinted with "
"the class name (``App\\Util\\Rot13Transformer``) can no longer be "
"autowired."
msgstr ""

#: ../../../service_container/autowiring.rst:196
msgid ""
"No problem! To fix this, you can *create* a service whose id matches the "
"class by adding a service alias:"
msgstr ""

#: ../../../service_container/autowiring.rst:254
msgid ""
"This creates a service \"alias\", whose id is "
"``App\\Util\\Rot13Transformer``. Thanks to this, autowiring sees this and"
" uses it whenever the ``Rot13Transformer`` class is type-hinted."
msgstr ""

#: ../../../service_container/autowiring.rst:260
msgid ""
"Aliases are used by the core bundles to allow services to be autowired. "
"For example, MonologBundle creates a service whose id is ``logger``. But "
"it also adds an alias: ``Psr\\Log\\LoggerInterface`` that points to the "
"``logger`` service. This is why arguments type-hinted with "
"``Psr\\Log\\LoggerInterface`` can be autowired."
msgstr ""

#: ../../../service_container/autowiring.rst:268
msgid "Working with Interfaces"
msgstr ""

#: ../../../service_container/autowiring.rst:270
msgid ""
"You might also find yourself type-hinting abstractions (e.g. interfaces) "
"instead of concrete classes as it replaces your dependencies with other "
"objects."
msgstr ""

#: ../../../service_container/autowiring.rst:273
msgid ""
"To follow this best practice, suppose you decide to create a "
"``TransformerInterface``::"
msgstr ""

#: ../../../service_container/autowiring.rst:282
msgid "Then, you update ``Rot13Transformer`` to implement it::"
msgstr ""

#: ../../../service_container/autowiring.rst:290
msgid "Now that you have an interface, you should use this as your type-hint::"
msgstr ""

#: ../../../service_container/autowiring.rst:302
msgid ""
"But now, the type-hint (``App\\Util\\TransformerInterface``) no longer "
"matches the id of the service (``App\\Util\\Rot13Transformer``). This "
"means that the argument can no longer be autowired."
msgstr ""

#: ../../../service_container/autowiring.rst:306
msgid "To fix that, add an :ref:`alias <service-autowiring-alias>`:"
msgstr ""

#: ../../../service_container/autowiring.rst:357
msgid ""
"Thanks to the ``App\\Util\\TransformerInterface`` alias, the autowiring "
"subsystem knows that the ``App\\Util\\Rot13Transformer`` service should "
"be injected when dealing with the ``TransformerInterface``."
msgstr ""

#: ../../../service_container/autowiring.rst:363
msgid ""
"When using a `service definition prototype`_, if only one service is "
"discovered that implements an interface, and that interface is also "
"discovered in the same file, configuring the alias is not mandatory and "
"Symfony will automatically create one."
msgstr ""

#: ../../../service_container/autowiring.rst:369
msgid "Dealing with Multiple Implementations of the Same Type"
msgstr ""

#: ../../../service_container/autowiring.rst:371
msgid ""
"Suppose you create a second class - ``UppercaseTransformer`` that "
"implements ``TransformerInterface``::"
msgstr ""

#: ../../../service_container/autowiring.rst:384
msgid ""
"If you register this as a service, you now have *two* services that "
"implement the ``App\\Util\\TransformerInterface`` type. Autowiring "
"subsystem can not decide which one to use. Remember, autowiring isn't "
"magic; it looks for a service whose id matches the type-hint. So you need"
" to choose one by creating an alias from the type to the correct service "
"id (see :ref:`autowiring-interface-alias`). Additionally, you can define "
"several named autowiring aliases if you want to use one implementation in"
" some cases, and another implementation in some other cases."
msgstr ""

#: ../../../service_container/autowiring.rst:393
msgid ""
"For instance, you may want to use the ``Rot13Transformer`` implementation"
" by default when the ``TransformerInterface`` interface is type hinted, "
"but use the ``UppercaseTransformer`` implementation in some specific "
"cases. To do so, you can create a normal alias from the "
"``TransformerInterface`` interface to ``Rot13Transformer``, and then "
"create a *named autowiring alias* from a special string containing the "
"interface followed by a variable name matching the one you use when doing"
" the injection::"
msgstr ""

#: ../../../service_container/autowiring.rst:514
msgid ""
"Thanks to the ``App\\Util\\TransformerInterface`` alias, any argument "
"type-hinted with this interface will be passed the "
"``App\\Util\\Rot13Transformer`` service. If the argument is named "
"``$shoutyTransformer``, ``App\\Util\\UppercaseTransformer`` will be used "
"instead. But, you can also manually wire any *other* service by "
"specifying the argument under the arguments key."
msgstr ""

#: ../../../service_container/autowiring.rst:522
msgid "Fixing Non-Autowireable Arguments"
msgstr ""

#: ../../../service_container/autowiring.rst:524
msgid ""
"Autowiring only works when your argument is an *object*. But if you have "
"a scalar argument (e.g. a string), this cannot be autowired: Symfony will"
" throw a clear exception."
msgstr ""

#: ../../../service_container/autowiring.rst:528
msgid ""
"To fix this, you can :ref:`manually wire the problematic argument "
"<services-manually-wire-args>`. You wire up the difficult arguments, "
"Symfony takes care of the rest."
msgstr ""

#: ../../../service_container/autowiring.rst:534
msgid "Autowiring other Methods (e.g. Setters)"
msgstr ""

#: ../../../service_container/autowiring.rst:536
msgid ""
"When autowiring is enabled for a service, you can *also* configure the "
"container to call methods on your class when it's instantiated. For "
"example, suppose you want to inject the ``logger`` service, and decide to"
" use setter-injection::"
msgstr ""

#: ../../../service_container/autowiring.rst:561
msgid ""
"Autowiring will automatically call *any* method with the ``@required`` "
"annotation above it, autowiring each argument. If you need to manually "
"wire some of the arguments to a method, you can always explicitly "
":doc:`configure the method call </service_container/calls>`."
msgstr ""

#: ../../../service_container/autowiring.rst:566
msgid "Autowiring Controller Action Methods"
msgstr ""

#: ../../../service_container/autowiring.rst:568
msgid ""
"If you're using the Symfony Framework, you can also autowire arguments to"
" your controller action methods. This is a special case for autowiring, "
"which exists for convenience. See :ref:`controller-accessing-services` "
"for more details."
msgstr ""

#: ../../../service_container/autowiring.rst:573
msgid "Performance Consequences"
msgstr ""

#: ../../../service_container/autowiring.rst:575
msgid ""
"Thanks to Symfony's compiled container, there is *no* performance penalty"
" for using autowiring. However, there is a small performance penalty in "
"the ``dev`` environment, as the container may be rebuilt more often as "
"you modify classes. If rebuilding your container is slow (possible on "
"very large projects), you may not be able to use autowiring."
msgstr ""

#: ../../../service_container/autowiring.rst:582
msgid "Public and Reusable Bundles"
msgstr ""

#: ../../../service_container/autowiring.rst:584
msgid ""
"Public bundles should explicitly configure their services and not rely on"
" autowiring. Autowiring depends on the services that are available in the"
" container and bundles have no control over the service container of "
"applications they are included in. You can use autowiring when building "
"reusable bundles within your company, as you have full control over all "
"code."
msgstr ""

