# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the Symfony Framework
# Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Symfony Framework Documentation \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-08 14:21+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../../service_container/alias_private.rst:5
msgid "How to Create Service Aliases and Mark Services as Private"
msgstr ""

#: ../../../service_container/alias_private.rst:10
msgid "Marking Services as Public / Private"
msgstr ""

#: ../../../service_container/alias_private.rst:12
msgid ""
"When defining a service, it can be made to be *public* or *private*. If a"
" service is *public*, it means that you can access it directly from the "
"container at runtime. For example, the ``doctrine`` service is a public "
"service::"
msgstr ""

#: ../../../service_container/alias_private.rst:19
msgid ""
"But typically, services are accessed using :ref:`dependency injection "
"<services-constructor-injection>`. And in this case, those services do "
"*not* need to be public."
msgstr ""

#: ../../../service_container/alias_private.rst:24
msgid ""
"So unless you *specifically* need to access a service directly from the "
"container via ``$container->get()``, the best-practice is to make your "
"services *private*. In fact, All services  are :ref:`private <container-"
"public>` by default."
msgstr ""

#: ../../../service_container/alias_private.rst:28
msgid "You can also control the ``public`` option on a service-by-service basis:"
msgstr ""

#: ../../../service_container/alias_private.rst:70
msgid ""
"Private services are special because they allow the container to optimize"
" whether and how they are instantiated. This increases the container's "
"performance. It also gives you better errors: if you try to reference a "
"non-existent service, you will get a clear error when you refresh *any* "
"page, even if the problematic code would not have run on that page."
msgstr ""

#: ../../../service_container/alias_private.rst:76
msgid ""
"Now that the service is private, you *must not* fetch the service "
"directly from the container::"
msgstr ""

#: ../../../service_container/alias_private.rst:83
msgid ""
"Simply said: A service can be marked as private if you do not want to "
"access it directly from your code."
msgstr ""

#: ../../../service_container/alias_private.rst:86
msgid ""
"However, if a service has been marked as private, you can still alias it "
"(see below) to access this service (via the alias)."
msgstr ""

#: ../../../service_container/alias_private.rst:92
msgid "Aliasing"
msgstr ""

#: ../../../service_container/alias_private.rst:94
msgid ""
"You may sometimes want to use shortcuts to access some services. You can "
"do so by aliasing them and, furthermore, you can even alias non-public "
"services."
msgstr ""

#: ../../../service_container/alias_private.rst:144
msgid ""
"This means that when using the container directly, you can access the "
"``PhpMailer`` service by asking for the ``app.mailer`` service like "
"this::"
msgstr ""

#: ../../../service_container/alias_private.rst:151
msgid "In YAML, you can also use a shortcut to alias a service:"
msgstr ""

#: ../../../service_container/alias_private.rst:161
msgid "Deprecating Service Aliases"
msgstr ""

#: ../../../service_container/alias_private.rst:163
msgid ""
"If you decide to deprecate the use of a service alias (because it is "
"outdated or you decided not to maintain it anymore), you can deprecate "
"its definition:"
msgstr ""

#: ../../../service_container/alias_private.rst:212
msgid ""
"Now, every time this service alias is used, a deprecation warning is "
"triggered, advising you to stop or to change your uses of that alias."
msgstr ""

#: ../../../service_container/alias_private.rst:215
msgid ""
"The message is actually a message template, which replaces occurrences of"
" the ``%alias_id%`` placeholder by the service alias id. You **must** "
"have at least one occurrence of the ``%alias_id%`` placeholder in your "
"template."
msgstr ""

#: ../../../service_container/alias_private.rst:220
msgid "Anonymous Services"
msgstr ""

#: ../../../service_container/alias_private.rst:222
msgid ""
"In some cases, you may want to prevent a service being used as a "
"dependency of other services. This can be achieved by creating an "
"anonymous service. These services are like regular services but they "
"don't define an ID and they are created where they are used."
msgstr ""

#: ../../../service_container/alias_private.rst:227
msgid ""
"The following example shows how to inject an anonymous service into "
"another service:"
msgstr ""

#: ../../../service_container/alias_private.rst:275
msgid ""
"The ``service()`` function was introduced in Symfony 5.1. In previous "
"versions it was called ``inline()``."
msgstr ""

#: ../../../service_container/alias_private.rst:280
msgid ""
"Anonymous services do *NOT* inherit the definitions provided from the "
"defaults defined in the configuration. So you'll need to explicitly mark "
"service as autowired or autoconfigured when doing an anonymous service "
"e.g.: ``service(Foo::class)->autowire()->autoconfigure()``."
msgstr ""

#: ../../../service_container/alias_private.rst:285
msgid "Using an anonymous service as a factory looks like this:"
msgstr ""

#: ../../../service_container/alias_private.rst:330
msgid "Deprecating Services"
msgstr ""

#: ../../../service_container/alias_private.rst:332
msgid ""
"Once you have decided to deprecate the use of a service (because it is "
"outdated or you decided not to maintain it anymore), you can deprecate "
"its definition:"
msgstr ""

#: ../../../service_container/alias_private.rst:372
msgid ""
"Now, every time this service is used, a deprecation warning is triggered,"
" advising you to stop or to change your uses of that service."
msgstr ""

#: ../../../service_container/alias_private.rst:375
#, python-format
msgid ""
"The message is actually a message template, which replaces occurrences of"
" the ``%service_id%`` placeholder by the service's id. You **must** have "
"at least one occurrence of the ``%service_id%`` placeholder in your "
"template."
msgstr ""

#: ../../../service_container/alias_private.rst:381
#, python-format
msgid ""
"The deprecation message is optional. If not set, Symfony will show this "
"default message: ``The \"%service_id%\" service is deprecated. You should"
" stop using it, as it will soon be removed.``."
msgstr ""

#: ../../../service_container/alias_private.rst:387
msgid ""
"It is strongly recommended that you define a custom message because the "
"default one is too generic. A good message informs when this service was "
"deprecated, until when it will be maintained and the alternative services"
" to use (if any)."
msgstr ""

#: ../../../service_container/alias_private.rst:392
msgid ""
"For service decorators (see "
":doc:`/service_container/service_decoration`), if the definition does not"
" modify the deprecated status, it will inherit the status from the "
"definition that is decorated."
msgstr ""

