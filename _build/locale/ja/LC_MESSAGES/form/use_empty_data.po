# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the Symfony Framework
# Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Symfony Framework Documentation \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-08 14:21+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../../form/use_empty_data.rst:5
msgid "How to Configure empty Data for a Form Class"
msgstr ""

#: ../../../form/use_empty_data.rst:7
msgid ""
"The ``empty_data`` option allows you to specify an empty data set for "
"your form class. This empty data set would be used if you submit your "
"form, but haven't called ``setData()`` on your form or passed in data "
"when you created your form. For example, in a controller::"
msgstr ""

#: ../../../form/use_empty_data.rst:25
msgid ""
"By default, ``empty_data`` is set to ``null``. Or, if you have specified "
"a ``data_class`` option for your form class, it will default to a new "
"instance of that class. That instance will be created by calling the "
"constructor with no arguments."
msgstr ""

#: ../../../form/use_empty_data.rst:30
msgid ""
"If you want to override this default behavior, there are two ways to do "
"this:"
msgstr ""

#: ../../../form/use_empty_data.rst:32
msgid "`Option 1: Instantiate a new Class`_"
msgstr ""

#: ../../../form/use_empty_data.rst:33
msgid "`Option 2: Provide a Closure`_"
msgstr ""

#: ../../../form/use_empty_data.rst:35
msgid ""
"If you didn't set the ``data_class`` option, you can pass the initial "
"data as string or pass an array of strings (where the key matches the "
"field name) when the form type is compound."
msgstr ""

#: ../../../form/use_empty_data.rst:40
msgid "Option 1: Instantiate a new Class"
msgstr ""

#: ../../../form/use_empty_data.rst:42
msgid ""
"One reason you might use this option is if you want to use a constructor "
"that takes arguments. Remember, the default ``data_class`` option calls "
"that constructor with no arguments::"
msgstr ""

#: ../../../form/use_empty_data.rst:71
msgid ""
"You can instantiate your class however you want. In this example, you "
"pass some dependency into the ``BlogType`` then use that to instantiate "
"the ``Blog`` class. The point is, you can set ``empty_data`` to the exact"
" \"new\" object that you want to use."
msgstr ""

#: ../../../form/use_empty_data.rst:77
msgid ""
"In order to pass arguments to the ``BlogType`` constructor, you'll need "
"to :ref:`register the form as a service <service-container-creating-"
"service>` and :doc:`tag it </service_container/tags>` with ``form.type``."
" If you're using the :ref:`default services.yaml configuration <service-"
"container-services-load-example>`, this is already done for you."
msgstr ""

#: ../../../form/use_empty_data.rst:87
msgid "Option 2: Provide a Closure"
msgstr ""

#: ../../../form/use_empty_data.rst:89
msgid ""
"Using a closure is the preferred method, since it will only create the "
"object if it is needed."
msgstr ""

#: ../../../form/use_empty_data.rst:92
msgid ""
"The closure must accept a ``FormInterface`` instance as the first "
"argument::"
msgstr ""

