# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the Symfony Framework
# Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Symfony Framework Documentation \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-08 14:21+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../../form/create_form_type_extension.rst:5
msgid "How to Create a Form Type Extension"
msgstr ""

#: ../../../form/create_form_type_extension.rst:7
msgid ""
"Form type extensions are *incredibly* powerful: they allow you to "
"*modify* any existing form field types across the entire system."
msgstr ""

#: ../../../form/create_form_type_extension.rst:10
msgid "They have 2 main use-cases:"
msgstr ""

#: ../../../form/create_form_type_extension.rst:12
msgid ""
"You want to add a **specific feature to a single form type** (such as "
"adding a \"download\" feature to the ``FileType`` field type);"
msgstr ""

#: ../../../form/create_form_type_extension.rst:14
msgid ""
"You want to add a **generic feature to several types** (such as adding a "
"\"help\" text to every \"input text\"-like type)."
msgstr ""

#: ../../../form/create_form_type_extension.rst:17
msgid ""
"Imagine that you have a ``Media`` entity, and that each media is "
"associated to a file. Your ``Media`` form uses a file type, but when "
"editing the entity, you would like to see its image automatically "
"rendered next to the file input."
msgstr ""

#: ../../../form/create_form_type_extension.rst:23
msgid "Defining the Form Type Extension"
msgstr ""

#: ../../../form/create_form_type_extension.rst:25
msgid ""
"First, create the form type extension class extending from "
":class:`Symfony\\\\Component\\\\Form\\\\AbstractTypeExtension` (you can "
"implement "
":class:`Symfony\\\\Component\\\\Form\\\\FormTypeExtensionInterface` "
"instead if you prefer)::"
msgstr ""

#: ../../../form/create_form_type_extension.rst:47
msgid ""
"The only method you **must** implement is ``getExtendedTypes()``, which "
"is used to configure *which* field types you want to modify."
msgstr ""

#: ../../../form/create_form_type_extension.rst:50
msgid ""
"Depending on your use case, you may need to override some of the "
"following methods:"
msgstr ""

#: ../../../form/create_form_type_extension.rst:52
msgid "``buildForm()``"
msgstr ""

#: ../../../form/create_form_type_extension.rst:53
msgid "``buildView()``"
msgstr ""

#: ../../../form/create_form_type_extension.rst:54
msgid "``configureOptions()``"
msgstr ""

#: ../../../form/create_form_type_extension.rst:55
msgid "``finishView()``"
msgstr ""

#: ../../../form/create_form_type_extension.rst:57
msgid ""
"For more information on what those methods do, see the :ref:`custom form "
"field type <form-type-methods-explanation>` article."
msgstr ""

#: ../../../form/create_form_type_extension.rst:61
msgid "Registering your Form Type Extension as a Service"
msgstr ""

#: ../../../form/create_form_type_extension.rst:63
msgid ""
"Form type extensions must be :ref:`registered as services <service-"
"container-creating-service>` and :doc:`tagged </service_container/tags>` "
"with the ``form.type_extension`` tag. If you're using the :ref:`default "
"services.yaml configuration <service-container-services-load-example>`, "
"this is already done for you, thanks to :ref:`autoconfiguration "
"<services-autoconfigure>`."
msgstr ""

#: ../../../form/create_form_type_extension.rst:71
msgid ""
"There is an optional tag attribute called ``priority``, which defaults to"
" ``0`` and controls the order in which the form type extensions are "
"loaded (the higher the priority, the earlier an extension is loaded). "
"This is useful when you need to guarantee that one extension is loaded "
"before or after another extension. Using this attribute requires you to "
"add the service configuration explicitly."
msgstr ""

#: ../../../form/create_form_type_extension.rst:78
msgid ""
"Once the extension is registered, any method that you've overridden (e.g."
" ``buildForm()``) will be called whenever *any* field of the given type "
"(``FileType``) is built."
msgstr ""

#: ../../../form/create_form_type_extension.rst:84
msgid ""
"Run the following command to verify that the form type extension was "
"successfully registered in the application:"
msgstr ""

#: ../../../form/create_form_type_extension.rst:92
msgid "Adding the extension Business Logic"
msgstr ""

#: ../../../form/create_form_type_extension.rst:94
msgid ""
"The goal of your extension is to display a nice image next to file input "
"(when the underlying model contains images). For that purpose, suppose "
"that you use an approach similar to the one described in :doc:`How to "
"handle File Uploads with Doctrine </controller/upload_file>`: you have a "
"Media model with a path property, corresponding to the image path in the "
"database::"
msgstr ""

#: ../../../form/create_form_type_extension.rst:125
msgid ""
"Your form type extension class will need to do two things in order to "
"extend the ``FileType::class`` form type:"
msgstr ""

#: ../../../form/create_form_type_extension.rst:128
msgid ""
"Override the ``configureOptions()`` method so that any ``FileType`` field"
" can have an  ``image_property`` option;"
msgstr ""

#: ../../../form/create_form_type_extension.rst:130
msgid "Override the ``buildView()`` methods to pass the image URL to the view."
msgstr ""

#: ../../../form/create_form_type_extension.rst:132
msgid "For example::"
msgstr ""

#: ../../../form/create_form_type_extension.rst:178
msgid "Override the File Widget Template Fragment"
msgstr ""

#: ../../../form/create_form_type_extension.rst:180
msgid ""
"Each field type is rendered by a template fragment. Those template "
"fragments can be overridden in order to customize form rendering. For "
"more information, you can refer to the :ref:`form fragment naming <form-"
"fragment-naming>` rules."
msgstr ""

#: ../../../form/create_form_type_extension.rst:184
msgid ""
"In your extension class, you added a new variable (``image_url``), but "
"you still need to take advantage of this new variable in your templates. "
"Specifically, you need to override the ``file_widget`` block:"
msgstr ""

#: ../../../form/create_form_type_extension.rst:204
msgid ""
"Be sure to :ref:`configure this form theme template <forms-theming-"
"global>` so that the form system sees it."
msgstr ""

#: ../../../form/create_form_type_extension.rst:208
msgid "Using the Form Type Extension"
msgstr ""

#: ../../../form/create_form_type_extension.rst:210
msgid ""
"From now on, when adding a field of type ``FileType::class`` to your "
"form, you can specify an ``image_property`` option that will be used to "
"display an image next to the file field. For example::"
msgstr ""

#: ../../../form/create_form_type_extension.rst:232
msgid ""
"When displaying the form, if the underlying model has already been "
"associated with an image, you will see it displayed next to the file "
"input."
msgstr ""

#: ../../../form/create_form_type_extension.rst:236
msgid "Generic Form Type Extensions"
msgstr ""

#: ../../../form/create_form_type_extension.rst:238
msgid ""
"You can modify several form types at once by specifying their common "
"parent (:doc:`/reference/forms/types`). For example, several form types "
"inherit from the ``TextType`` form type (such as ``EmailType``, "
"``SearchType``, ``UrlType``, etc.). A form type extension applying to "
"``TextType`` (i.e. whose ``getExtendedType()`` method returns "
"``TextType::class``) would apply to all of these form types."
msgstr ""

#: ../../../form/create_form_type_extension.rst:244
msgid ""
"In the same way, since **most** form types natively available in Symfony "
"inherit from the ``FormType`` form type, a form type extension applying "
"to ``FormType`` would apply to all of these (notable exceptions are the "
"``ButtonType`` form types). Also keep in mind that if you created (or are"
" using) a *custom* form type, it's possible that it does *not* extend "
"``FormType``, and so your form type extension may not be applied to it."
msgstr ""

#: ../../../form/create_form_type_extension.rst:251
msgid ""
"Another option is to return multiple form types in the "
"``getExtendedTypes()`` method to extend all of them::"
msgstr ""

