# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the Symfony Framework
# Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Symfony Framework Documentation \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-08 14:21+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../../form/unit_testing.rst:5
msgid "How to Unit Test your Forms"
msgstr ""

#: ../../../form/unit_testing.rst:9
msgid ""
"This article is intended for developers who create :doc:`custom form "
"types </form/create_custom_field_type>`. If you are using the :doc"
":`built-in Symfony form types </reference/forms/types>` or the form types"
" provided by third-party bundles, you don't need to unit test them."
msgstr ""

#: ../../../form/unit_testing.rst:14
msgid ""
"The Form component consists of 3 core objects: a form type (implementing "
":class:`Symfony\\\\Component\\\\Form\\\\FormTypeInterface`), the "
":class:`Symfony\\\\Component\\\\Form\\\\Form` and the "
":class:`Symfony\\\\Component\\\\Form\\\\FormView`."
msgstr ""

#: ../../../form/unit_testing.rst:19
msgid ""
"The only class that is usually manipulated by programmers is the form "
"type class which serves as a form blueprint. It is used to generate the "
"``Form`` and the ``FormView``. You could test it directly by mocking its "
"interactions with the factory but it would be complex. It is better to "
"pass it to FormFactory like it is done in a real application. It is "
"simple to bootstrap and you can trust the Symfony components enough to "
"use them as a testing base."
msgstr ""

#: ../../../form/unit_testing.rst:26
msgid ""
"There is already a class that you can benefit from for simple FormTypes "
"testing: :class:`Symfony\\\\Component\\\\Form\\\\Test\\\\TypeTestCase`. "
"It is used to test the core types and you can use it to test your types "
"too."
msgstr ""

#: ../../../form/unit_testing.rst:32
msgid ""
"Depending on the way you installed your Symfony or Symfony Form component"
" the tests may not be downloaded. Use the ``--prefer-source`` option with"
" Composer if this is the case."
msgstr ""

#: ../../../form/unit_testing.rst:37
msgid "The Basics"
msgstr ""

#: ../../../form/unit_testing.rst:39
msgid "The simplest ``TypeTestCase`` implementation looks like the following::"
msgstr ""

#: ../../../form/unit_testing.rst:81
msgid "So, what does it test? Here comes a detailed explanation."
msgstr ""

#: ../../../form/unit_testing.rst:83
msgid ""
"First you verify if the ``FormType`` compiles. This includes basic class "
"inheritance, the ``buildForm()`` function and options resolution. This "
"should be the first test you write::"
msgstr ""

#: ../../../form/unit_testing.rst:89
msgid ""
"This test checks that none of your data transformers used by the form "
"failed. The "
":method:`Symfony\\\\Component\\\\Form\\\\FormInterface::isSynchronized` "
"method is only set to ``false`` if a data transformer throws an "
"exception::"
msgstr ""

#: ../../../form/unit_testing.rst:98
msgid ""
"Don't test the validation: it is applied by a listener that is not active"
" in the test case and it relies on validation configuration. Instead, "
"unit test your custom constraints directly."
msgstr ""

#: ../../../form/unit_testing.rst:102
msgid ""
"Next, verify the submission and mapping of the form. The test below "
"checks if all the fields are correctly specified::"
msgstr ""

#: ../../../form/unit_testing.rst:107
msgid ""
"Finally, check the creation of the ``FormView``. You should check if all "
"widgets you want to display are available in the children property::"
msgstr ""

#: ../../../form/unit_testing.rst:119
msgid ""
"Use :ref:`PHPUnit data providers <testing-data-providers>` to test "
"multiple form conditions using the same test code."
msgstr ""

#: ../../../form/unit_testing.rst:123
msgid "Testings Types from the Service Container"
msgstr ""

#: ../../../form/unit_testing.rst:125
msgid ""
"Your form may be used as a service, as it depends on other services (e.g."
" the Doctrine entity manager). In these cases, using the above code won't"
" work, as the Form component just instantiates the form type without "
"passing any arguments to the constructor."
msgstr ""

#: ../../../form/unit_testing.rst:130
msgid ""
"To solve this, you have to mock the injected dependencies, instantiate "
"your own form type and use the "
":class:`Symfony\\\\Component\\\\Form\\\\PreloadedExtension` to make sure "
"the ``FormRegistry`` uses the created instance::"
msgstr ""

#: ../../../form/unit_testing.rst:177
msgid "Adding Custom Extensions"
msgstr ""

#: ../../../form/unit_testing.rst:179
msgid ""
"It often happens that you use some options that are added by :doc:`form "
"extensions </form/create_form_type_extension>`. One of the cases may be "
"the ``ValidatorExtension`` with its ``invalid_message`` option. The "
"``TypeTestCase`` only loads the core form extension, which means an "
":class:`Symfony\\\\Component\\\\OptionsResolver\\\\Exception\\\\InvalidOptionsException`"
" will be raised if you try to test a class that depends on other "
"extensions. The "
":method:`Symfony\\\\Component\\\\Form\\\\Test\\\\TypeTestCase::getExtensions`"
" method allows you to return a list of extensions to register::"
msgstr ""

#: ../../../form/unit_testing.rst:214
msgid ""
"It is also possible to load custom form types, form type extensions or "
"type guessers using the "
":method:`Symfony\\\\Component\\\\Form\\\\Test\\\\FormIntegrationTestCase::getTypes`,"
" "
":method:`Symfony\\\\Component\\\\Form\\\\Test\\\\FormIntegrationTestCase::getTypeExtensions`"
" and "
":method:`Symfony\\\\Component\\\\Form\\\\Test\\\\FormIntegrationTestCase::getTypeGuessers`"
" methods."
msgstr ""

