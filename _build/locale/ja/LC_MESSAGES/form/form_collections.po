# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the Symfony Framework
# Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Symfony Framework Documentation \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-08 14:21+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../../form/form_collections.rst:5
msgid "How to Embed a Collection of Forms"
msgstr ""

#: ../../../form/form_collections.rst:7
msgid ""
"In this article, you'll learn how to create a form that embeds a "
"collection of many other forms. This could be useful, for example, if you"
" had a ``Task`` class and you wanted to edit/create/remove many ``Tag`` "
"objects related to that Task, right inside the same form."
msgstr ""

#: ../../../form/form_collections.rst:12
msgid "Let's start by creating a ``Task`` entity::"
msgstr ""

#: ../../../form/form_collections.rst:47
msgid ""
"The ``ArrayCollection`` is specific to Doctrine and is basically the same"
" as using an ``array`` (but it must be an ``ArrayCollection`` if you're "
"using Doctrine)."
msgstr ""

#: ../../../form/form_collections.rst:51
msgid ""
"Now, create a ``Tag`` class. As you saw above, a ``Task`` can have many "
"``Tag`` objects::"
msgstr ""

#: ../../../form/form_collections.rst:72
msgid ""
"Then, create a form class so that a ``Tag`` object can be modified by the"
" user::"
msgstr ""

#: ../../../form/form_collections.rst:97
msgid ""
"Next, let's create a form for the ``Task`` entity, using a "
":doc:`CollectionType </reference/forms/types/collection>` field of "
"``TagType`` forms. This will allow us to modify all the ``Tag`` elements "
"of a ``Task`` right inside the task form itself::"
msgstr ""

#: ../../../form/form_collections.rst:131
msgid "In your controller, you'll create a new form from the ``TaskType``::"
msgstr ""

#: ../../../form/form_collections.rst:172
msgid ""
"In the template, you can now iterate over the existing ``TagType`` forms "
"to render them:"
msgstr ""

#: ../../../form/form_collections.rst:194
msgid ""
"When the user submits the form, the submitted data for the ``tags`` field"
" is used to construct an ``ArrayCollection`` of ``Tag`` objects. The "
"collection is then set on the ``tag`` field of the ``Task`` and can be "
"accessed via ``$task->getTags()``."
msgstr ""

#: ../../../form/form_collections.rst:198
msgid ""
"So far, this works great, but only to edit *existing* tags. It doesn't "
"allow us yet to add new tags or delete existing ones."
msgstr ""

#: ../../../form/form_collections.rst:203
msgid ""
"You can embed nested collections as many levels down as you like. "
"However, if you use Xdebug, you may receive a ``Maximum function nesting "
"level of '100' reached, aborting!`` error. To fix this, increase the "
"``xdebug.max_nesting_level`` PHP setting, or render each form field by "
"hand using ``form_row()`` instead of rendering the whole form at once "
"(e.g ``form_widget(form)``)."
msgstr ""

#: ../../../form/form_collections.rst:212
msgid "Allowing \"new\" Tags with the \"Prototype\""
msgstr ""

#: ../../../form/form_collections.rst:214
msgid ""
"Previously you added two tags to your task in the controller. Now let the"
" users add as many tag forms as they need directly in the browser. This "
"requires a bit of JavaScript code."
msgstr ""

#: ../../../form/form_collections.rst:218
msgid ""
"But first, you need to let the form collection know that instead of "
"exactly two, it will receive an *unknown* number of tags. Otherwise, "
"you'll see a *\"This form should not contain extra fields\"* error. This "
"is done with the ``allow_add`` option::"
msgstr ""

#: ../../../form/form_collections.rst:239
msgid ""
"The ``allow_add`` option also makes a ``prototype`` variable available to"
" you. This \"prototype\" is a little \"template\" that contains all the "
"HTML needed to dynamically create any new \"tag\" forms with JavaScript. "
"To render the prototype, add the following ``data-prototype`` attribute "
"to the existing ``<ul>`` in your template:"
msgstr ""

#: ../../../form/form_collections.rst:248
msgid "On the rendered page, the result will look something like this:"
msgstr ""

#: ../../../form/form_collections.rst:256
msgid ""
"If you want to customize the HTML code in the prototype, see :ref:`form-"
"custom-prototype`."
msgstr ""

#: ../../../form/form_collections.rst:261
msgid ""
"The ``form.tags.vars.prototype`` is a form element that looks and feels "
"just like the individual ``form_widget(tag)`` elements inside your "
"``for`` loop. This means that you can call ``form_widget()``, "
"``form_row()`` or ``form_label()`` on it. You could even choose to render"
" only one of its fields (e.g. the ``name`` field):"
msgstr ""

#: ../../../form/form_collections.rst:273
msgid ""
"If you render your whole \"tags\" sub-form at once (e.g. "
"``form_row(form.tags)``), the ``data-prototype`` attribute is "
"automatically added to the containing ``div``, and you need to adjust the"
" following JavaScript accordingly."
msgstr ""

#: ../../../form/form_collections.rst:277
msgid ""
"The goal of this section will be to use JavaScript to read this attribute"
" and dynamically add new tag forms when the user clicks a \"Add a tag\" "
"link. This example uses jQuery and assumes you have it included somewhere"
" on your page."
msgstr ""

#: ../../../form/form_collections.rst:281
msgid ""
"Add a ``script`` tag somewhere on your page so you can start writing some"
" JavaScript."
msgstr ""

#: ../../../form/form_collections.rst:283
msgid ""
"First, add a link to the bottom of the \"tags\" list via JavaScript. "
"Second, bind to the \"click\" event of that link so you can add a new tag"
" form (``addTagForm()`` will be show next):"
msgstr ""

#: ../../../form/form_collections.rst:312
msgid ""
"The ``addTagForm()`` function's job will be to use the ``data-prototype``"
" attribute to dynamically add a new form when this link is clicked. The "
"``data-prototype`` HTML contains the tag ``text`` input element with a "
"name of ``task[tags][__name__][name]`` and id of "
"``task_tags___name___name``. The ``__name__`` is a little "
"\"placeholder\", which you'll replace with a unique, incrementing number "
"(e.g. ``task[tags][3][name]``)."
msgstr ""

#: ../../../form/form_collections.rst:318
msgid ""
"The actual code needed to make this all work can vary quite a bit, but "
"here's one example:"
msgstr ""

#: ../../../form/form_collections.rst:350
msgid ""
"It is better to separate your JavaScript in real JavaScript files than to"
" write it inside the HTML as is done here."
msgstr ""

#: ../../../form/form_collections.rst:353
msgid ""
"Now, each time a user clicks the ``Add a tag`` link, a new sub form will "
"appear on the page. When the form is submitted, any new tag forms will be"
" converted into new ``Tag`` objects and added to the ``tags`` property of"
" the ``Task`` object."
msgstr ""

#: ../../../form/form_collections.rst:359
msgid "You can find a working example in this `JSFiddle`_."
msgstr ""

#: ../../../form/form_collections.rst:361
msgid ""
"To make handling these new tags easier, add an \"adder\" and a "
"\"remover\" method for the tags in the ``Task`` class::"
msgstr ""

#: ../../../form/form_collections.rst:383
msgid ""
"Next, add a ``by_reference`` option to the ``tags`` field and set it to "
"``false``::"
msgstr ""

#: ../../../form/form_collections.rst:398
msgid ""
"With these two changes, when the form is submitted, each new ``Tag`` "
"object is added to the ``Task`` class by calling the ``addTag()`` method."
" Before this change, they were added internally by the form by calling "
"``$task->getTags()->add($tag)``. That was just fine, but forcing the use "
"of the \"adder\" method makes handling these new ``Tag`` objects easier "
"(especially if you're using Doctrine, which you will learn about next!)."
msgstr ""

#: ../../../form/form_collections.rst:407
msgid ""
"You have to create **both** ``addTag()`` and ``removeTag()`` methods, "
"otherwise the form will still use ``setTag()`` even if ``by_reference`` "
"is ``false``. You'll learn more about the ``removeTag()`` method later in"
" this article."
msgstr ""

#: ../../../form/form_collections.rst:413
msgid ""
"Symfony can only make the plural-to-singular conversion (e.g. from the "
"``tags`` property to the ``addTag()`` method) for English words. Code "
"written in any other language won't work as expected."
msgstr ""

#: ../../../form/form_collections.rst
msgid "Doctrine: Cascading Relations and saving the \"Inverse\" side"
msgstr ""

#: ../../../form/form_collections.rst:419
msgid ""
"To save the new tags with Doctrine, you need to consider a couple more "
"things. First, unless you iterate over all of the new ``Tag`` objects and"
" call ``$entityManager->persist($tag)`` on each, you'll receive an error "
"from Doctrine:"
msgstr ""

#: ../../../form/form_collections.rst:424
msgid ""
"A new entity was found through the relationship "
"``App\\Entity\\Task#tags`` that was not configured to cascade persist "
"operations for entity..."
msgstr ""

#: ../../../form/form_collections.rst:428
msgid ""
"To fix this, you may choose to \"cascade\" the persist operation "
"automatically from the ``Task`` object to any related tags. To do this, "
"add the ``cascade`` option to your ``ManyToMany`` metadata:"
msgstr ""

#: ../../../form/form_collections.rst:475
msgid ""
"A second potential issue deals with the `Owning Side and Inverse Side`_ "
"of Doctrine relationships. In this example, if the \"owning\" side of the"
" relationship is \"Task\", then persistence will work fine as the tags "
"are properly added to the Task. However, if the owning side is on "
"\"Tag\", then you'll need to do a little bit more work to ensure that the"
" correct side of the relationship is modified."
msgstr ""

#: ../../../form/form_collections.rst:482
msgid ""
"The trick is to make sure that the single \"Task\" is set on each "
"\"Tag\". One way to do this is to add some extra logic to ``addTag()``, "
"which is called by the form type since ``by_reference`` is set to "
"``false``::"
msgstr ""

#: ../../../form/form_collections.rst:500
msgid ""
"If you're going for ``addTask()``, make sure you have an appropriate "
"method that looks something like this::"
msgstr ""

#: ../../../form/form_collections.rst:516
msgid "Allowing Tags to be Removed"
msgstr ""

#: ../../../form/form_collections.rst:518
msgid ""
"The next step is to allow the deletion of a particular item in the "
"collection. The solution is similar to allowing tags to be added."
msgstr ""

#: ../../../form/form_collections.rst:521
msgid "Start by adding the ``allow_delete`` option in the form Type::"
msgstr ""

#: ../../../form/form_collections.rst:536
msgid ""
"Now, you need to put some code into the ``removeTag()`` method of "
"``Task``::"
msgstr ""

#: ../../../form/form_collections.rst:552
msgid "Template Modifications"
msgstr ""

#: ../../../form/form_collections.rst:554
msgid ""
"The ``allow_delete`` option means that if an item of a collection isn't "
"sent on submission, the related data is removed from the collection on "
"the server. In order for this to work in an HTML form, you must remove "
"the DOM element for the collection item to be removed, before submitting "
"the form."
msgstr ""

#: ../../../form/form_collections.rst:560
msgid "First, add a \"delete this tag\" link to each tag form:"
msgstr ""

#: ../../../form/form_collections.rst:583
msgid "The ``addTagFormDeleteLink()`` function will look something like this:"
msgstr ""

#: ../../../form/form_collections.rst:597
msgid ""
"When a tag form is removed from the DOM and submitted, the removed "
"``Tag`` object will not be included in the collection passed to "
"``setTags()``. Depending on your persistence layer, this may or may not "
"be enough to actually remove the relationship between the removed ``Tag``"
" and ``Task`` object."
msgstr ""

#: ../../../form/form_collections.rst
msgid "Doctrine: Ensuring the database persistence"
msgstr ""

#: ../../../form/form_collections.rst:604
msgid ""
"When removing objects in this way, you may need to do a little bit more "
"work to ensure that the relationship between the ``Task`` and the removed"
" ``Tag`` is properly removed."
msgstr ""

#: ../../../form/form_collections.rst:608
msgid ""
"In Doctrine, you have two sides of the relationship: the owning side and "
"the inverse side. Normally in this case you'll have a many-to-one "
"relationship and the deleted tags will disappear and persist correctly "
"(adding new tags also works effortlessly)."
msgstr ""

#: ../../../form/form_collections.rst:613
msgid ""
"But if you have a one-to-many relationship or a many-to-many relationship"
" with a ``mappedBy`` on the Task entity (meaning Task is the \"inverse\" "
"side), you'll need to do more work for the removed tags to persist "
"correctly."
msgstr ""

#: ../../../form/form_collections.rst:617
msgid ""
"In this case, you can modify the controller to remove the relationship on"
" the removed tag. This assumes that you have some ``edit()`` action which"
" is handling the \"update\" of your Task::"
msgstr ""

#: ../../../form/form_collections.rst:670
msgid ""
"As you can see, adding and removing the elements correctly can be tricky."
" Unless you have a many-to-many relationship where Task is the \"owning\""
" side, you'll need to do extra work to make sure that the relationship is"
" properly updated (whether you're adding new tags or removing existing "
"tags) on each Tag object itself."
msgstr ""

#: ../../../form/form_collections.rst:678
msgid ""
"The Symfony community has created some JavaScript packages that provide "
"the functionality needed to add, edit and delete elements of the "
"collection. Check out the `@a2lix/symfony-collection`_ package for modern"
" browsers and the `symfony-collection`_ package based on jQuery for the "
"rest of browsers."
msgstr ""

