# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the Symfony Framework
# Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Symfony Framework Documentation \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-08 14:21+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../../http_cache/validation.rst:5
msgid "HTTP Cache Validation"
msgstr ""

#: ../../../http_cache/validation.rst:7
msgid ""
"When a resource needs to be updated as soon as a change is made to the "
"underlying data, the expiration model falls short. With the `expiration "
"model`_, the application won't be asked to return the updated response "
"until the cache finally becomes stale."
msgstr ""

#: ../../../http_cache/validation.rst:12
msgid ""
"The validation model addresses this issue. Under this model, the cache "
"continues to store responses. The difference is that, for each request, "
"the cache asks the application if the cached response is still valid or "
"if it needs to be regenerated. If the cache *is* still valid, your "
"application should return a 304 status code and no content. This tells "
"the cache that it's OK to return the cached response."
msgstr ""

#: ../../../http_cache/validation.rst:18
msgid ""
"Under this model, you only save CPU if you're able to determine that the "
"cached response is still valid by doing *less* work than generating the "
"whole page again (see below for an implementation example)."
msgstr ""

#: ../../../http_cache/validation.rst:24
msgid ""
"The 304 status code means \"Not Modified\". It's important because with "
"this status code the response does *not* contain the actual content being"
" requested. Instead, the response only consists of the response headers "
"that tells the cache that it can use its stored version of the content."
msgstr ""

#: ../../../http_cache/validation.rst:29
msgid ""
"Like with expiration, there are two different HTTP headers that can be "
"used to implement the validation model: ``ETag`` and ``Last-Modified``."
msgstr ""

#: ../../../http_cache/validation.rst
msgid "Expiration and Validation"
msgstr ""

#: ../../../http_cache/_expiration-and-validation.rst.inc:3
msgid ""
"You can use both validation and expiration within the same ``Response``. "
"As expiration wins over validation, you can benefit from the best of both"
" worlds. In other words, by using both expiration and validation, you can"
" instruct the cache to serve the cached content, while checking back at "
"some interval (the expiration) to verify that the content is still valid."
msgstr ""

#: ../../../http_cache/_expiration-and-validation.rst.inc:11
msgid ""
"You can also define HTTP caching headers for expiration and validation by"
" using annotations. See the `FrameworkExtraBundle documentation`_."
msgstr ""

#: ../../../http_cache/validation.rst:39
msgid "Validation with the ``ETag`` Header"
msgstr ""

#: ../../../http_cache/validation.rst:41
msgid ""
"The `HTTP ETag`_ (\"entity-tag\") header is an optional HTTP header whose"
" value is an arbitrary string that uniquely identifies one representation"
" of the target resource. It's entirely generated and set by your "
"application so that you can tell, for example, if the ``/about`` resource"
" that's stored by the cache is up-to-date with what your application "
"would return."
msgstr ""

#: ../../../http_cache/validation.rst:47
msgid ""
"An ``ETag`` is like a fingerprint and is used to quickly compare if two "
"different versions of a resource are equivalent. Like fingerprints, each "
"``ETag`` must be unique across all representations of the same resource."
msgstr ""

#: ../../../http_cache/validation.rst:51
msgid ""
"To see a simple implementation, generate the ``ETag`` as the ``md5`` of "
"the content::"
msgstr ""

#: ../../../http_cache/validation.rst:73
msgid ""
"The "
":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Response::isNotModified`"
" method compares the ``If-None-Match`` header with the ``ETag`` response "
"header. If the two match, the method automatically sets the ``Response`` "
"status code to 304."
msgstr ""

#: ../../../http_cache/validation.rst:80
msgid ""
"When using ``mod_deflate`` or ``mod_brotli`` in Apache 2.4, the original "
"``ETag`` value is modified (e.g. if ``ETag`` was ``foo``, Apache turns it"
" into ``foo-gzip`` or ``foo-br``), which breaks the ``ETag``-based "
"validation."
msgstr ""

#: ../../../http_cache/validation.rst:84
msgid ""
"You can control this behavior with the `DeflateAlterETag`_ and "
"`BrotliAlterETag`_ directives. Alternatively, you can use the following "
"Apache configuration to keep both the original ``ETag`` and the modified "
"one when compressing responses:"
msgstr ""

#: ../../../http_cache/validation.rst:94
msgid ""
"The cache sets the ``If-None-Match`` header on the request to the "
"``ETag`` of the original cached response before sending the request back "
"to the app. This is how the cache and server communicate with each other "
"and decide whether or not the resource has been updated since it was "
"cached."
msgstr ""

#: ../../../http_cache/validation.rst:99
msgid ""
"This algorithm is simple enough and very generic, but you need to create "
"the whole ``Response`` before being able to compute the ``ETag``, which "
"is sub-optimal. In other words, it saves on bandwidth, but not CPU "
"cycles."
msgstr ""

#: ../../../http_cache/validation.rst:103
msgid ""
"In the :ref:`optimizing-cache-validation` section, you'll see how "
"validation can be used more intelligently to determine the validity of a "
"cache without doing so much work."
msgstr ""

#: ../../../http_cache/validation.rst:109
msgid ""
"Symfony also supports weak ``ETag``s by passing ``true`` as the second "
"argument to the "
":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Response::setEtag` "
"method."
msgstr ""

#: ../../../http_cache/validation.rst:118
msgid "Validation with the ``Last-Modified`` Header"
msgstr ""

#: ../../../http_cache/validation.rst:120
msgid ""
"The ``Last-Modified`` header is the second form of validation. According "
"to the HTTP specification, \"The ``Last-Modified`` header field indicates"
" the date and time at which the origin server believes the representation"
" was last modified.\" In other words, the application decides whether or "
"not the cached content has been updated based on whether or not it's been"
" updated since the response was cached."
msgstr ""

#: ../../../http_cache/validation.rst:127
msgid ""
"For instance, you can use the latest update date for all the objects "
"needed to compute the resource representation as the value for the "
"``Last-Modified`` header value::"
msgstr ""

#: ../../../http_cache/validation.rst:165
msgid ""
"The "
":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Response::isNotModified`"
" method compares the ``If-Modified-Since`` header with the ``Last-"
"Modified`` response header. If they are equivalent, the ``Response`` will"
" be set to a 304 status code."
msgstr ""

#: ../../../http_cache/validation.rst:172
msgid ""
"The cache sets the ``If-Modified-Since`` header on the request to the "
"``Last-Modified`` of the original cached response before sending the "
"request back to the app. This is how the cache and server communicate "
"with each other and decide whether or not the resource has been updated "
"since it was cached."
msgstr ""

#: ../../../http_cache/validation.rst:184
msgid "Optimizing your Code with Validation"
msgstr ""

#: ../../../http_cache/validation.rst:186
msgid ""
"The main goal of any caching strategy is to lighten the load on the "
"application. Put another way, the less you do in your application to "
"return a 304 response, the better. The ``Response::isNotModified()`` "
"method does exactly that by exposing a simple and efficient pattern::"
msgstr ""

#: ../../../http_cache/validation.rst:233
msgid ""
"When the ``Response`` is not modified, the ``isNotModified()`` "
"automatically sets the response status code to ``304``, removes the "
"content, and removes some headers that must not be present for ``304`` "
"responses (see "
":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Response::setNotModified`)."
msgstr ""

