# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the Symfony Framework
# Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Symfony Framework Documentation \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-08 14:21+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../../bundles/prepend_extension.rst:6
msgid "How to Simplify Configuration of Multiple Bundles"
msgstr ""

#: ../../../bundles/prepend_extension.rst:8
msgid ""
"When building reusable and extensible applications, developers are often "
"faced with a choice: either create a single large bundle or multiple "
"smaller bundles. Creating a single bundle has the drawback that it's "
"impossible for users to choose to remove functionality they are not "
"using. Creating multiple bundles has the drawback that configuration "
"becomes more tedious and settings often need to be repeated for various "
"bundles."
msgstr ""

#: ../../../bundles/prepend_extension.rst:15
msgid ""
"It is possible to remove the disadvantage of the multiple bundle approach"
" by enabling a single Extension to prepend the settings for any bundle. "
"It can use the settings defined in the ``config/*`` files to prepend "
"settings just as if they had been written explicitly by the user in the "
"application configuration."
msgstr ""

#: ../../../bundles/prepend_extension.rst:20
msgid ""
"For example, this could be used to configure the entity manager name to "
"use in multiple bundles. Or it can be used to enable an optional feature "
"that depends on another bundle being loaded as well."
msgstr ""

#: ../../../bundles/prepend_extension.rst:24
msgid ""
"To give an Extension the power to do this, it needs to implement "
":class:`Symfony\\\\Component\\\\DependencyInjection\\\\Extension\\\\PrependExtensionInterface`::"
msgstr ""

#: ../../../bundles/prepend_extension.rst:44
msgid ""
"Inside the "
":method:`Symfony\\\\Component\\\\DependencyInjection\\\\Extension\\\\PrependExtensionInterface::prepend`"
" method, developers have full access to the "
":class:`Symfony\\\\Component\\\\DependencyInjection\\\\ContainerBuilder` "
"instance just before the "
":method:`Symfony\\\\Component\\\\DependencyInjection\\\\Extension\\\\ExtensionInterface::load`"
" method is called on each of the registered bundle Extensions. In order "
"to prepend settings to a bundle extension developers can use the "
":method:`Symfony\\\\Component\\\\DependencyInjection\\\\ContainerBuilder::prependExtensionConfig`"
" method on the "
":class:`Symfony\\\\Component\\\\DependencyInjection\\\\ContainerBuilder` "
"instance. As this method only prepends settings, any other settings done "
"explicitly inside the ``config/*`` files would override these prepended "
"settings."
msgstr ""

#: ../../../bundles/prepend_extension.rst:54
msgid ""
"The following example illustrates how to prepend a configuration setting "
"in multiple bundles as well as disable a flag in multiple bundles in case"
" a specific other bundle is not registered::"
msgstr ""

#: ../../../bundles/prepend_extension.rst:97
msgid ""
"The above would be the equivalent of writing the following into the "
"``config/packages/acme_something.yaml`` in case AcmeGoodbyeBundle is not "
"registered and the ``entity_manager_name`` setting for ``acme_hello`` is "
"set to ``non_default``:"
msgstr ""

#: ../../../bundles/prepend_extension.rst:154
msgid "More than one Bundle using PrependExtensionInterface"
msgstr ""

#: ../../../bundles/prepend_extension.rst:156
msgid ""
"If there is more than one bundle that prepends the same extension and "
"defines the same key, the bundle that is registered **first** will take "
"priority: next bundles won't override this specific config setting."
msgstr ""

