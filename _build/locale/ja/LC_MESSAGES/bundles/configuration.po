# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the Symfony Framework
# Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Symfony Framework Documentation \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-08 14:21+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../../bundles/configuration.rst:6
msgid "How to Create Friendly Configuration for a Bundle"
msgstr ""

#: ../../../bundles/configuration.rst:8
msgid ""
"If you open your main application configuration directory (usually "
"``config/packages/``), you'll see a number of different files, such as "
"``framework.yaml``, ``twig.yaml`` and ``doctrine.yaml``. Each of these "
"configures a specific bundle, allowing you to define options at a high "
"level and then let the bundle make all the low-level, complex changes "
"based on your settings."
msgstr ""

#: ../../../bundles/configuration.rst:15
msgid ""
"For example, the following configuration tells the FrameworkBundle to "
"enable the form integration, which involves the definition of quite a few"
" services as well as integration of other related components:"
msgstr ""

#: ../../../bundles/configuration.rst:48
msgid "Using the Bundle Extension"
msgstr ""

#: ../../../bundles/configuration.rst:50
msgid ""
"Imagine you are creating a new bundle - AcmeSocialBundle - which provides"
" integration with Twitter. To make your bundle configurable to the user, "
"you can add some configuration that looks like this:"
msgstr ""

#: ../../../bundles/configuration.rst:91
msgid ""
"The basic idea is that instead of having the user override individual "
"parameters, you let the user configure just a few, specifically created, "
"options. As the bundle developer, you then parse through that "
"configuration and load correct services and parameters inside an "
"\"Extension\" class."
msgstr ""

#: ../../../bundles/configuration.rst:98
msgid ""
"The root key of your bundle configuration (``acme_social`` in the "
"previous example) is automatically determined from your bundle name (it's"
" the `snake case`_ of the bundle name without the ``Bundle`` suffix )."
msgstr ""

#: ../../../bundles/configuration.rst:104
msgid "Read more about the extension in :doc:`/bundles/extension`."
msgstr ""

#: ../../../bundles/configuration.rst:108
msgid ""
"If a bundle provides an Extension class, then you should *not* generally "
"override any service container parameters from that bundle. The idea is "
"that if an Extension class is present, every setting that should be "
"configurable should be present in the configuration made available by "
"that class. In other words, the extension class defines all the public "
"configuration settings for which backward compatibility will be "
"maintained."
msgstr ""

#: ../../../bundles/configuration.rst:117
msgid ""
"For parameter handling within a dependency injection container see "
":doc:`/configuration/using_parameters_in_dic`."
msgstr ""

#: ../../../bundles/configuration.rst:121
msgid "Processing the ``$configs`` Array"
msgstr ""

#: ../../../bundles/configuration.rst:123
msgid ""
"First things first, you have to create an extension class as explained in"
" :doc:`/bundles/extension`."
msgstr ""

#: ../../../bundles/configuration.rst:126
msgid ""
"Whenever a user includes the ``acme_social`` key (which is the DI alias) "
"in a configuration file, the configuration under it is added to an array "
"of configurations and passed to the ``load()`` method of your extension "
"(Symfony automatically converts XML and YAML to an array)."
msgstr ""

#: ../../../bundles/configuration.rst:131
msgid ""
"For the configuration example in the previous section, the array passed "
"to your ``load()`` method will look like this::"
msgstr ""

#: ../../../bundles/configuration.rst:143
msgid ""
"Notice that this is an *array of arrays*, not just a single flat array of"
" the configuration values. This is intentional, as it allows Symfony to "
"parse several configuration resources. For example, if ``acme_social`` "
"appears in another configuration file - say "
"``config/packages/dev/acme_social.yaml`` - with different values beneath "
"it, the incoming array might look like this::"
msgstr ""

#: ../../../bundles/configuration.rst:165
msgid "The order of the two arrays depends on which one is set first."
msgstr ""

#: ../../../bundles/configuration.rst:167
msgid ""
"But don't worry! Symfony's Config component will help you merge these "
"values, provide defaults and give the user validation errors on bad "
"configuration. Here's how it works. Create a ``Configuration`` class in "
"the ``DependencyInjection`` directory and build a tree that defines the "
"structure of your bundle's configuration."
msgstr ""

#: ../../../bundles/configuration.rst:173
msgid ""
"The ``Configuration`` class to handle the sample configuration looks "
"like::"
msgstr ""

#: ../../../bundles/configuration.rst:204
msgid ""
"The ``Configuration`` class can be much more complicated than shown here,"
" supporting \"prototype\" nodes, advanced validation, XML-specific "
"normalization and advanced merging. You can read more about this in "
":doc:`the Config component documentation "
"</components/config/definition>`. You can also see it in action by "
"checking out some core Configuration classes, such as the one from the "
"`FrameworkBundle Configuration`_ or the `TwigBundle Configuration`_."
msgstr ""

#: ../../../bundles/configuration.rst:212
msgid ""
"This class can now be used in your ``load()`` method to merge "
"configurations and force validation (e.g. if an additional option was "
"passed, an exception will be thrown)::"
msgstr ""

#: ../../../bundles/configuration.rst:227
msgid ""
"The ``processConfiguration()`` method uses the configuration tree you've "
"defined in the ``Configuration`` class to validate, normalize and merge "
"all the configuration arrays together."
msgstr ""

#: ../../../bundles/configuration.rst:231
msgid ""
"Now, you can use the ``$config`` variable to modify a service provided by"
" your bundle. For example, imagine your bundle has the following example "
"config:"
msgstr ""

#: ../../../bundles/configuration.rst:251
msgid "In your extension, you can load this and dynamically set its arguments::"
msgstr ""

#: ../../../bundles/configuration.rst:274
msgid ""
"Instead of calling ``processConfiguration()`` in your extension each time"
" you provide some configuration options, you might want to use the "
":class:`Symfony\\\\Component\\\\HttpKernel\\\\DependencyInjection\\\\ConfigurableExtension`"
" to do this automatically for you::"
msgstr ""

#: ../../../bundles/configuration.rst:294
msgid ""
"This class uses the ``getConfiguration()`` method to get the "
"Configuration instance."
msgstr ""

#: ../../../bundles/configuration.rst
msgid "Processing the Configuration yourself"
msgstr ""

#: ../../../bundles/configuration.rst:299
msgid ""
"Using the Config component is fully optional. The ``load()`` method gets "
"an array of configuration values. You can instead parse these arrays "
"yourself (e.g. by overriding configurations and using "
":phpfunction:`isset` to check for the existence of a value). Be aware "
"that it'll be very hard to support XML::"
msgstr ""

#: ../../../bundles/configuration.rst:316
msgid "Modifying the Configuration of Another Bundle"
msgstr ""

#: ../../../bundles/configuration.rst:318
msgid ""
"If you have multiple bundles that depend on each other, it may be useful "
"to allow one ``Extension`` class to modify the configuration passed to "
"another bundle's ``Extension`` class. This can be achieved using a "
"prepend extension. For more details, see "
":doc:`/bundles/prepend_extension`."
msgstr ""

#: ../../../bundles/configuration.rst:324
msgid "Dump the Configuration"
msgstr ""

#: ../../../bundles/configuration.rst:326
msgid ""
"The ``config:dump-reference`` command dumps the default configuration of "
"a bundle in the console using the Yaml format."
msgstr ""

#: ../../../bundles/configuration.rst:329
msgid ""
"As long as your bundle's configuration is located in the standard "
"location (``YourBundle\\DependencyInjection\\Configuration``) and does "
"not have a constructor it will work automatically. If you have something "
"different, your ``Extension`` class must override the "
":method:`Extension::getConfiguration() "
"<Symfony\\\\Component\\\\HttpKernel\\\\DependencyInjection\\\\Extension::getConfiguration>`"
" method and return an instance of your ``Configuration``."
msgstr ""

#: ../../../bundles/configuration.rst:337
msgid "Supporting XML"
msgstr ""

#: ../../../bundles/configuration.rst:339
msgid ""
"Symfony allows people to provide the configuration in three different "
"formats: Yaml, XML and PHP. Both Yaml and PHP use the same syntax and are"
" supported by default when using the Config component. Supporting XML "
"requires you to do some more things. But when sharing your bundle with "
"others, it is recommended that you follow these steps."
msgstr ""

#: ../../../bundles/configuration.rst:346
msgid "Make your Config Tree ready for XML"
msgstr ""

#: ../../../bundles/configuration.rst:348
msgid ""
"The Config component provides some methods by default to allow it to "
"correctly process XML configuration. See \":ref:`component-config-"
"normalization`\" of the component documentation. However, you can do some"
" optional things as well, this will improve the experience of using XML "
"configuration:"
msgstr ""

#: ../../../bundles/configuration.rst:354
msgid "Choosing an XML Namespace"
msgstr ""

#: ../../../bundles/configuration.rst:356
msgid ""
"In XML, the `XML namespace`_ is used to determine which elements belong "
"to the configuration of a specific bundle. The namespace is returned from"
" the :method:`Extension::getNamespace() "
"<Symfony\\\\Component\\\\DependencyInjection\\\\Extension\\\\Extension::getNamespace>`"
" method. By convention, the namespace is a URL (it doesn't have to be a "
"valid URL nor does it need to exists). By default, the namespace for a "
"bundle is ``http://example.org/schema/dic/DI_ALIAS``, where ``DI_ALIAS`` "
"is the DI alias of the extension. You might want to change this to a more"
" professional URL::"
msgstr ""

#: ../../../bundles/configuration.rst:378
msgid "Providing an XML Schema"
msgstr ""

#: ../../../bundles/configuration.rst:380
msgid ""
"XML has a very useful feature called `XML schema`_. This allows you to "
"describe all possible elements and attributes and their values in an XML "
"Schema Definition (an XSD file). This XSD file is used by IDEs for auto "
"completion and it is used by the Config component to validate the "
"elements."
msgstr ""

#: ../../../bundles/configuration.rst:385
msgid ""
"In order to use the schema, the XML configuration file must provide an "
"``xsi:schemaLocation`` attribute pointing to the XSD file for a certain "
"XML namespace. This location always starts with the XML namespace. This "
"XML namespace is then replaced with the XSD validation base path returned"
" from :method:`Extension::getXsdValidationBasePath() "
"<Symfony\\\\Component\\\\DependencyInjection\\\\Extension\\\\ExtensionInterface::getXsdValidationBasePath>`"
" method. This namespace is then followed by the rest of the path from the"
" base path to the file itself."
msgstr ""

#: ../../../bundles/configuration.rst:393
msgid ""
"By convention, the XSD file lives in the ``Resources/config/schema/``, "
"but you can place it anywhere you like. You should return this path as "
"the base path::"
msgstr ""

#: ../../../bundles/configuration.rst:409
msgid ""
"Assuming the XSD file is called ``hello-1.0.xsd``, the schema location "
"will be ``https://acme_company.com/schema/dic/hello/hello-1.0.xsd``:"
msgstr ""

