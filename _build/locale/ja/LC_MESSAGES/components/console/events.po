# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the Symfony Framework
# Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Symfony Framework Documentation \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-08 14:21+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../../components/console/events.rst:5
msgid "Using Events"
msgstr ""

#: ../../../components/console/events.rst:7
msgid ""
"The Application class of the Console component allows you to optionally "
"hook into the lifecycle of a console application via events. Instead of "
"reinventing the wheel, it uses the Symfony EventDispatcher component to "
"do the work::"
msgstr ""

#: ../../../components/console/events.rst:22
msgid ""
"Console events are only triggered by the main command being executed. "
"Commands called by the main command will not trigger any event."
msgstr ""

#: ../../../components/console/events.rst:26
msgid "The ``ConsoleEvents::COMMAND`` Event"
msgstr ""

#: ../../../components/console/events.rst:28
msgid ""
"**Typical Purposes**: Doing something before any command is run (like "
"logging which command is going to be executed), or displaying something "
"about the event to be executed."
msgstr ""

#: ../../../components/console/events.rst:32
msgid ""
"Just before executing any command, the ``ConsoleEvents::COMMAND`` event "
"is dispatched. Listeners receive a "
":class:`Symfony\\\\Component\\\\Console\\\\Event\\\\ConsoleCommandEvent` "
"event::"
msgstr ""

#: ../../../components/console/events.rst:57
msgid "Disable Commands inside Listeners"
msgstr ""

#: ../../../components/console/events.rst:59
msgid ""
"Using the "
":method:`Symfony\\\\Component\\\\Console\\\\Event\\\\ConsoleCommandEvent::disableCommand`"
" method, you can disable a command inside a listener. The application "
"will then *not* execute the command, but instead will return the code "
"``113`` (defined in ``ConsoleCommandEvent::RETURN_CODE_DISABLED``). This "
"code is one of the `reserved exit codes`_ for console commands that "
"conform with the C/C++ standard::"
msgstr ""

#: ../../../components/console/events.rst:87
msgid "The ``ConsoleEvents::ERROR`` Event"
msgstr ""

#: ../../../components/console/events.rst:89
msgid ""
"**Typical Purposes**: Handle exceptions thrown during the execution of a "
"command."
msgstr ""

#: ../../../components/console/events.rst:92
msgid ""
"Whenever an exception is thrown by a command, including those triggered "
"from event listeners, the ``ConsoleEvents::ERROR`` event is dispatched. A"
" listener can wrap or change the exception or do anything useful before "
"the exception is thrown by the application."
msgstr ""

#: ../../../components/console/events.rst:97
msgid ""
"Listeners receive a "
":class:`Symfony\\\\Component\\\\Console\\\\Event\\\\ConsoleErrorEvent` "
"event::"
msgstr ""

#: ../../../components/console/events.rst:120
msgid "The ``ConsoleEvents::TERMINATE`` Event"
msgstr ""

#: ../../../components/console/events.rst:122
msgid ""
"**Typical Purposes**: To perform some cleanup actions after the command "
"has been executed."
msgstr ""

#: ../../../components/console/events.rst:125
msgid ""
"After the command has been executed, the ``ConsoleEvents::TERMINATE`` "
"event is dispatched. It can be used to do any actions that need to be "
"executed for all commands or to cleanup what you initiated in a "
"``ConsoleEvents::COMMAND`` listener (like sending logs, closing a "
"database connection, sending emails, ...). A listener might also change "
"the exit code."
msgstr ""

#: ../../../components/console/events.rst:131
msgid ""
"Listeners receive a "
":class:`Symfony\\\\Component\\\\Console\\\\Event\\\\ConsoleTerminateEvent`"
" event::"
msgstr ""

#: ../../../components/console/events.rst:153
msgid ""
"This event is also dispatched when an exception is thrown by the command."
" It is then dispatched just after the ``ConsoleEvents::ERROR`` event. The"
" exit code received in this case is the exception code."
msgstr ""

