# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the Symfony Framework
# Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Symfony Framework Documentation \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-08 14:21+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../../components/validator/resources.rst:5
msgid "Loading Resources"
msgstr ""

#: ../../../components/validator/resources.rst:7
msgid ""
"The Validator component uses metadata to validate a value. This metadata "
"defines how a class, array or any other value should be validated. When "
"validating a class, the metadata is defined by the class itself. When "
"validating simple values, the metadata must be passed to the validation "
"methods."
msgstr ""

#: ../../../components/validator/resources.rst:12
msgid ""
"Class metadata can be defined in a configuration file or in the class "
"itself. The Validator component collects that metadata using a set of "
"loaders."
msgstr ""

#: ../../../components/validator/resources.rst:17
msgid "You'll learn how to define the metadata in :doc:`metadata`."
msgstr ""

#: ../../../components/validator/resources.rst:20
msgid "The StaticMethodLoader"
msgstr ""

#: ../../../components/validator/resources.rst:22
msgid ""
"The most basic loader is the "
":class:`Symfony\\\\Component\\\\Validator\\\\Mapping\\\\Loader\\\\StaticMethodLoader`."
" This loader gets the metadata by calling a static method of the class. "
"The name of the method is configured using the "
":method:`Symfony\\\\Component\\\\Validator\\\\ValidatorBuilder::addMethodMapping`"
" method of the validator builder::"
msgstr ""

#: ../../../components/validator/resources.rst:35
msgid ""
"In this example, the validation metadata is retrieved executing the "
"``loadValidatorMetadata()`` method of the class::"
msgstr ""

#: ../../../components/validator/resources.rst:57
msgid ""
"Instead of calling ``addMethodMapping()`` multiple times to add several "
"method names, you can also use "
":method:`Symfony\\\\Component\\\\Validator\\\\ValidatorBuilder::addMethodMappings`"
" to set an array of supported method names."
msgstr ""

#: ../../../components/validator/resources.rst:63
msgid "The File Loaders"
msgstr ""

#: ../../../components/validator/resources.rst:65
msgid ""
"The component also provides two file loaders, one to load YAML files and "
"one to load XML files. Use "
":method:`Symfony\\\\Component\\\\Validator\\\\ValidatorBuilder::addYamlMapping`"
" or "
":method:`Symfony\\\\Component\\\\Validator\\\\ValidatorBuilder::addXmlMapping`"
" to configure the locations of these files::"
msgstr ""

#: ../../../components/validator/resources.rst:79
msgid ""
"If you want to load YAML mapping files then you will also need to install"
" :doc:`the Yaml component </components/yaml>`."
msgstr ""

#: ../../../components/validator/resources.rst:84
msgid ""
"Just like with the method mappings, you can also use "
":method:`Symfony\\\\Component\\\\Validator\\\\ValidatorBuilder::addYamlMappings`"
" and "
":method:`Symfony\\\\Component\\\\Validator\\\\ValidatorBuilder::addXmlMappings`"
" to configure an array of file paths."
msgstr ""

#: ../../../components/validator/resources.rst:90
msgid "The AnnotationLoader"
msgstr ""

#: ../../../components/validator/resources.rst:92
msgid ""
"At last, the component provides an "
":class:`Symfony\\\\Component\\\\Validator\\\\Mapping\\\\Loader\\\\AnnotationLoader`"
" to get the metadata from the annotations of the class. Annotations are "
"defined as ``@`` prefixed classes included in doc block comments (``/** "
"... */``). For example::"
msgstr ""

#: ../../../components/validator/resources.rst:108
msgid ""
"To enable the annotation loader, call the "
":method:`Symfony\\\\Component\\\\Validator\\\\ValidatorBuilder::enableAnnotationMapping`"
" method. It takes an optional annotation reader instance, which defaults "
"to ``Doctrine\\Common\\Annotations\\AnnotationReader``::"
msgstr ""

#: ../../../components/validator/resources.rst:119
msgid ""
"To disable the annotation loader after it was enabled, call "
":method:`Symfony\\\\Component\\\\Validator\\\\ValidatorBuilder::disableAnnotationMapping`."
msgstr ""

#: ../../../_includes/_annotation_loader_tip.rst.inc:3
msgid ""
"In order to use the annotation loader, you should have installed the "
"``doctrine/annotations`` and ``doctrine/cache`` packages with Composer."
msgstr ""

#: ../../../_includes/_annotation_loader_tip.rst.inc:8
msgid ""
"Annotation classes aren't loaded automatically, so you must load them "
"using a class loader like this::"
msgstr ""

#: ../../../components/validator/resources.rst:125
msgid "Using Multiple Loaders"
msgstr ""

#: ../../../components/validator/resources.rst:127
msgid ""
"The component provides a "
":class:`Symfony\\\\Component\\\\Validator\\\\Mapping\\\\Loader\\\\LoaderChain`"
" class to execute several loaders sequentially in the same order they "
"were defined:"
msgstr ""

#: ../../../components/validator/resources.rst:131
msgid ""
"The ``ValidatorBuilder`` will already take care of this when you "
"configure multiple mappings::"
msgstr ""

#: ../../../components/validator/resources.rst:143
msgid "Caching"
msgstr ""

#: ../../../components/validator/resources.rst:145
msgid ""
"Using many loaders to load metadata from different places is convenient, "
"but it can slow down your application because each file needs to be "
"parsed, validated and converted into a "
":class:`Symfony\\\\Component\\\\Validator\\\\Mapping\\\\ClassMetadata` "
"instance."
msgstr ""

#: ../../../components/validator/resources.rst:150
msgid ""
"To solve this problem, call the "
":method:`Symfony\\\\Component\\\\Validator\\\\ValidatorBuilder::setMappingCache`"
" method of the Validator builder and pass your own caching class (which "
"must implement the PSR-6 interface "
":class:`Psr\\\\Cache\\\\CacheItemPoolInterface`)::"
msgstr ""

#: ../../../components/validator/resources.rst:163
msgid ""
"The loaders already use a singleton load mechanism. That means that the "
"loaders will only load and parse a file once and put that in a property, "
"which will then be used the next time it is asked for metadata. However, "
"the Validator still needs to merge all metadata of one class from every "
"loader when it is requested."
msgstr ""

#: ../../../components/validator/resources.rst:170
msgid "Using a Custom MetadataFactory"
msgstr ""

#: ../../../components/validator/resources.rst:172
msgid ""
"All the loaders and the cache are passed to an instance of "
":class:`Symfony\\\\Component\\\\Validator\\\\Mapping\\\\Factory\\\\LazyLoadingMetadataFactory`."
" This class is responsible for creating a ``ClassMetadata`` instance from"
" all the configured resources."
msgstr ""

#: ../../../components/validator/resources.rst:177
msgid ""
"You can also use a custom metadata factory implementation by creating a "
"class which implements "
":class:`Symfony\\\\Component\\\\Validator\\\\Mapping\\\\Factory\\\\MetadataFactoryInterface`."
" You can set this custom implementation using "
":method:`Symfony\\\\Component\\\\Validator\\\\ValidatorBuilder::setMetadataFactory`::"
msgstr ""

#: ../../../components/validator/resources.rst:192
msgid ""
"Since you are using a custom metadata factory, you can't configure "
"loaders and caches using the ``add*Mapping()`` methods anymore. You now "
"have to inject them into your custom metadata factory yourself."
msgstr ""

