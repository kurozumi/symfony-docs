# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the Symfony Framework
# Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Symfony Framework Documentation \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-08 14:21+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../../components/yaml/yaml_format.rst:5
msgid "The YAML Format"
msgstr ""

#: ../../../components/yaml/yaml_format.rst:7
msgid ""
"According to the official `YAML website`_, YAML is \"a human friendly "
"data serialization standard for all programming languages\". The Symfony "
"Yaml component implements a subset of the `YAML specification`_. "
"Specifically, it implements the minimum set of features needed to use "
"YAML as a configuration file format."
msgstr ""

#: ../../../components/yaml/yaml_format.rst:14
msgid "Scalars"
msgstr ""

#: ../../../components/yaml/yaml_format.rst:16
msgid "The syntax for scalars is similar to the PHP syntax."
msgstr ""

#: ../../../components/yaml/yaml_format.rst:19
msgid "Strings"
msgstr ""

#: ../../../components/yaml/yaml_format.rst:21
msgid ""
"Strings in YAML can be wrapped both in single and double quotes. In some "
"cases, they can also be unquoted:"
msgstr ""

#: ../../../components/yaml/yaml_format.rst:32
msgid ""
"Quoted styles are useful when a string starts or end with one or more "
"relevant spaces, because unquoted strings are trimmed on both end when "
"parsing their contents. Quotes are required when the string contains "
"special or reserved characters."
msgstr ""

#: ../../../components/yaml/yaml_format.rst:36
msgid ""
"When using single-quoted strings, any single quote ``'`` inside its "
"contents must be doubled to escape it:"
msgstr ""

#: ../../../components/yaml/yaml_format.rst:43
msgid ""
"Strings containing any of the following characters must be quoted. "
"Although you can use double quotes, for these characters it is more "
"convenient to use single quotes, which avoids having to escape any "
"backslash ``\\``:"
msgstr ""

#: ../../../components/yaml/yaml_format.rst:47
msgid ""
"``:``, ``{``, ``}``, ``[``, ``]``, ``,``, ``&``, ``*``, ``#``, ``?``, "
"``|``, ``-``, ``<``, ``>``, ``=``, ``!``, ``%``, ``@``, `````"
msgstr ""

#: ../../../components/yaml/yaml_format.rst:50
msgid ""
"The double-quoted style provides a way to express arbitrary strings, by "
"using ``\\`` to escape characters and sequences. For instance, it is very"
" useful when you need to embed a ``\\n`` or a Unicode character in a "
"string."
msgstr ""

#: ../../../components/yaml/yaml_format.rst:58
msgid ""
"If the string contains any of the following control characters, it must "
"be escaped with double quotes:"
msgstr ""

#: ../../../components/yaml/yaml_format.rst:61
msgid ""
"``\\0``, ``\\x01``, ``\\x02``, ``\\x03``, ``\\x04``, ``\\x05``, "
"``\\x06``, ``\\a``, ``\\b``, ``\\t``, ``\\n``, ``\\v``, ``\\f``, ``\\r``,"
" ``\\x0e``, ``\\x0f``, ``\\x10``, ``\\x11``, ``\\x12``, ``\\x13``, "
"``\\x14``, ``\\x15``, ``\\x16``, ``\\x17``, ``\\x18``, ``\\x19``, "
"``\\x1a``, ``\\e``, ``\\x1c``, ``\\x1d``, ``\\x1e``, ``\\x1f``, ``\\N``, "
"``\\_``, ``\\L``, ``\\P``"
msgstr ""

#: ../../../components/yaml/yaml_format.rst:67
msgid ""
"Finally, there are other cases when the strings must be quoted, no matter"
" if you're using single or double quotes:"
msgstr ""

#: ../../../components/yaml/yaml_format.rst:70
msgid ""
"When the string is ``true`` or ``false`` (otherwise, it would be treated "
"as a boolean value);"
msgstr ""

#: ../../../components/yaml/yaml_format.rst:72
msgid ""
"When the string is ``null`` or ``~`` (otherwise, it would be considered "
"as a ``null`` value);"
msgstr ""

#: ../../../components/yaml/yaml_format.rst:74
msgid ""
"When the string looks like a number, such as integers (e.g. ``2``, "
"``14``, etc.), floats (e.g. ``2.6``, ``14.9``) and exponential numbers "
"(e.g. ``12e7``, etc.) (otherwise, it would be treated as a numeric "
"value);"
msgstr ""

#: ../../../components/yaml/yaml_format.rst:77
msgid ""
"When the string looks like a date (e.g. ``2014-12-31``) (otherwise it "
"would be automatically converted into a Unix timestamp)."
msgstr ""

#: ../../../components/yaml/yaml_format.rst:80
msgid ""
"When a string contains line breaks, you can use the literal style, "
"indicated by the pipe (``|``), to indicate that the string will span "
"several lines. In literals, newlines are preserved:"
msgstr ""

#: ../../../components/yaml/yaml_format.rst:90
msgid ""
"Alternatively, strings can be written with the folded style, denoted by "
"``>``, where each line break is replaced by a space:"
msgstr ""

#: ../../../components/yaml/yaml_format.rst:111
msgid ""
"Notice the two spaces before each line in the previous examples. They "
"won't appear in the resulting PHP strings."
msgstr ""

#: ../../../components/yaml/yaml_format.rst:115
msgid "Numbers"
msgstr ""

#: ../../../components/yaml/yaml_format.rst:148
msgid "Nulls"
msgstr ""

#: ../../../components/yaml/yaml_format.rst:150
msgid "Nulls in YAML can be expressed with ``null`` or ``~``."
msgstr ""

#: ../../../components/yaml/yaml_format.rst:153
msgid "Booleans"
msgstr ""

#: ../../../components/yaml/yaml_format.rst:155
msgid "Booleans in YAML are expressed with ``true`` and ``false``."
msgstr ""

#: ../../../components/yaml/yaml_format.rst:158
msgid "Dates"
msgstr ""

#: ../../../components/yaml/yaml_format.rst:160
msgid "YAML uses the `ISO-8601`_ standard to express dates:"
msgstr ""

#: ../../../components/yaml/yaml_format.rst:174
msgid "Collections"
msgstr ""

#: ../../../components/yaml/yaml_format.rst:176
msgid ""
"A YAML file is rarely used to describe a simple scalar. Most of the time,"
" it describes a collection. YAML collections can be a sequence (indexed "
"arrays in PHP) or a mapping of elements (associative arrays in PHP)."
msgstr ""

#: ../../../components/yaml/yaml_format.rst:180
msgid "Sequences use a dash followed by a space:"
msgstr ""

#: ../../../components/yaml/yaml_format.rst:188
msgid "The previous YAML file is equivalent to the following PHP code::"
msgstr ""

#: ../../../components/yaml/yaml_format.rst:192
msgid ""
"Mappings use a colon followed by a space (``:`` ) to mark each key/value "
"pair:"
msgstr ""

#: ../../../components/yaml/yaml_format.rst:200
msgid "which is equivalent to this PHP code::"
msgstr ""

#: ../../../components/yaml/yaml_format.rst:206
msgid "In a mapping, a key can be any valid scalar."
msgstr ""

#: ../../../components/yaml/yaml_format.rst:208
msgid "The number of spaces between the colon and the value does not matter:"
msgstr ""

#: ../../../components/yaml/yaml_format.rst:216
msgid ""
"YAML uses indentation with one or more spaces to describe nested "
"collections:"
msgstr ""

#: ../../../components/yaml/yaml_format.rst:227
msgid "The above YAML is equivalent to the following PHP code::"
msgstr ""

#: ../../../components/yaml/yaml_format.rst:240
msgid ""
"There is one important thing you need to remember when using indentation "
"in a YAML file: *Indentation must be done with one or more spaces, but "
"never with tabulators*."
msgstr ""

#: ../../../components/yaml/yaml_format.rst:244
msgid "You can nest sequences and mappings as you like:"
msgstr ""

#: ../../../components/yaml/yaml_format.rst:255
msgid ""
"YAML can also use flow styles for collections, using explicit indicators "
"rather than indentation to denote scope."
msgstr ""

#: ../../../components/yaml/yaml_format.rst:258
msgid ""
"A sequence can be written as a comma separated list within square "
"brackets (``[]``):"
msgstr ""

#: ../../../components/yaml/yaml_format.rst:265
msgid ""
"A mapping can be written as a comma separated list of key/values within "
"curly braces (``{}``):"
msgstr ""

#: ../../../components/yaml/yaml_format.rst:272
msgid "You can mix and match styles to achieve a better readability:"
msgstr ""

#: ../../../components/yaml/yaml_format.rst:285
msgid "Comments"
msgstr ""

#: ../../../components/yaml/yaml_format.rst:287
msgid "Comments can be added in YAML by prefixing them with a hash mark (``#``):"
msgstr ""

#: ../../../components/yaml/yaml_format.rst:297
msgid ""
"Comments are ignored by the YAML parser and do not need to be indented "
"according to the current level of nesting in a collection."
msgstr ""

#: ../../../components/yaml/yaml_format.rst:301
msgid "Explicit Typing"
msgstr ""

#: ../../../components/yaml/yaml_format.rst:303
msgid ""
"The YAML specification defines some tags to set the type of any data "
"explicitly:"
msgstr ""

#: ../../../components/yaml/yaml_format.rst:322
msgid "Unsupported YAML Features"
msgstr ""

#: ../../../components/yaml/yaml_format.rst:324
msgid ""
"The following YAML features are not supported by the Symfony Yaml "
"component:"
msgstr ""

#: ../../../components/yaml/yaml_format.rst:326
msgid "Multi-documents (``---`` and ``...`` markers);"
msgstr ""

#: ../../../components/yaml/yaml_format.rst:327
msgid "Complex mapping keys and complex values starting with ``?``;"
msgstr ""

#: ../../../components/yaml/yaml_format.rst:328
msgid "Tagged values as keys;"
msgstr ""

#: ../../../components/yaml/yaml_format.rst:329
msgid ""
"The following tags and types: ``!!set``, ``!!omap``, ``!!pairs``, "
"``!!seq``, ``!!bool``, ``!!int``, ``!!merge``, ``!!null``, "
"``!!timestamp``, ``!!value``, ``!!yaml``;"
msgstr ""

#: ../../../components/yaml/yaml_format.rst:331
msgid ""
"Tags (``TAG`` directive; example: ``%TAG ! tag:example.com,2000:app/``) "
"and tag references (example: ``!<tag:example.com,2000:app/foo>``);"
msgstr ""

#: ../../../components/yaml/yaml_format.rst:333
msgid ""
"Using sequence-like syntax for mapping elements (example: ``{foo, bar}``;"
" use ``{foo: ~, bar: ~}`` instead)."
msgstr ""

