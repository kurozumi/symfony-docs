# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the Symfony Framework
# Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Symfony Framework Documentation \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-08 14:21+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../../components/http_foundation.rst:7
msgid "The HttpFoundation Component"
msgstr ""

#: ../../../components/http_foundation.rst:9
msgid ""
"The HttpFoundation component defines an object-oriented layer for the "
"HTTP specification."
msgstr ""

#: ../../../components/http_foundation.rst:12
msgid ""
"In PHP, the request is represented by some global variables (``$_GET``, "
"``$_POST``, ``$_FILES``, ``$_COOKIE``, ``$_SESSION``, ...) and the "
"response is generated by some functions (``echo``, ``header()``, "
"``setcookie()``, ...)."
msgstr ""

#: ../../../components/http_foundation.rst:16
msgid ""
"The Symfony HttpFoundation component replaces these default PHP global "
"variables and functions by an object-oriented layer."
msgstr ""

#: ../../../components/http_foundation.rst:20
msgid "Installation"
msgstr ""

#: ../../../components/require_autoload.rst.inc:3
msgid ""
"If you install this component outside of a Symfony application, you must "
"require the ``vendor/autoload.php`` file in your code to enable the class"
" autoloading mechanism provided by Composer. Read :doc:`this article "
"</components/using_components>` for more details."
msgstr ""

#: ../../../components/http_foundation.rst:30
msgid ""
"This article explains how to use the HttpFoundation features as an "
"independent component in any PHP application. In Symfony applications "
"everything is already configured and ready to use. Read the "
":doc:`/controller` article to learn about how to use these features when "
"creating controllers."
msgstr ""

#: ../../../components/http_foundation.rst:38
msgid "Request"
msgstr ""

#: ../../../components/http_foundation.rst:40
msgid ""
"The most common way to create a request is to base it on the current PHP "
"global variables with "
":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Request::createFromGlobals`::"
msgstr ""

#: ../../../components/http_foundation.rst:48
msgid ""
"which is almost equivalent to the more verbose, but also more flexible, "
":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Request::__construct` "
"call::"
msgstr ""

#: ../../../components/http_foundation.rst:63
msgid "Accessing Request Data"
msgstr ""

#: ../../../components/http_foundation.rst:65
msgid ""
"A Request object holds information about the client request. This "
"information can be accessed via several public properties:"
msgstr ""

#: ../../../components/http_foundation.rst:68
msgid "``request``: equivalent of ``$_POST``;"
msgstr ""

#: ../../../components/http_foundation.rst:70
msgid "``query``: equivalent of ``$_GET`` (``$request->query->get('name')``);"
msgstr ""

#: ../../../components/http_foundation.rst:72
msgid "``cookies``: equivalent of ``$_COOKIE``;"
msgstr ""

#: ../../../components/http_foundation.rst:74
msgid ""
"``attributes``: no equivalent - used by your app to store other data (see"
" :ref:`below <component-foundation-attributes>`);"
msgstr ""

#: ../../../components/http_foundation.rst:76
msgid "``files``: equivalent of ``$_FILES``;"
msgstr ""

#: ../../../components/http_foundation.rst:78
msgid "``server``: equivalent of ``$_SERVER``;"
msgstr ""

#: ../../../components/http_foundation.rst:80
msgid ""
"``headers``: mostly equivalent to a subset of ``$_SERVER`` "
"(``$request->headers->get('User-Agent')``)."
msgstr ""

#: ../../../components/http_foundation.rst:83
msgid ""
"Each property is a "
":class:`Symfony\\\\Component\\\\HttpFoundation\\\\ParameterBag` instance "
"(or a sub-class of), which is a data holder class:"
msgstr ""

#: ../../../components/http_foundation.rst:86
msgid ""
"``request``: "
":class:`Symfony\\\\Component\\\\HttpFoundation\\\\ParameterBag`;"
msgstr ""

#: ../../../components/http_foundation.rst:88
msgid ""
"``query``:   "
":class:`Symfony\\\\Component\\\\HttpFoundation\\\\ParameterBag`;"
msgstr ""

#: ../../../components/http_foundation.rst:90
msgid ""
"``cookies``: "
":class:`Symfony\\\\Component\\\\HttpFoundation\\\\ParameterBag`;"
msgstr ""

#: ../../../components/http_foundation.rst:92
msgid ""
"``attributes``: "
":class:`Symfony\\\\Component\\\\HttpFoundation\\\\ParameterBag`;"
msgstr ""

#: ../../../components/http_foundation.rst:94
msgid "``files``:   :class:`Symfony\\\\Component\\\\HttpFoundation\\\\FileBag`;"
msgstr ""

#: ../../../components/http_foundation.rst:96
msgid "``server``:  :class:`Symfony\\\\Component\\\\HttpFoundation\\\\ServerBag`;"
msgstr ""

#: ../../../components/http_foundation.rst:98
msgid "``headers``: :class:`Symfony\\\\Component\\\\HttpFoundation\\\\HeaderBag`."
msgstr ""

#: ../../../components/http_foundation.rst:100
msgid ""
"All :class:`Symfony\\\\Component\\\\HttpFoundation\\\\ParameterBag` "
"instances have methods to retrieve and update their data:"
msgstr ""

#: ../../../components/http_foundation.rst:104
msgid ":method:`Symfony\\\\Component\\\\HttpFoundation\\\\ParameterBag::all`"
msgstr ""

#: ../../../components/http_foundation.rst:104
msgid "Returns the parameters."
msgstr ""

#: ../../../components/http_foundation.rst:107
msgid ":method:`Symfony\\\\Component\\\\HttpFoundation\\\\ParameterBag::keys`"
msgstr ""

#: ../../../components/http_foundation.rst:107
msgid "Returns the parameter keys."
msgstr ""

#: ../../../components/http_foundation.rst:110
msgid ":method:`Symfony\\\\Component\\\\HttpFoundation\\\\ParameterBag::replace`"
msgstr ""

#: ../../../components/http_foundation.rst:110
msgid "Replaces the current parameters by a new set."
msgstr ""

#: ../../../components/http_foundation.rst:113
msgid ":method:`Symfony\\\\Component\\\\HttpFoundation\\\\ParameterBag::add`"
msgstr ""

#: ../../../components/http_foundation.rst:113
msgid "Adds parameters."
msgstr ""

#: ../../../components/http_foundation.rst:116
msgid ":method:`Symfony\\\\Component\\\\HttpFoundation\\\\ParameterBag::get`"
msgstr ""

#: ../../../components/http_foundation.rst:116
msgid "Returns a parameter by name."
msgstr ""

#: ../../../components/http_foundation.rst:119
msgid ":method:`Symfony\\\\Component\\\\HttpFoundation\\\\ParameterBag::set`"
msgstr ""

#: ../../../components/http_foundation.rst:119
msgid "Sets a parameter by name."
msgstr ""

#: ../../../components/http_foundation.rst:122
msgid ":method:`Symfony\\\\Component\\\\HttpFoundation\\\\ParameterBag::has`"
msgstr ""

#: ../../../components/http_foundation.rst:122
msgid "Returns ``true`` if the parameter is defined."
msgstr ""

#: ../../../components/http_foundation.rst:125
msgid ":method:`Symfony\\\\Component\\\\HttpFoundation\\\\ParameterBag::remove`"
msgstr ""

#: ../../../components/http_foundation.rst:125
msgid "Removes a parameter."
msgstr ""

#: ../../../components/http_foundation.rst:127
msgid ""
"The :class:`Symfony\\\\Component\\\\HttpFoundation\\\\ParameterBag` "
"instance also has some methods to filter the input values:"
msgstr ""

#: ../../../components/http_foundation.rst:131
msgid ":method:`Symfony\\\\Component\\\\HttpFoundation\\\\ParameterBag::getAlpha`"
msgstr ""

#: ../../../components/http_foundation.rst:131
msgid "Returns the alphabetic characters of the parameter value;"
msgstr ""

#: ../../../components/http_foundation.rst:134
msgid ":method:`Symfony\\\\Component\\\\HttpFoundation\\\\ParameterBag::getAlnum`"
msgstr ""

#: ../../../components/http_foundation.rst:134
msgid "Returns the alphabetic characters and digits of the parameter value;"
msgstr ""

#: ../../../components/http_foundation.rst:137
msgid ":method:`Symfony\\\\Component\\\\HttpFoundation\\\\ParameterBag::getBoolean`"
msgstr ""

#: ../../../components/http_foundation.rst:137
msgid "Returns the parameter value converted to boolean;"
msgstr ""

#: ../../../components/http_foundation.rst:140
msgid ":method:`Symfony\\\\Component\\\\HttpFoundation\\\\ParameterBag::getDigits`"
msgstr ""

#: ../../../components/http_foundation.rst:140
msgid "Returns the digits of the parameter value;"
msgstr ""

#: ../../../components/http_foundation.rst:143
msgid ":method:`Symfony\\\\Component\\\\HttpFoundation\\\\ParameterBag::getInt`"
msgstr ""

#: ../../../components/http_foundation.rst:143
msgid "Returns the parameter value converted to integer;"
msgstr ""

#: ../../../components/http_foundation.rst:146
msgid ":method:`Symfony\\\\Component\\\\HttpFoundation\\\\ParameterBag::filter`"
msgstr ""

#: ../../../components/http_foundation.rst:146
msgid "Filters the parameter by using the PHP :phpfunction:`filter_var` function."
msgstr ""

#: ../../../components/http_foundation.rst:148
msgid ""
"All getters take up to two arguments: the first one is the parameter name"
" and the second one is the default value to return if the parameter does "
"not exist::"
msgstr ""

#: ../../../components/http_foundation.rst:163
msgid ""
"When PHP imports the request query, it handles request parameters like "
"``foo[bar]=baz`` in a special way as it creates an array. So you can get "
"the ``foo`` parameter and you will get back an array with a ``bar`` "
"element::"
msgstr ""

#: ../../../components/http_foundation.rst:180
msgid ""
"Thanks to the public ``attributes`` property, you can store additional "
"data in the request, which is also an instance of "
":class:`Symfony\\\\Component\\\\HttpFoundation\\\\ParameterBag`. This is "
"mostly used to attach information that belongs to the Request and that "
"needs to be accessed from many different points in your application."
msgstr ""

#: ../../../components/http_foundation.rst:186
msgid ""
"Finally, the raw data sent with the request body can be accessed using "
":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Request::getContent`::"
msgstr ""

#: ../../../components/http_foundation.rst:191
msgid ""
"For instance, this may be useful to process a JSON string sent to the "
"application by a remote service using the HTTP POST method."
msgstr ""

#: ../../../components/http_foundation.rst:195
msgid "Identifying a Request"
msgstr ""

#: ../../../components/http_foundation.rst:197
msgid ""
"In your application, you need a way to identify a request; most of the "
"time, this is done via the \"path info\" of the request, which can be "
"accessed via the "
":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Request::getPathInfo` "
"method::"
msgstr ""

#: ../../../components/http_foundation.rst:206
msgid "Simulating a Request"
msgstr ""

#: ../../../components/http_foundation.rst:208
msgid ""
"Instead of creating a request based on the PHP globals, you can also "
"simulate a request::"
msgstr ""

#: ../../../components/http_foundation.rst:217
msgid ""
"The :method:`Symfony\\\\Component\\\\HttpFoundation\\\\Request::create` "
"method creates a request based on a URI, a method and some parameters "
"(the query parameters or the request ones depending on the HTTP method); "
"and of course, you can also override all other variables as well (by "
"default, Symfony creates sensible defaults for all the PHP global "
"variables)."
msgstr ""

#: ../../../components/http_foundation.rst:223
msgid ""
"Based on such a request, you can override the PHP global variables via "
":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Request::overrideGlobals`::"
msgstr ""

#: ../../../components/http_foundation.rst:230
msgid ""
"You can also duplicate an existing request via "
":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Request::duplicate` or"
" change a bunch of parameters with a single call to "
":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Request::initialize`."
msgstr ""

#: ../../../components/http_foundation.rst:236
msgid "Accessing the Session"
msgstr ""

#: ../../../components/http_foundation.rst:238
msgid ""
"If you have a session attached to the request, you can access it via the "
":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Request::getSession` "
"method; the "
":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Request::hasPreviousSession`"
" method tells you if the request contains a session which was started in "
"one of the previous requests."
msgstr ""

#: ../../../components/http_foundation.rst:246
msgid "Processing HTTP Headers"
msgstr ""

#: ../../../components/http_foundation.rst:248
msgid ""
"Processing HTTP headers is not a trivial task because of the escaping and"
" white space handling of their contents. Symfony provides a "
":class:`Symfony\\\\Component\\\\HttpFoundation\\\\HeaderUtils` class that"
" abstracts this complexity and defines some methods for the most common "
"tasks::"
msgstr ""

#: ../../../components/http_foundation.rst:276
msgid "Accessing ``Accept-*`` Headers Data"
msgstr ""

#: ../../../components/http_foundation.rst:278
msgid ""
"You can access basic data extracted from ``Accept-*`` headers by using "
"the following methods:"
msgstr ""

#: ../../../components/http_foundation.rst:282
msgid ":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Request::getAcceptableContentTypes`"
msgstr ""

#: ../../../components/http_foundation.rst:282
msgid "Returns the list of accepted content types ordered by descending quality."
msgstr ""

#: ../../../components/http_foundation.rst:285
msgid ":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Request::getLanguages`"
msgstr ""

#: ../../../components/http_foundation.rst:285
msgid "Returns the list of accepted languages ordered by descending quality."
msgstr ""

#: ../../../components/http_foundation.rst:288
msgid ":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Request::getCharsets`"
msgstr ""

#: ../../../components/http_foundation.rst:288
msgid "Returns the list of accepted charsets ordered by descending quality."
msgstr ""

#: ../../../components/http_foundation.rst:291
msgid ":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Request::getEncodings`"
msgstr ""

#: ../../../components/http_foundation.rst:291
msgid "Returns the list of accepted encodings ordered by descending quality."
msgstr ""

#: ../../../components/http_foundation.rst:293
msgid ""
"If you need to get full access to parsed data from ``Accept``, ``Accept-"
"Language``, ``Accept-Charset`` or ``Accept-Encoding``, you can use "
":class:`Symfony\\\\Component\\\\HttpFoundation\\\\AcceptHeader` utility "
"class::"
msgstr ""

#: ../../../components/http_foundation.rst:310
msgid ""
"The default values that can be optionally included in the ``Accept-*`` "
"headers are also supported::"
msgstr ""

#: ../../../components/http_foundation.rst:320
msgid "Anonymizing IP Addresses"
msgstr ""

#: ../../../components/http_foundation.rst:322
msgid ""
"An increasingly common need for applications to comply with user "
"protection regulations is to anonymize IP addresses before logging and "
"storing them for analysis purposes. Use the ``anonymize()`` method from "
"the :class:`Symfony\\\\Component\\\\HttpFoundation\\\\IpUtils` to do "
"that::"
msgstr ""

#: ../../../components/http_foundation.rst:338
msgid "Accessing other Data"
msgstr ""

#: ../../../components/http_foundation.rst:340
msgid ""
"The ``Request`` class has many other methods that you can use to access "
"the request information. Have a look at :class:`the Request API "
"<Symfony\\\\Component\\\\HttpFoundation\\\\Request>` for more information"
" about them."
msgstr ""

#: ../../../components/http_foundation.rst:346
msgid "Overriding the Request"
msgstr ""

#: ../../../components/http_foundation.rst:348
msgid ""
"The ``Request`` class should not be overridden as it is a data object "
"that represents an HTTP message. But when moving from a legacy system, "
"adding methods or changing some default behavior might help. In that "
"case, register a PHP callable that is able to create an instance of your "
"``Request`` class::"
msgstr ""

#: ../../../components/http_foundation.rst:381
msgid "Response"
msgstr ""

#: ../../../components/http_foundation.rst:383
msgid ""
"A :class:`Symfony\\\\Component\\\\HttpFoundation\\\\Response` object "
"holds all the information that needs to be sent back to the client from a"
" given request. The constructor takes up to three arguments: the response"
" content, the status code, and an array of HTTP headers::"
msgstr ""

#: ../../../components/http_foundation.rst:396
msgid ""
"This information can also be manipulated after the Response object "
"creation::"
msgstr ""

#: ../../../components/http_foundation.rst:405
msgid ""
"When setting the ``Content-Type`` of the Response, you can set the "
"charset, but it is better to set it via the "
":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Response::setCharset` "
"method::"
msgstr ""

#: ../../../components/http_foundation.rst:411
msgid ""
"Note that by default, Symfony assumes that your Responses are encoded in "
"UTF-8."
msgstr ""

#: ../../../components/http_foundation.rst:415
msgid "Sending the Response"
msgstr ""

#: ../../../components/http_foundation.rst:417
msgid ""
"Before sending the Response, you can optionally call the "
":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Response::prepare` "
"method to fix any incompatibility with the HTTP specification (e.g. a "
"wrong ``Content-Type`` header)::"
msgstr ""

#: ../../../components/http_foundation.rst:423
msgid ""
"Sending the response to the client is done by calling the method "
":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Response::send`::"
msgstr ""

#: ../../../components/http_foundation.rst:429
msgid "Setting Cookies"
msgstr ""

#: ../../../components/http_foundation.rst:431
msgid ""
"The response cookies can be manipulated through the ``headers`` public "
"attribute::"
msgstr ""

#: ../../../components/http_foundation.rst:438
msgid ""
"The "
":method:`Symfony\\\\Component\\\\HttpFoundation\\\\ResponseHeaderBag::setCookie`"
" method takes an instance of "
":class:`Symfony\\\\Component\\\\HttpFoundation\\\\Cookie` as an argument."
msgstr ""

#: ../../../components/http_foundation.rst:443
msgid ""
"You can clear a cookie via the "
":method:`Symfony\\\\Component\\\\HttpFoundation\\\\ResponseHeaderBag::clearCookie`"
" method."
msgstr ""

#: ../../../components/http_foundation.rst:446
msgid ""
"In addition to the ``Cookie::create()`` method, you can create a "
"``Cookie`` object from a raw header value using "
":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Cookie::fromString` "
"method. You can also use the ``with*()`` methods to change some Cookie "
"property (or to build the entire Cookie using a fluent interface). Each "
"``with*()`` method returns a new object with the modified property::"
msgstr ""

#: ../../../components/http_foundation.rst:460
msgid "The ``with*()`` methods were introduced in Symfony 5.1."
msgstr ""

#: ../../../components/http_foundation.rst:463
msgid "Managing the HTTP Cache"
msgstr ""

#: ../../../components/http_foundation.rst:465
msgid ""
"The :class:`Symfony\\\\Component\\\\HttpFoundation\\\\Response` class has"
" a rich set of methods to manipulate the HTTP headers related to the "
"cache:"
msgstr ""

#: ../../../components/http_foundation.rst:468
msgid ":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Response::setPublic`"
msgstr ""

#: ../../../components/http_foundation.rst:469
msgid ":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Response::setPrivate`"
msgstr ""

#: ../../../components/http_foundation.rst:470
msgid ":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Response::expire`"
msgstr ""

#: ../../../components/http_foundation.rst:471
msgid ":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Response::setExpires`"
msgstr ""

#: ../../../components/http_foundation.rst:472
msgid ":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Response::setMaxAge`"
msgstr ""

#: ../../../components/http_foundation.rst:473
msgid ":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Response::setSharedMaxAge`"
msgstr ""

#: ../../../components/http_foundation.rst:474
msgid ":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Response::setTtl`"
msgstr ""

#: ../../../components/http_foundation.rst:475
msgid ":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Response::setClientTtl`"
msgstr ""

#: ../../../components/http_foundation.rst:476
msgid ":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Response::setLastModified`"
msgstr ""

#: ../../../components/http_foundation.rst:477
msgid ":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Response::setEtag`"
msgstr ""

#: ../../../components/http_foundation.rst:478
msgid ":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Response::setVary`"
msgstr ""

#: ../../../components/http_foundation.rst:482
msgid ""
"The methods "
":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Response::setExpires`,"
" "
":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Response::setLastModified`"
" and "
":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Response::setDate` "
"accept any object that implements ``\\DateTimeInterface``, including "
"immutable date objects."
msgstr ""

#: ../../../components/http_foundation.rst:487
msgid ""
"The "
":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Response::setCache` "
"method can be used to set the most commonly used cache information in one"
" method call::"
msgstr ""

#: ../../../components/http_foundation.rst:508
msgid ""
"The ``must_revalidate``, ``no_cache``, ``no_store``, ``no_transform`` and"
" ``proxy_revalidate`` directives were introduced in Symfony 5.1."
msgstr ""

#: ../../../components/http_foundation.rst:511
msgid ""
"To check if the Response validators (``ETag``, ``Last-Modified``) match a"
" conditional value specified in the client Request, use the "
":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Response::isNotModified`"
" method::"
msgstr ""

#: ../../../components/http_foundation.rst:520
msgid ""
"If the Response is not modified, it sets the status code to 304 and "
"removes the actual response content."
msgstr ""

#: ../../../components/http_foundation.rst:526
msgid "Redirecting the User"
msgstr ""

#: ../../../components/http_foundation.rst:528
msgid ""
"To redirect the client to another URL, you can use the "
":class:`Symfony\\\\Component\\\\HttpFoundation\\\\RedirectResponse` "
"class::"
msgstr ""

#: ../../../components/http_foundation.rst:538
msgid "Streaming a Response"
msgstr ""

#: ../../../components/http_foundation.rst:540
msgid ""
"The :class:`Symfony\\\\Component\\\\HttpFoundation\\\\StreamedResponse` "
"class allows you to stream the Response back to the client. The response "
"content is represented by a PHP callable instead of a string::"
msgstr ""

#: ../../../components/http_foundation.rst:558
msgid ""
"The ``flush()`` function does not flush buffering. If ``ob_start()`` has "
"been called before or the ``output_buffering`` ``php.ini`` option is "
"enabled, you must call ``ob_flush()`` before ``flush()``."
msgstr ""

#: ../../../components/http_foundation.rst:562
msgid ""
"Additionally, PHP isn't the only layer that can buffer output. Your web "
"server might also buffer based on its configuration. Some servers, such "
"as nginx, let you disable buffering at the config level or by adding a "
"special HTTP header in the response::"
msgstr ""

#: ../../../components/http_foundation.rst:573
msgid "Serving Files"
msgstr ""

#: ../../../components/http_foundation.rst:575
msgid ""
"When sending a file, you must add a ``Content-Disposition`` header to "
"your response. While creating this header for basic file downloads is "
"straightforward, using non-ASCII filenames is more involved. The "
":method:`Symfony\\\\Component\\\\HttpFoundation\\\\HeaderUtils::makeDisposition`"
" abstracts the hard work behind a simple API::"
msgstr ""

#: ../../../components/http_foundation.rst:595
msgid ""
"Alternatively, if you are serving a static file, you can use a "
":class:`Symfony\\\\Component\\\\HttpFoundation\\\\BinaryFileResponse`::"
msgstr ""

#: ../../../components/http_foundation.rst:603
msgid ""
"The ``BinaryFileResponse`` will automatically handle ``Range`` and ``If-"
"Range`` headers from the request. It also supports ``X-Sendfile`` (see "
"for `nginx`_ and `Apache`_). To make use of it, you need to determine "
"whether or not the ``X-Sendfile-Type`` header should be trusted and call "
":method:`Symfony\\\\Component\\\\HttpFoundation\\\\BinaryFileResponse::trustXSendfileTypeHeader`"
" if it should::"
msgstr ""

#: ../../../components/http_foundation.rst:614
msgid ""
"The ``BinaryFileResponse`` will only handle ``X-Sendfile`` if the "
"particular header is present. For Apache, this is not the default case."
msgstr ""

#: ../../../components/http_foundation.rst:617
msgid ""
"To add the header use the ``mod_headers`` Apache module and add the "
"following to the Apache configuration:"
msgstr ""

#: ../../../components/http_foundation.rst:632
msgid ""
"With the ``BinaryFileResponse``, you can still set the ``Content-Type`` "
"of the sent file, or change its ``Content-Disposition``::"
msgstr ""

#: ../../../components/http_foundation.rst:642
msgid ""
"It is possible to delete the file after the request is sent with the "
":method:`Symfony\\\\Component\\\\HttpFoundation\\\\BinaryFileResponse::deleteFileAfterSend`"
" method. Please note that this will not work when the ``X-Sendfile`` "
"header is set."
msgstr ""

#: ../../../components/http_foundation.rst:646
msgid ""
"If the size of the served file is unknown (e.g. because it's being "
"generated on the fly, or because a PHP stream filter is registered on it,"
" etc.), you can pass a ``Stream`` instance to ``BinaryFileResponse``. "
"This will disable ``Range`` and ``Content-Length`` handling, switching to"
" chunked encoding instead::"
msgstr ""

#: ../../../components/http_foundation.rst:659
msgid ""
"If you *just* created the file during this same request, the file *may* "
"be sent without any content. This may be due to cached file stats that "
"return zero for the size of the file. To fix this issue, call "
"``clearstatcache(true, $file)`` with the path to the binary file."
msgstr ""

#: ../../../components/http_foundation.rst:667
msgid "Creating a JSON Response"
msgstr ""

#: ../../../components/http_foundation.rst:669
msgid ""
"Any type of response can be created via the "
":class:`Symfony\\\\Component\\\\HttpFoundation\\\\Response` class by "
"setting the right content and headers. A JSON response might look like "
"this::"
msgstr ""

#: ../../../components/http_foundation.rst:681
msgid ""
"There is also a helpful "
":class:`Symfony\\\\Component\\\\HttpFoundation\\\\JsonResponse` class, "
"which can make this even easier::"
msgstr ""

#: ../../../components/http_foundation.rst:697
msgid ""
"The ``JsonResponse`` class sets the ``Content-Type`` header to "
"``application/json`` and encodes your data to JSON when needed."
msgstr ""

#: ../../../components/http_foundation.rst:702
msgid ""
"To avoid XSSI `JSON Hijacking`_, you should pass an associative array as "
"the outer-most array to ``JsonResponse`` and not an indexed array so that"
" the final result is an object (e.g. ``{\"object\": \"not inside an "
"array\"}``) instead of an array (e.g. ``[{\"object\": \"inside an "
"array\"}]``). Read the `OWASP guidelines`_ for more information."
msgstr ""

#: ../../../components/http_foundation.rst:708
msgid ""
"Only methods that respond to GET requests are vulnerable to XSSI 'JSON "
"Hijacking'. Methods responding to POST requests only remain unaffected."
msgstr ""

#: ../../../components/http_foundation.rst:712
msgid "JSONP Callback"
msgstr ""

#: ../../../components/http_foundation.rst:714
msgid ""
"If you're using JSONP, you can set the callback function that the data "
"should be passed to::"
msgstr ""

#: ../../../components/http_foundation.rst:719
msgid ""
"In this case, the ``Content-Type`` header will be ``text/javascript`` and"
" the response content will look like this:"
msgstr ""

#: ../../../components/http_foundation.rst:727
msgid "Session"
msgstr ""

#: ../../../components/http_foundation.rst:729
msgid ""
"The session information is in its own document: "
":doc:`/components/http_foundation/sessions`."
msgstr ""

#: ../../../components/http_foundation.rst:732
msgid "Safe Content Preference"
msgstr ""

#: ../../../components/http_foundation.rst:734
msgid ""
"Some web sites have a \"safe\" mode to assist those who don't want to be "
"exposed to content to which they might object. The  `RFC 8674`_ "
"specification defines a way for user agents to ask for safe content to a "
"server."
msgstr ""

#: ../../../components/http_foundation.rst:738
msgid ""
"The specification does not define what content might be considered "
"objectionable, so the concept of \"safe\" is not precisely defined. "
"Rather, the term is interpreted by the server and within the scope of "
"each web site that chooses to act upon this information."
msgstr ""

#: ../../../components/http_foundation.rst:742
msgid "Symfony offers two methods to interact with this preference:"
msgstr ""

#: ../../../components/http_foundation.rst:744
msgid ":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Request::preferSafeContent`;"
msgstr ""

#: ../../../components/http_foundation.rst:745
msgid ":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Response::setContentSafe`;"
msgstr ""

#: ../../../components/http_foundation.rst:749
msgid ""
"The ``preferSafeContent()`` and ``setContentSafe()`` methods were "
"introduced in Symfony 5.1."
msgstr ""

#: ../../../components/http_foundation.rst:752
msgid ""
"The following example shows how to detect if the user agent prefers "
"\"safe\" content::"
msgstr ""

#: ../../../components/http_foundation.rst:763
msgid "Learn More"
msgstr ""

