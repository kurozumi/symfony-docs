# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the Symfony Framework
# Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Symfony Framework Documentation \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-08 14:21+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../../components/http_foundation/session_configuration.rst:6
msgid "Configuring Sessions and Save Handlers"
msgstr ""

#: ../../../components/http_foundation/session_configuration.rst:8
msgid ""
"This article deals with how to configure session management and fine tune"
" it to your specific needs. This documentation covers save handlers, "
"which store and retrieve session data, and configuring session behavior."
msgstr ""

#: ../../../components/http_foundation/session_configuration.rst:13
msgid "Save Handlers"
msgstr ""

#: ../../../components/http_foundation/session_configuration.rst:15
msgid ""
"The PHP session workflow has 6 possible operations that may occur. The "
"normal session follows ``open``, ``read``, ``write`` and ``close``, with "
"the possibility of ``destroy`` and ``gc`` (garbage collection which will "
"expire any old sessions: ``gc`` is called randomly according to PHP's "
"configuration and if called, it is invoked after the ``open`` operation)."
" You can read more about this at `php.net/session.customhandler`_"
msgstr ""

#: ../../../components/http_foundation/session_configuration.rst:23
msgid "Native PHP Save Handlers"
msgstr ""

#: ../../../components/http_foundation/session_configuration.rst:25
msgid ""
"So-called native handlers, are save handlers which are either compiled "
"into PHP or provided by PHP extensions, such as PHP-SQLite, PHP-Memcached"
" and so on."
msgstr ""

#: ../../../components/http_foundation/session_configuration.rst:28
msgid ""
"All native save handlers are internal to PHP and as such, have no public "
"facing API. They must be configured by ``php.ini`` directives, usually "
"``session.save_path`` and potentially other driver specific directives. "
"Specific details can be found in the docblock of the ``setOptions()`` "
"method of each class. For instance, the one provided by the Memcached "
"extension can be found on :phpmethod:`php.net <Memcached::setOption>`."
msgstr ""

#: ../../../components/http_foundation/session_configuration.rst:34
msgid ""
"While native save handlers can be activated by directly using "
"``ini_set('session.save_handler', $name);``, Symfony provides a "
"convenient way to activate these in the same way as it does for custom "
"handlers."
msgstr ""

#: ../../../components/http_foundation/session_configuration.rst:38
msgid ""
"Symfony provides drivers for the following native save handler as an "
"example:"
msgstr ""

#: ../../../components/http_foundation/session_configuration.rst:40
msgid ":class:`Symfony\\\\Component\\\\HttpFoundation\\\\Session\\\\Storage\\\\Handler\\\\NativeFileSessionHandler`"
msgstr ""

#: ../../../components/http_foundation/session_configuration.rst:42
#: ../../../components/http_foundation/session_configuration.rst:81
#: ../../../components/http_foundation/session_configuration.rst:253
msgid "Example usage::"
msgstr ""

#: ../../../components/http_foundation/session_configuration.rst:53
msgid ""
"With the exception of the ``files`` handler which is built into PHP and "
"always available, the availability of the other handlers depends on those"
" PHP extensions being active at runtime."
msgstr ""

#: ../../../components/http_foundation/session_configuration.rst:59
msgid ""
"Native save handlers provide a quick solution to session storage, "
"however, in complex systems where you need more control, custom save "
"handlers may provide more freedom and flexibility. Symfony provides "
"several implementations which you may further customize as required."
msgstr ""

#: ../../../components/http_foundation/session_configuration.rst:65
msgid "Custom Save Handlers"
msgstr ""

#: ../../../components/http_foundation/session_configuration.rst:67
msgid ""
"Custom handlers are those which completely replace PHP's built-in session"
" save handlers by providing six callback functions which PHP calls "
"internally at various points in the session workflow."
msgstr ""

#: ../../../components/http_foundation/session_configuration.rst:71
msgid ""
"The Symfony HttpFoundation component provides some by default and these "
"can serve as examples if you wish to write your own."
msgstr ""

#: ../../../components/http_foundation/session_configuration.rst:74
msgid ":class:`Symfony\\\\Component\\\\HttpFoundation\\\\Session\\\\Storage\\\\Handler\\\\PdoSessionHandler`"
msgstr ""

#: ../../../components/http_foundation/session_configuration.rst:75
msgid ":class:`Symfony\\\\Component\\\\HttpFoundation\\\\Session\\\\Storage\\\\Handler\\\\MemcachedSessionHandler`"
msgstr ""

#: ../../../components/http_foundation/session_configuration.rst:76
msgid ":class:`Symfony\\\\Component\\\\HttpFoundation\\\\Session\\\\Storage\\\\Handler\\\\MigratingSessionHandler`"
msgstr ""

#: ../../../components/http_foundation/session_configuration.rst:77
msgid ":class:`Symfony\\\\Component\\\\HttpFoundation\\\\Session\\\\Storage\\\\Handler\\\\RedisSessionHandler`"
msgstr ""

#: ../../../components/http_foundation/session_configuration.rst:78
msgid ":class:`Symfony\\\\Component\\\\HttpFoundation\\\\Session\\\\Storage\\\\Handler\\\\MongoDbSessionHandler`"
msgstr ""

#: ../../../components/http_foundation/session_configuration.rst:79
msgid ":class:`Symfony\\\\Component\\\\HttpFoundation\\\\Session\\\\Storage\\\\Handler\\\\NullSessionHandler`"
msgstr ""

#: ../../../components/http_foundation/session_configuration.rst:92
msgid "Migrating Between Save Handlers"
msgstr ""

#: ../../../components/http_foundation/session_configuration.rst:94
msgid ""
"If your application changes the way sessions are stored, use the "
":class:`Symfony\\\\Component\\\\HttpFoundation\\\\Session\\\\Storage\\\\Handler\\\\MigratingSessionHandler`"
" to migrate between old and new save handlers without losing session "
"data."
msgstr ""

#: ../../../components/http_foundation/session_configuration.rst:98
msgid "This is the recommended migration workflow:"
msgstr ""

#: ../../../components/http_foundation/session_configuration.rst:100
msgid ""
"Switch to the migrating handler, with your new handler as the write-only "
"one. The old handler behaves as usual and sessions get written to the new"
" one::"
msgstr ""

#: ../../../components/http_foundation/session_configuration.rst:105
msgid ""
"After your session gc period, verify that the data in the new handler is "
"correct."
msgstr ""

#: ../../../components/http_foundation/session_configuration.rst:106
msgid ""
"Update the migrating handler to use the old handler as the write-only "
"one, so the sessions will now be read from the new handler. This step "
"allows easier rollbacks::"
msgstr ""

#: ../../../components/http_foundation/session_configuration.rst:111
msgid ""
"After verifying that the sessions in your application are working, switch"
" from the migrating handler to the new handler."
msgstr ""

#: ../../../components/http_foundation/session_configuration.rst:115
msgid "Configuring PHP Sessions"
msgstr ""

#: ../../../components/http_foundation/session_configuration.rst:117
msgid ""
"The "
":class:`Symfony\\\\Component\\\\HttpFoundation\\\\Session\\\\Storage\\\\NativeSessionStorage`"
" can configure most of the ``php.ini`` configuration directives which are"
" documented at `php.net/session.configuration`_."
msgstr ""

#: ../../../components/http_foundation/session_configuration.rst:121
msgid ""
"To configure these settings, pass the keys (omitting the initial "
"``session.`` part of the key) as a key-value array to the ``$options`` "
"constructor argument. Or set them via the "
":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Session\\\\Storage\\\\NativeSessionStorage::setOptions`"
" method."
msgstr ""

#: ../../../components/http_foundation/session_configuration.rst:127
msgid ""
"For the sake of clarity, some key options are explained in this "
"documentation."
msgstr ""

#: ../../../components/http_foundation/session_configuration.rst:130
msgid "Session Cookie Lifetime"
msgstr ""

#: ../../../components/http_foundation/session_configuration.rst:132
msgid ""
"For security, session tokens are generally recommended to be sent as "
"session cookies. You can configure the lifetime of session cookies by "
"specifying the lifetime (in seconds) using the ``cookie_lifetime`` key in"
" the constructor's ``$options`` argument in "
":class:`Symfony\\\\Component\\\\HttpFoundation\\\\Session\\\\Storage\\\\NativeSessionStorage`."
msgstr ""

#: ../../../components/http_foundation/session_configuration.rst:137
msgid ""
"Setting a ``cookie_lifetime`` to ``0`` will cause the cookie to live only"
" as long as the browser remains open. Generally, ``cookie_lifetime`` "
"would be set to a relatively large number of days, weeks or months. It is"
" not uncommon to set cookies for a year or more depending on the "
"application."
msgstr ""

#: ../../../components/http_foundation/session_configuration.rst:142
msgid ""
"Since session cookies are just a client-side token, they are less "
"important in controlling the fine details of your security settings which"
" ultimately can only be securely controlled from the server side."
msgstr ""

#: ../../../components/http_foundation/session_configuration.rst:148
msgid ""
"The ``cookie_lifetime`` setting is the number of seconds the cookie "
"should live for, it is not a Unix timestamp. The resulting session cookie"
" will be stamped with an expiry time of ``time()`` + ``cookie_lifetime`` "
"where the time is taken from the server."
msgstr ""

#: ../../../components/http_foundation/session_configuration.rst:154
msgid "Configuring Garbage Collection"
msgstr ""

#: ../../../components/http_foundation/session_configuration.rst:156
msgid ""
"When a session opens, PHP will call the ``gc`` handler randomly according"
" to the probability set by ``session.gc_probability`` / "
"``session.gc_divisor``. For example if these were set to ``5/100`` "
"respectively, it would mean a probability of 5%. Similarly, ``3/4`` would"
" mean a 3 in 4 chance of being called, i.e. 75%."
msgstr ""

#: ../../../components/http_foundation/session_configuration.rst:161
msgid ""
"If the garbage collection handler is invoked, PHP will pass the value "
"stored in the ``php.ini`` directive ``session.gc_maxlifetime``. The "
"meaning in this context is that any stored session that was saved more "
"than ``gc_maxlifetime`` ago should be deleted. This allows one to expire "
"records based on idle time."
msgstr ""

#: ../../../components/http_foundation/session_configuration.rst:166
msgid ""
"However, some operating systems (e.g. Debian) do their own session "
"handling and set the ``session.gc_probability`` variable to ``0`` to stop"
" PHP doing garbage collection. That's why Symfony now overwrites this "
"value to ``1``."
msgstr ""

#: ../../../components/http_foundation/session_configuration.rst:170
msgid ""
"If you wish to use the original value set in your ``php.ini``, add the "
"following configuration:"
msgstr ""

#: ../../../components/http_foundation/session_configuration.rst:180
msgid ""
"You can configure these settings by passing ``gc_probability``, "
"``gc_divisor`` and ``gc_maxlifetime`` in an array to the constructor of "
":class:`Symfony\\\\Component\\\\HttpFoundation\\\\Session\\\\Storage\\\\NativeSessionStorage`"
" or to the "
":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Session\\\\Storage\\\\NativeSessionStorage::setOptions`"
" method."
msgstr ""

#: ../../../components/http_foundation/session_configuration.rst:187
msgid "Session Lifetime"
msgstr ""

#: ../../../components/http_foundation/session_configuration.rst:189
msgid ""
"When a new session is created, meaning Symfony issues a new session "
"cookie to the client, the cookie will be stamped with an expiry time. "
"This is calculated by adding the PHP runtime configuration value in "
"``session.cookie_lifetime`` with the current server time."
msgstr ""

#: ../../../components/http_foundation/session_configuration.rst:196
msgid ""
"PHP will only issue a cookie once. The client is expected to store that "
"cookie for the entire lifetime. A new cookie will only be issued when the"
" session is destroyed, the browser cookie is deleted, or the session ID "
"is regenerated using the ``migrate()`` or ``invalidate()`` methods of the"
" ``Session`` class."
msgstr ""

#: ../../../components/http_foundation/session_configuration.rst:201
msgid ""
"The initial cookie lifetime can be set by configuring "
"``NativeSessionStorage`` using the ``setOptions(['cookie_lifetime' => "
"1234])`` method."
msgstr ""

#: ../../../components/http_foundation/session_configuration.rst:206
msgid ""
"A cookie lifetime of ``0`` means the cookie expires when the browser is "
"closed."
msgstr ""

#: ../../../components/http_foundation/session_configuration.rst:209
msgid "Session Idle Time/Keep Alive"
msgstr ""

#: ../../../components/http_foundation/session_configuration.rst:211
msgid ""
"There are often circumstances where you may want to protect, or minimize "
"unauthorized use of a session when a user steps away from their terminal "
"while logged in by destroying the session after a certain period of idle "
"time. For example, it is common for banking applications to log the user "
"out after just 5 to 10 minutes of inactivity. Setting the cookie lifetime"
" here is not appropriate because that can be manipulated by the client, "
"so we must do the expiry on the server side. The easiest way is to "
"implement this via garbage collection which runs reasonably frequently. "
"The ``cookie_lifetime`` would be set to a relatively high value, and the "
"garbage collection ``gc_maxlifetime`` would be set to destroy sessions at"
" whatever the desired idle period is."
msgstr ""

#: ../../../components/http_foundation/session_configuration.rst:222
msgid ""
"The other option is specifically check if a session has expired after the"
" session is started. The session can be destroyed as required. This "
"method of processing can allow the expiry of sessions to be integrated "
"into the user experience, for example, by displaying a message."
msgstr ""

#: ../../../components/http_foundation/session_configuration.rst:227
msgid ""
"Symfony records some basic metadata about each session to give you "
"complete freedom in this area."
msgstr ""

#: ../../../components/http_foundation/session_configuration.rst:231
msgid "Session Cache Limiting"
msgstr ""

#: ../../../components/http_foundation/session_configuration.rst:233
msgid ""
"To avoid users seeing stale data, it's common for session-enabled "
"resources to be sent with headers that disable caching. For this purpose "
"PHP Sessions has the ``sessions.cache_limiter`` option, which determines "
"which headers, if any, will be sent with the response when the session in"
" started."
msgstr ""

#: ../../../components/http_foundation/session_configuration.rst:238
msgid ""
"Upon construction, "
":class:`Symfony\\\\Component\\\\HttpFoundation\\\\Session\\\\Storage\\\\NativeSessionStorage`"
" sets this global option to ``\"\"`` (send no headers) in case the "
"developer wishes to use a "
":class:`Symfony\\\\Component\\\\HttpFoundation\\\\Response` object to "
"manage response headers."
msgstr ""

#: ../../../components/http_foundation/session_configuration.rst:246
msgid ""
"If you rely on PHP Sessions to manage HTTP caching, you *must* manually "
"set the ``cache_limiter`` option in "
":class:`Symfony\\\\Component\\\\HttpFoundation\\\\Session\\\\Storage\\\\NativeSessionStorage`"
" to a non-empty value."
msgstr ""

#: ../../../components/http_foundation/session_configuration.rst:251
msgid "For example, you may set it to PHP's default value during construction:"
msgstr ""

#: ../../../components/http_foundation/session_configuration.rst:261
msgid "Session Metadata"
msgstr ""

#: ../../../components/http_foundation/session_configuration.rst:263
msgid ""
"Sessions are decorated with some basic metadata to enable fine control "
"over the security settings. The session object has a getter for the "
"metadata, "
":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Session\\\\Session::getMetadataBag`"
" which exposes an instance of "
":class:`Symfony\\\\Component\\\\HttpFoundation\\\\Session\\\\Storage\\\\MetadataBag`::"
msgstr ""

#: ../../../components/http_foundation/session_configuration.rst:271
msgid "Both methods return a Unix timestamp (relative to the server)."
msgstr ""

#: ../../../components/http_foundation/session_configuration.rst:273
msgid "This metadata can be used to explicitly expire a session on access, e.g.::"
msgstr ""

#: ../../../components/http_foundation/session_configuration.rst:281
msgid ""
"It is also possible to tell what the ``cookie_lifetime`` was set to for a"
" particular cookie by reading the ``getLifetime()`` method::"
msgstr ""

#: ../../../components/http_foundation/session_configuration.rst:286
msgid ""
"The expiry time of the cookie can be determined by adding the created "
"timestamp and the lifetime."
msgstr ""

