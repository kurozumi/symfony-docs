# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the Symfony Framework
# Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Symfony Framework Documentation \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-08 14:21+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../../components/http_foundation/sessions.rst:6
msgid "Session Management"
msgstr ""

#: ../../../components/http_foundation/sessions.rst:8
msgid ""
"The Symfony HttpFoundation component has a very powerful and flexible "
"session subsystem which is designed to provide session management through"
" a clear object-oriented interface using a variety of session storage "
"drivers."
msgstr ""

#: ../../../components/http_foundation/sessions.rst:12
msgid ""
"Sessions are used via the "
":class:`Symfony\\\\Component\\\\HttpFoundation\\\\Session\\\\Session` "
"implementation of "
":class:`Symfony\\\\Component\\\\HttpFoundation\\\\Session\\\\SessionInterface`"
" interface."
msgstr ""

#: ../../../components/http_foundation/sessions.rst:17
msgid ""
"Make sure your PHP session isn't already started before using the Session"
" class. If you have a legacy session system that starts your session, see"
" :doc:`Legacy Sessions </components/http_foundation/session_php_bridge>`."
msgstr ""

#: ../../../components/http_foundation/sessions.rst:21
msgid "Quick example::"
msgstr ""

#: ../../../components/http_foundation/sessions.rst:42
msgid ""
"Symfony sessions are designed to replace several native PHP functions. "
"Applications should avoid using ``session_start()``, "
"``session_regenerate_id()``, ``session_id()``, ``session_name()``, and "
"``session_destroy()`` and instead use the APIs in the following section."
msgstr ""

#: ../../../components/http_foundation/sessions.rst:49
msgid ""
"While it is recommended to explicitly start a session, a session will "
"actually start on demand, that is, if any session request is made to "
"read/write session data."
msgstr ""

#: ../../../components/http_foundation/sessions.rst:55
msgid ""
"Symfony sessions are incompatible with ``php.ini`` directive "
"``session.auto_start = 1`` This directive should be turned off in "
"``php.ini``, in the webserver directives or in ``.htaccess``."
msgstr ""

#: ../../../components/http_foundation/sessions.rst:60
msgid "Session API"
msgstr ""

#: ../../../components/http_foundation/sessions.rst:62
msgid ""
"The :class:`Symfony\\\\Component\\\\HttpFoundation\\\\Session\\\\Session`"
" class implements "
":class:`Symfony\\\\Component\\\\HttpFoundation\\\\Session\\\\SessionInterface`."
msgstr ""

#: ../../../components/http_foundation/sessions.rst:65
msgid ""
"The :class:`Symfony\\\\Component\\\\HttpFoundation\\\\Session\\\\Session`"
" has the following API, divided into a couple of groups."
msgstr ""

#: ../../../components/http_foundation/sessions.rst:69
msgid "Session Workflow"
msgstr ""

#: ../../../components/http_foundation/sessions.rst:72
msgid ":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Session\\\\Session::start`"
msgstr ""

#: ../../../components/http_foundation/sessions.rst:72
msgid "Starts the session - do not use ``session_start()``."
msgstr ""

#: ../../../components/http_foundation/sessions.rst:77
msgid ":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Session\\\\Session::migrate`"
msgstr ""

#: ../../../components/http_foundation/sessions.rst:75
msgid ""
"Regenerates the session ID - do not use ``session_regenerate_id()``. This"
" method can optionally change the lifetime of the new cookie that will be"
" emitted by calling this method."
msgstr ""

#: ../../../components/http_foundation/sessions.rst:80
msgid ":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Session\\\\Session::invalidate`"
msgstr ""

#: ../../../components/http_foundation/sessions.rst:80
msgid ""
"Clears all session data and regenerates session ID. Do not use "
"``session_destroy()``."
msgstr ""

#: ../../../components/http_foundation/sessions.rst:83
msgid ":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Session\\\\Session::getId`"
msgstr ""

#: ../../../components/http_foundation/sessions.rst:83
msgid "Gets the session ID. Do not use ``session_id()``."
msgstr ""

#: ../../../components/http_foundation/sessions.rst:86
msgid ":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Session\\\\Session::setId`"
msgstr ""

#: ../../../components/http_foundation/sessions.rst:86
msgid "Sets the session ID. Do not use ``session_id()``."
msgstr ""

#: ../../../components/http_foundation/sessions.rst:89
msgid ":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Session\\\\Session::getName`"
msgstr ""

#: ../../../components/http_foundation/sessions.rst:89
msgid "Gets the session name. Do not use ``session_name()``."
msgstr ""

#: ../../../components/http_foundation/sessions.rst:92
msgid ":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Session\\\\Session::setName`"
msgstr ""

#: ../../../components/http_foundation/sessions.rst:92
msgid "Sets the session name. Do not use ``session_name()``."
msgstr ""

#: ../../../components/http_foundation/sessions.rst:95
msgid "Session Attributes"
msgstr ""

#: ../../../components/http_foundation/sessions.rst:97
msgid ""
"The session attributes are stored internally in a \"Bag\", a PHP object "
"that acts like an array. They can be set, removed, checked, etc. using "
"the methods explained later in this article for the "
"``AttributeBagInterface`` class. See :ref:`attribute-bag-interface`."
msgstr ""

#: ../../../components/http_foundation/sessions.rst:102
msgid "In addition, a few methods exist for \"Bag\" management:"
msgstr ""

#: ../../../components/http_foundation/sessions.rst:105
msgid ":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Session\\\\Session::registerBag`"
msgstr ""

#: ../../../components/http_foundation/sessions.rst:105
msgid ""
"Registers a "
":class:`Symfony\\\\Component\\\\HttpFoundation\\\\Session\\\\SessionBagInterface`."
msgstr ""

#: ../../../components/http_foundation/sessions.rst:109
msgid ":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Session\\\\Session::getBag`"
msgstr ""

#: ../../../components/http_foundation/sessions.rst:108
msgid ""
"Gets a "
":class:`Symfony\\\\Component\\\\HttpFoundation\\\\Session\\\\SessionBagInterface`"
" by bag name."
msgstr ""

#: ../../../components/http_foundation/sessions.rst:113
msgid ":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Session\\\\Session::getFlashBag`"
msgstr ""

#: ../../../components/http_foundation/sessions.rst:112
msgid ""
"Gets the "
":class:`Symfony\\\\Component\\\\HttpFoundation\\\\Session\\\\Flash\\\\FlashBagInterface`."
" This is just a shortcut for convenience."
msgstr ""

#: ../../../components/http_foundation/sessions.rst:116
msgid "Session Metadata"
msgstr ""

#: ../../../components/http_foundation/sessions.rst:120
msgid ":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Session\\\\Session::getMetadataBag`"
msgstr ""

#: ../../../components/http_foundation/sessions.rst:119
msgid ""
"Gets the "
":class:`Symfony\\\\Component\\\\HttpFoundation\\\\Session\\\\Storage\\\\MetadataBag`"
" which contains information about the session."
msgstr ""

#: ../../../components/http_foundation/sessions.rst:123
msgid "Session Data Management"
msgstr ""

#: ../../../components/http_foundation/sessions.rst:125
msgid ""
"PHP's session management requires the use of the ``$_SESSION`` super-"
"global, however, this interferes somewhat with code testability and "
"encapsulation in an OOP paradigm. To help overcome this, Symfony uses "
"*session bags* linked to the session to encapsulate a specific dataset of"
" attributes or flash messages."
msgstr ""

#: ../../../components/http_foundation/sessions.rst:130
msgid ""
"This approach also mitigates namespace pollution within the ``$_SESSION``"
" super-global because each bag stores all its data under a unique "
"namespace. This allows Symfony to peacefully co-exist with other "
"applications or libraries that might use the ``$_SESSION`` super-global "
"and all data remains completely compatible with Symfony's session "
"management."
msgstr ""

#: ../../../components/http_foundation/sessions.rst:136
msgid ""
"Symfony provides two kinds of storage bags, with two separate "
"implementations. Everything is written against interfaces so you may "
"extend or create your own bag types if necessary."
msgstr ""

#: ../../../components/http_foundation/sessions.rst:140
msgid ""
":class:`Symfony\\\\Component\\\\HttpFoundation\\\\Session\\\\SessionBagInterface`"
" has the following API which is intended mainly for internal purposes:"
msgstr ""

#: ../../../components/http_foundation/sessions.rst:145
msgid ":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Session\\\\SessionBagInterface::getStorageKey`"
msgstr ""

#: ../../../components/http_foundation/sessions.rst:144
msgid ""
"Returns the key which the bag will ultimately store its array under in "
"``$_SESSION``. Generally this value can be left at its default and is for"
" internal use."
msgstr ""

#: ../../../components/http_foundation/sessions.rst:149
msgid ":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Session\\\\SessionBagInterface::initialize`"
msgstr ""

#: ../../../components/http_foundation/sessions.rst:148
msgid ""
"This is called internally by Symfony session storage classes to link bag "
"data to the session."
msgstr ""

#: ../../../components/http_foundation/sessions.rst:152
msgid ":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Session\\\\SessionBagInterface::getName`"
msgstr ""

#: ../../../components/http_foundation/sessions.rst:152
msgid "Returns the name of the session bag."
msgstr ""

#: ../../../components/http_foundation/sessions.rst:157
msgid "Attributes"
msgstr ""

#: ../../../components/http_foundation/sessions.rst:159
msgid ""
"The purpose of the bags implementing the "
":class:`Symfony\\\\Component\\\\HttpFoundation\\\\Session\\\\Attribute\\\\AttributeBagInterface`"
" is to handle session attribute storage. This might include things like "
"user ID, and \"Remember Me\" login settings or other user based state "
"information."
msgstr ""

#: ../../../components/http_foundation/sessions.rst:164
msgid ":class:`Symfony\\\\Component\\\\HttpFoundation\\\\Session\\\\Attribute\\\\AttributeBag`"
msgstr ""

#: ../../../components/http_foundation/sessions.rst:164
msgid "This is the standard default implementation."
msgstr ""

#: ../../../components/http_foundation/sessions.rst:167
msgid ":class:`Symfony\\\\Component\\\\HttpFoundation\\\\Session\\\\Attribute\\\\NamespacedAttributeBag`"
msgstr ""

#: ../../../components/http_foundation/sessions.rst:167
msgid ""
"This implementation allows for attributes to be stored in a structured "
"namespace."
msgstr ""

#: ../../../components/http_foundation/sessions.rst:169
msgid ""
":class:`Symfony\\\\Component\\\\HttpFoundation\\\\Session\\\\Attribute\\\\AttributeBagInterface`"
" has the API"
msgstr ""

#: ../../../components/http_foundation/sessions.rst:173
msgid ":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Session\\\\Attribute\\\\AttributeBagInterface::set`"
msgstr ""

#: ../../../components/http_foundation/sessions.rst:173
msgid "Sets an attribute by name (``set('name', 'value')``)."
msgstr ""

#: ../../../components/http_foundation/sessions.rst:177
msgid ":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Session\\\\Attribute\\\\AttributeBagInterface::get`"
msgstr ""

#: ../../../components/http_foundation/sessions.rst:176
msgid ""
"Gets an attribute by name (``get('name')``) and can define a default "
"value when the attribute doesn't exist (``get('name', "
"'default_value')``)."
msgstr ""

#: ../../../components/http_foundation/sessions.rst:180
msgid ":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Session\\\\Attribute\\\\AttributeBagInterface::all`"
msgstr ""

#: ../../../components/http_foundation/sessions.rst:180
msgid "Gets all attributes as an associative array of ``name => value``."
msgstr ""

#: ../../../components/http_foundation/sessions.rst:183
msgid ":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Session\\\\Attribute\\\\AttributeBagInterface::has`"
msgstr ""

#: ../../../components/http_foundation/sessions.rst:183
msgid "Returns ``true`` if the attribute exists."
msgstr ""

#: ../../../components/http_foundation/sessions.rst:187
msgid ":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Session\\\\Attribute\\\\AttributeBagInterface::replace`"
msgstr ""

#: ../../../components/http_foundation/sessions.rst:186
msgid ""
"Sets multiple attributes at once using an associative array (``name => "
"value``). If the attributes existed, they are replaced; if not, they are "
"created."
msgstr ""

#: ../../../components/http_foundation/sessions.rst:190
msgid ":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Session\\\\Attribute\\\\AttributeBagInterface::remove`"
msgstr ""

#: ../../../components/http_foundation/sessions.rst:190
msgid "Deletes an attribute by name and returns its value."
msgstr ""

#: ../../../components/http_foundation/sessions.rst:193
msgid ":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Session\\\\Attribute\\\\AttributeBagInterface::clear`"
msgstr ""

#: ../../../components/http_foundation/sessions.rst:193
msgid "Deletes all attributes."
msgstr ""

#: ../../../components/http_foundation/sessions.rst:195
msgid "Example::"
msgstr ""

#: ../../../components/http_foundation/sessions.rst:213
msgid "Namespaced Attributes"
msgstr ""

#: ../../../components/http_foundation/sessions.rst:215
msgid ""
"Any plain key-value storage system is limited in the extent to which "
"complex data can be stored since each key must be unique. You can achieve"
" namespacing by introducing a naming convention to the keys so different "
"parts of your application could operate without clashing. For example, "
"``module1.foo`` and ``module2.foo``. However, sometimes this is not very "
"practical when the attributes data is an array, for example a set of "
"tokens. In this case, managing the array becomes a burden because you "
"have to retrieve the array then process it and store it again::"
msgstr ""

#: ../../../components/http_foundation/sessions.rst:231
msgid ""
"So any processing of this might quickly get ugly, even adding a token to "
"the array::"
msgstr ""

#: ../../../components/http_foundation/sessions.rst:237
msgid ""
"With structured namespacing, the key can be translated to the array "
"structure like this using a namespace character (which defaults to "
"``/``)::"
msgstr ""

#: ../../../components/http_foundation/sessions.rst:247
msgid "Flash Messages"
msgstr ""

#: ../../../components/http_foundation/sessions.rst:249
msgid ""
"The purpose of the "
":class:`Symfony\\\\Component\\\\HttpFoundation\\\\Session\\\\Flash\\\\FlashBagInterface`"
" is to provide a way of setting and retrieving messages on a per session "
"basis. The usual workflow would be to set flash messages in a request and"
" to display them after a page redirect. For example, a user submits a "
"form which hits an update controller, and after processing the controller"
" redirects the page to either the updated page or an error page. Flash "
"messages set in the previous page request would be displayed immediately "
"on the subsequent page load for that session. This is however just one "
"application for flash messages."
msgstr ""

#: ../../../components/http_foundation/sessions.rst:261
msgid ":class:`Symfony\\\\Component\\\\HttpFoundation\\\\Session\\\\Flash\\\\AutoExpireFlashBag`"
msgstr ""

#: ../../../components/http_foundation/sessions.rst:259
msgid ""
"In this implementation, messages set in one page-load will be available "
"for display only on the next page load. These messages will auto expire "
"regardless of if they are retrieved or not."
msgstr ""

#: ../../../components/http_foundation/sessions.rst:266
msgid ":class:`Symfony\\\\Component\\\\HttpFoundation\\\\Session\\\\Flash\\\\FlashBag`"
msgstr ""

#: ../../../components/http_foundation/sessions.rst:264
msgid ""
"In this implementation, messages will remain in the session until they "
"are explicitly retrieved or cleared. This makes it possible to use ESI "
"caching."
msgstr ""

#: ../../../components/http_foundation/sessions.rst:268
msgid ""
":class:`Symfony\\\\Component\\\\HttpFoundation\\\\Session\\\\Flash\\\\FlashBagInterface`"
" has the API"
msgstr ""

#: ../../../components/http_foundation/sessions.rst:272
msgid ":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Session\\\\Flash\\\\FlashBagInterface::add`"
msgstr ""

#: ../../../components/http_foundation/sessions.rst:272
msgid "Adds a flash message to the stack of specified type."
msgstr ""

#: ../../../components/http_foundation/sessions.rst:276
msgid ":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Session\\\\Flash\\\\FlashBagInterface::set`"
msgstr ""

#: ../../../components/http_foundation/sessions.rst:275
msgid ""
"Sets flashes by type; This method conveniently takes both single messages"
" as a ``string`` or multiple messages in an ``array``."
msgstr ""

#: ../../../components/http_foundation/sessions.rst:279
msgid ":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Session\\\\Flash\\\\FlashBagInterface::get`"
msgstr ""

#: ../../../components/http_foundation/sessions.rst:279
msgid "Gets flashes by type and clears those flashes from the bag."
msgstr ""

#: ../../../components/http_foundation/sessions.rst:282
msgid ":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Session\\\\Flash\\\\FlashBagInterface::setAll`"
msgstr ""

#: ../../../components/http_foundation/sessions.rst:282
msgid "Sets all flashes, accepts a keyed array of arrays ``type => [messages]``."
msgstr ""

#: ../../../components/http_foundation/sessions.rst:285
msgid ":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Session\\\\Flash\\\\FlashBagInterface::all`"
msgstr ""

#: ../../../components/http_foundation/sessions.rst:285
msgid ""
"Gets all flashes (as a keyed array of arrays) and clears the flashes from"
" the bag."
msgstr ""

#: ../../../components/http_foundation/sessions.rst:288
msgid ":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Session\\\\Flash\\\\FlashBagInterface::peek`"
msgstr ""

#: ../../../components/http_foundation/sessions.rst:288
msgid "Gets flashes by type (read only)."
msgstr ""

#: ../../../components/http_foundation/sessions.rst:291
msgid ":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Session\\\\Flash\\\\FlashBagInterface::peekAll`"
msgstr ""

#: ../../../components/http_foundation/sessions.rst:291
msgid "Gets all flashes (read only) as keyed array of arrays."
msgstr ""

#: ../../../components/http_foundation/sessions.rst:294
msgid ":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Session\\\\Flash\\\\FlashBagInterface::has`"
msgstr ""

#: ../../../components/http_foundation/sessions.rst:294
msgid "Returns true if the type exists, false if not."
msgstr ""

#: ../../../components/http_foundation/sessions.rst:297
msgid ":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Session\\\\Flash\\\\FlashBagInterface::keys`"
msgstr ""

#: ../../../components/http_foundation/sessions.rst:297
msgid "Returns an array of the stored flash types."
msgstr ""

#: ../../../components/http_foundation/sessions.rst:300
msgid ":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Session\\\\Flash\\\\FlashBagInterface::clear`"
msgstr ""

#: ../../../components/http_foundation/sessions.rst:300
msgid "Clears the bag."
msgstr ""

#: ../../../components/http_foundation/sessions.rst:302
msgid ""
"For simple applications it is usually sufficient to have one flash "
"message per type, for example a confirmation notice after a form is "
"submitted. However, flash messages are stored in a keyed array by flash "
"``$type`` which means your application can issue multiple messages for a "
"given type. This allows the API to be used for more complex messaging in "
"your application."
msgstr ""

#: ../../../components/http_foundation/sessions.rst:308
msgid "Examples of setting multiple flashes::"
msgstr ""

#: ../../../components/http_foundation/sessions.rst:323
msgid "Displaying the flash messages might look as follows."
msgstr ""

#: ../../../components/http_foundation/sessions.rst:325
msgid "Display one type of message::"
msgstr ""

#: ../../../components/http_foundation/sessions.rst:337
msgid "Compact method to process display all flashes at once::"
msgstr ""

