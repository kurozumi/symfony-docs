# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the Symfony Framework
# Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Symfony Framework Documentation \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-08 14:21+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../../components/property_info.rst:6
msgid "The PropertyInfo Component"
msgstr ""

#: ../../../components/property_info.rst:8
msgid ""
"The PropertyInfo component allows you to get information about class "
"properties by using different sources of metadata."
msgstr ""

#: ../../../components/property_info.rst:11
msgid ""
"While the :doc:`PropertyAccess component </components/property_access>` "
"allows you to read and write values to/from objects and arrays, the "
"PropertyInfo component works solely with class definitions to provide "
"information about the data type and visibility - including via getter or "
"setter methods - of the properties within that class."
msgstr ""

#: ../../../components/property_info.rst:20
msgid "Installation"
msgstr ""

#: ../../../components/require_autoload.rst.inc:3
msgid ""
"If you install this component outside of a Symfony application, you must "
"require the ``vendor/autoload.php`` file in your code to enable the class"
" autoloading mechanism provided by Composer. Read :doc:`this article "
"</components/using_components>` for more details."
msgstr ""

#: ../../../components/property_info.rst:28
msgid ""
"Additional dependencies may be required for some of the :ref:`extractors "
"provided with this component <components-property-info-extractors>`."
msgstr ""

#: ../../../components/property_info.rst:34
msgid "Usage"
msgstr ""

#: ../../../components/property_info.rst:36
msgid ""
"To use this component, create a new "
":class:`Symfony\\\\Component\\\\PropertyInfo\\\\PropertyInfoExtractor` "
"instance and provide it with a set of information extractors::"
msgstr ""

#: ../../../components/property_info.rst:77
msgid "Extractor Ordering"
msgstr ""

#: ../../../components/property_info.rst:79
msgid ""
"The order of extractor instances within an array matters: the first non-"
"null result will be returned. That is why you must provide each category "
"of extractors as a separate array, even if an extractor provides "
"information for more than one category."
msgstr ""

#: ../../../components/property_info.rst:84
msgid ""
"For example, while the "
":class:`Symfony\\\\Component\\\\PropertyInfo\\\\Extractor\\\\ReflectionExtractor`"
" and "
":class:`Symfony\\\\Bridge\\\\Doctrine\\\\PropertyInfo\\\\DoctrineExtractor`"
" both provide list and type information it is probably better that:"
msgstr ""

#: ../../../components/property_info.rst:88
msgid ""
"The "
":class:`Symfony\\\\Component\\\\PropertyInfo\\\\Extractor\\\\ReflectionExtractor`"
" has priority for list information so that all properties in a class (not"
" just mapped properties) are returned."
msgstr ""

#: ../../../components/property_info.rst:91
msgid ""
"The "
":class:`Symfony\\\\Bridge\\\\Doctrine\\\\PropertyInfo\\\\DoctrineExtractor`"
" has priority for type information so that entity metadata is used "
"instead of type-hinting to provide more accurate type information::"
msgstr ""

#: ../../../components/property_info.rst:118
msgid "Extractable Information"
msgstr ""

#: ../../../components/property_info.rst:120
msgid ""
"The "
":class:`Symfony\\\\Component\\\\PropertyInfo\\\\PropertyInfoExtractor` "
"class exposes public methods to extract several types of information:"
msgstr ""

#: ../../../components/property_info.rst:123
msgid ""
":ref:`List of properties <property-info-list>`: "
":method:`Symfony\\\\Component\\\\PropertyInfo\\\\PropertyListExtractorInterface::getProperties`"
msgstr ""

#: ../../../components/property_info.rst:124
msgid ""
":ref:`Property type <property-info-type>`: "
":method:`Symfony\\\\Component\\\\PropertyInfo\\\\PropertyTypeExtractorInterface::getTypes`"
msgstr ""

#: ../../../components/property_info.rst:125
msgid ""
":ref:`Property description <property-info-description>`: "
":method:`Symfony\\\\Component\\\\PropertyInfo\\\\PropertyDescriptionExtractorInterface::getShortDescription`"
" and "
":method:`Symfony\\\\Component\\\\PropertyInfo\\\\PropertyDescriptionExtractorInterface::getLongDescription`"
msgstr ""

#: ../../../components/property_info.rst:126
msgid ""
":ref:`Property access details <property-info-access>`: "
":method:`Symfony\\\\Component\\\\PropertyInfo\\\\PropertyAccessExtractorInterface::isReadable`"
" and  "
":method:`Symfony\\\\Component\\\\PropertyInfo\\\\PropertyAccessExtractorInterface::isWritable`"
msgstr ""

#: ../../../components/property_info.rst:127
msgid ""
":ref:`Property initializable through the constructor <property-info-"
"initializable>`:  "
":method:`Symfony\\\\Component\\\\PropertyInfo\\\\PropertyInitializableExtractorInterface::isInitializable`"
msgstr ""

#: ../../../components/property_info.rst:131
msgid "Be sure to pass a *class* name, not an object to the extractor methods::"
msgstr ""

#: ../../../components/property_info.rst:144
msgid "List Information"
msgstr ""

#: ../../../components/property_info.rst:146
msgid ""
"Extractors that implement "
":class:`Symfony\\\\Component\\\\PropertyInfo\\\\PropertyListExtractorInterface`"
" provide the list of properties that are available on a class as an array"
" containing each property name as a string::"
msgstr ""

#: ../../../components/property_info.rst:164
msgid "Type Information"
msgstr ""

#: ../../../components/property_info.rst:166
msgid ""
"Extractors that implement "
":class:`Symfony\\\\Component\\\\PropertyInfo\\\\PropertyTypeExtractorInterface`"
" provide :ref:`extensive data type information <components-property-info-"
"type>` for a property::"
msgstr ""

#: ../../../components/property_info.rst:187
msgid ""
"See :ref:`components-property-info-type` for info about the ``Type`` "
"class."
msgstr ""

#: ../../../components/property_info.rst:192
msgid "Description Information"
msgstr ""

#: ../../../components/property_info.rst:194
msgid ""
"Extractors that implement "
":class:`Symfony\\\\Component\\\\PropertyInfo\\\\PropertyDescriptionExtractorInterface`"
" provide long and short descriptions from a properties annotations as "
"strings::"
msgstr ""

#: ../../../components/property_info.rst:217
msgid "Access Information"
msgstr ""

#: ../../../components/property_info.rst:219
msgid ""
"Extractors that implement "
":class:`Symfony\\\\Component\\\\PropertyInfo\\\\PropertyAccessExtractorInterface`"
" provide whether properties are readable or writable as booleans::"
msgstr ""

#: ../../../components/property_info.rst:228
msgid ""
"The "
":class:`Symfony\\\\Component\\\\PropertyInfo\\\\Extractor\\\\ReflectionExtractor`"
" looks for getter/isser/setter/hasser method in addition to whether or "
"not a property is public to determine if it's accessible. This based on "
"how the :doc:`PropertyAccess </components/property_access>` works."
msgstr ""

#: ../../../components/property_info.rst:236
msgid "Property Initializable Information"
msgstr ""

#: ../../../components/property_info.rst:238
msgid ""
"Extractors that implement "
":class:`Symfony\\\\Component\\\\PropertyInfo\\\\PropertyInitializableExtractorInterface`"
" provide whether properties are initializable through the class's "
"constructor as booleans::"
msgstr ""

#: ../../../components/property_info.rst:244
msgid ""
":method:`Symfony\\\\Component\\\\PropertyInfo\\\\Extractor\\\\ReflectionExtractor::isInitializable`"
" returns ``true`` if a constructor's parameter of the given class matches"
" the given property name."
msgstr ""

#: ../../../components/property_info.rst:250
msgid ""
"The main "
":class:`Symfony\\\\Component\\\\PropertyInfo\\\\PropertyInfoExtractor` "
"class implements all interfaces, delegating the extraction of property "
"information to the extractors that have been registered with it."
msgstr ""

#: ../../../components/property_info.rst:254
msgid ""
"This means that any method available on each of the extractors is also "
"available on the main "
":class:`Symfony\\\\Component\\\\PropertyInfo\\\\PropertyInfoExtractor` "
"class."
msgstr ""

#: ../../../components/property_info.rst:261
msgid "Type Objects"
msgstr ""

#: ../../../components/property_info.rst:263
msgid ""
"Compared to the other extractors, type information extractors provide "
"much more information than can be represented as simple scalar values. "
"Because of this, type extractors return an array of "
":class:`Symfony\\\\Component\\\\PropertyInfo\\\\Type` objects for each "
"type that the property supports."
msgstr ""

#: ../../../components/property_info.rst:268
msgid ""
"For example, if a property supports both ``integer`` and ``string`` (via "
"the ``@return int|string`` annotation), "
":method:`PropertyInfoExtractor::getTypes() "
"<Symfony\\\\Component\\\\PropertyInfo\\\\PropertyInfoExtractor::getTypes>`"
" will return an array containing **two** instances of the "
":class:`Symfony\\\\Component\\\\PropertyInfo\\\\Type` class."
msgstr ""

#: ../../../components/property_info.rst:276
msgid ""
"Most extractors will return only one "
":class:`Symfony\\\\Component\\\\PropertyInfo\\\\Type` instance. The "
":class:`Symfony\\\\Component\\\\PropertyInfo\\\\Extractor\\\\PhpDocExtractor`"
" is currently the only extractor that returns multiple instances in the "
"array."
msgstr ""

#: ../../../components/property_info.rst:280
msgid "Each object will provide 6 attributes, available in the 6 methods:"
msgstr ""

#: ../../../components/property_info.rst:285
msgid "``Type::getBuiltInType()``"
msgstr ""

#: ../../../components/property_info.rst:287
msgid ""
"The :method:`Type::getBuiltinType() "
"<Symfony\\\\Component\\\\PropertyInfo\\\\Type::getBuiltinType>` method "
"returns the built-in PHP data type, which can be one of these string "
"values: ``array``, ``bool``, ``callable``, ``float``, ``int``, "
"``iterable``, ``null``, ``object``, ``resource`` or ``string``."
msgstr ""

#: ../../../components/property_info.rst:292
msgid ""
"Constants inside the "
":class:`Symfony\\\\Component\\\\PropertyInfo\\\\Type` class, in the form "
"``Type::BUILTIN_TYPE_*``, are provided for convenience."
msgstr ""

#: ../../../components/property_info.rst:296
msgid "``Type::isNullable()``"
msgstr ""

#: ../../../components/property_info.rst:298
msgid ""
"The :method:`Type::isNullable() "
"<Symfony\\\\Component\\\\PropertyInfo\\\\Type::isNullable>` method will "
"return a boolean value indicating whether the property parameter can be "
"set to ``null``."
msgstr ""

#: ../../../components/property_info.rst:303
msgid "``Type::getClassName()``"
msgstr ""

#: ../../../components/property_info.rst:305
msgid ""
"If the :ref:`built-in PHP data type <components-property-info-type-"
"builtin>` is ``object``, the :method:`Type::getClassName() "
"<Symfony\\\\Component\\\\PropertyInfo\\\\Type::getClassName>` method will"
" return the fully-qualified class or interface name accepted."
msgstr ""

#: ../../../components/property_info.rst:310
msgid "``Type::isCollection()``"
msgstr ""

#: ../../../components/property_info.rst:312
msgid ""
"The :method:`Type::isCollection() "
"<Symfony\\\\Component\\\\PropertyInfo\\\\Type::isCollection>` method will"
" return a boolean value indicating if the property parameter is a "
"collection - a non-scalar value capable of containing other values. "
"Currently this returns ``true`` if:"
msgstr ""

#: ../../../components/property_info.rst:317
msgid ""
"The :ref:`built-in PHP data type <components-property-info-type-builtin>`"
" is ``array``;"
msgstr ""

#: ../../../components/property_info.rst:319
msgid ""
"The mutator method the property is derived from has a prefix of ``add`` "
"or ``remove`` (which are defined as the list of array mutator prefixes);"
msgstr ""

#: ../../../components/property_info.rst:321
msgid ""
"The `phpDocumentor`_ annotation is of type \"collection\" (e.g. ``@var "
"SomeClass<DateTime>``, ``@var SomeClass<integer,string>``, ``@var "
"Doctrine\\Common\\Collections\\Collection<App\\Entity\\SomeEntity>``, "
"etc.)"
msgstr ""

#: ../../../components/property_info.rst:326
msgid "``Type::getCollectionKeyType()`` & ``Type::getCollectionValueType()``"
msgstr ""

#: ../../../components/property_info.rst:328
msgid ""
"If the property is a collection, additional type objects may be returned "
"for both the key and value types of the collection (if the information is"
" available), via the :method:`Type::getCollectionKeyType() "
"<Symfony\\\\Component\\\\PropertyInfo\\\\Type::getCollectionKeyType>` and"
" :method:`Type::getCollectionValueType() "
"<Symfony\\\\Component\\\\PropertyInfo\\\\Type::getCollectionValueType>` "
"methods."
msgstr ""

#: ../../../components/property_info.rst:337
msgid "Extractors"
msgstr ""

#: ../../../components/property_info.rst:339
msgid ""
"The extraction of property information is performed by *extractor "
"classes*. An extraction class can provide one or more types of property "
"information by implementing the correct interface(s)."
msgstr ""

#: ../../../components/property_info.rst:343
msgid ""
"The "
":class:`Symfony\\\\Component\\\\PropertyInfo\\\\PropertyInfoExtractor` "
"will iterate over the relevant extractor classes in the order they were "
"set, call the appropriate method and return the first result that is not "
"``null``."
msgstr ""

#: ../../../components/property_info.rst:349
msgid ""
"While you can create your own extractors, the following are already "
"available to cover most use-cases:"
msgstr ""

#: ../../../components/property_info.rst:353
msgid "ReflectionExtractor"
msgstr ""

#: ../../../components/property_info.rst:355
msgid ""
"Using PHP reflection, the "
":class:`Symfony\\\\Component\\\\PropertyInfo\\\\Extractor\\\\ReflectionExtractor`"
" provides list, type and access information from setter and accessor "
"methods. It can also give the type of a property (even extracting it from"
" the constructor arguments), and if it is initializable through the "
"constructor. It supports return and scalar types for PHP 7::"
msgstr ""

#: ../../../components/property_info.rst:380
msgid ""
"When using the Symfony framework, this service is automatically "
"registered when the ``property_info`` feature is enabled:"
msgstr ""

#: ../../../components/property_info.rst:391
msgid "PhpDocExtractor"
msgstr ""

#: ../../../components/property_info.rst:395
msgid ""
"This extractor depends on the `phpdocumentor/reflection-docblock`_ "
"library."
msgstr ""

#: ../../../components/property_info.rst:397
msgid ""
"Using `phpDocumentor Reflection`_ to parse property and method "
"annotations, the "
":class:`Symfony\\\\Component\\\\PropertyInfo\\\\Extractor\\\\PhpDocExtractor`"
" provides type and description information. This extractor is "
"automatically registered with the ``property_info`` in the Symfony "
"Framework *if* the dependent library is present::"
msgstr ""

#: ../../../components/property_info.rst:414
msgid "SerializerExtractor"
msgstr ""

#: ../../../components/property_info.rst:418
msgid "This extractor depends on the `symfony/serializer`_ library."
msgstr ""

#: ../../../components/property_info.rst:420
msgid ""
"Using :ref:`groups metadata <serializer-using-serialization-groups-"
"annotations>` from the :doc:`Serializer component "
"</components/serializer>`, the "
":class:`Symfony\\\\Component\\\\PropertyInfo\\\\Extractor\\\\SerializerExtractor`"
" provides list information. This extractor is *not* registered "
"automatically with the ``property_info`` service in the Symfony "
"Framework::"
msgstr ""

#: ../../../components/property_info.rst:440
msgid "DoctrineExtractor"
msgstr ""

#: ../../../components/property_info.rst:444
msgid ""
"This extractor depends on the `symfony/doctrine-bridge`_ and "
"`doctrine/orm`_ libraries."
msgstr ""

#: ../../../components/property_info.rst:447
msgid ""
"Using entity mapping data from `Doctrine ORM`_, the "
":class:`Symfony\\\\Bridge\\\\Doctrine\\\\PropertyInfo\\\\DoctrineExtractor`"
" provides list and type information. This extractor is not registered "
"automatically with the ``property_info`` service in the Symfony "
"Framework::"
msgstr ""

#: ../../../components/property_info.rst:471
msgid "Creating Your Own Extractors"
msgstr ""

#: ../../../components/property_info.rst:473
msgid ""
"You can create your own property information extractors by creating a "
"class that implements one or more of the following interfaces: "
":class:`Symfony\\\\Component\\\\PropertyInfo\\\\PropertyAccessExtractorInterface`,"
" "
":class:`Symfony\\\\Component\\\\PropertyInfo\\\\PropertyDescriptionExtractorInterface`,"
" "
":class:`Symfony\\\\Component\\\\PropertyInfo\\\\PropertyListExtractorInterface`,"
" "
":class:`Symfony\\\\Component\\\\PropertyInfo\\\\PropertyTypeExtractorInterface`"
" and "
":class:`Symfony\\\\Component\\\\PropertyInfo\\\\PropertyInitializableExtractorInterface`."
msgstr ""

#: ../../../components/property_info.rst:481
msgid ""
"If you have enabled the PropertyInfo component with the FrameworkBundle, "
"you can automatically register your extractor class with the "
"``property_info`` service by defining it as a service with one or more of"
" the following :doc:`tags </service_container/tags>`:"
msgstr ""

#: ../../../components/property_info.rst:486
msgid "``property_info.list_extractor`` if it provides list information."
msgstr ""

#: ../../../components/property_info.rst:487
msgid "``property_info.type_extractor`` if it provides type information."
msgstr ""

#: ../../../components/property_info.rst:488
msgid ""
"``property_info.description_extractor`` if it provides description "
"information."
msgstr ""

#: ../../../components/property_info.rst:489
msgid "``property_info.access_extractor`` if it provides access information."
msgstr ""

