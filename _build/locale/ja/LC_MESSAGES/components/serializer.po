# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the Symfony Framework
# Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Symfony Framework Documentation \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-08 14:21+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../../components/serializer.rst:6
msgid "The Serializer Component"
msgstr ""

#: ../../../components/serializer.rst:8
msgid ""
"The Serializer component is meant to be used to turn objects into a "
"specific format (XML, JSON, YAML, ...) and the other way around."
msgstr ""

#: ../../../components/serializer.rst:11
msgid "In order to do so, the Serializer component follows the following schema."
msgstr ""

#: ../../../components/serializer.rst:17
msgid ""
"As you can see in the picture above, an array is used as an intermediary "
"between objects and serialized contents. This way, encoders will only "
"deal with turning specific **formats** into **arrays** and vice versa. "
"The same way, Normalizers will deal with turning specific **objects** "
"into **arrays** and vice versa."
msgstr ""

#: ../../../components/serializer.rst:22
msgid ""
"Serialization is a complex topic. This component may not cover all your "
"use cases out of the box, but it can be useful for developing tools to "
"serialize and deserialize your objects."
msgstr ""

#: ../../../components/serializer.rst:26
msgid "Installation"
msgstr ""

#: ../../../components/require_autoload.rst.inc:3
msgid ""
"If you install this component outside of a Symfony application, you must "
"require the ``vendor/autoload.php`` file in your code to enable the class"
" autoloading mechanism provided by Composer. Read :doc:`this article "
"</components/using_components>` for more details."
msgstr ""

#: ../../../components/serializer.rst:34
msgid ""
"To use the ``ObjectNormalizer``, the :doc:`PropertyAccess component "
"</components/property_access>` must also be installed."
msgstr ""

#: ../../../components/serializer.rst:38
msgid "Usage"
msgstr ""

#: ../../../components/serializer.rst:42
msgid ""
"This article explains the philosophy of the Serializer and gets you "
"familiar with the concepts of normalizers and encoders. The code examples"
" assume that you use the Serializer as an independent component. If you "
"are using the Serializer in a Symfony application, read "
":doc:`/serializer` after you finish this article."
msgstr ""

#: ../../../components/serializer.rst:48
msgid ""
"To use the Serializer component, set up the "
":class:`Symfony\\\\Component\\\\Serializer\\\\Serializer` specifying "
"which encoders and normalizer are going to be available::"
msgstr ""

#: ../../../components/serializer.rst:62
msgid ""
"The preferred normalizer is the "
":class:`Symfony\\\\Component\\\\Serializer\\\\Normalizer\\\\ObjectNormalizer`,"
" but other normalizers are available. All the examples shown below use "
"the ``ObjectNormalizer``."
msgstr ""

#: ../../../components/serializer.rst:68
msgid "Serializing an Object"
msgstr ""

#: ../../../components/serializer.rst:70
msgid ""
"For the sake of this example, assume the following class already exists "
"in your project::"
msgstr ""

#: ../../../components/serializer.rst:126
msgid ""
"Now, if you want to serialize this object into JSON, you only need to use"
" the Serializer service created before::"
msgstr ""

#: ../../../components/serializer.rst:142
msgid ""
"The first parameter of the "
":method:`Symfony\\\\Component\\\\Serializer\\\\Serializer::serialize` is "
"the object to be serialized and the second is used to choose the proper "
"encoder, in this case "
":class:`Symfony\\\\Component\\\\Serializer\\\\Encoder\\\\JsonEncoder`."
msgstr ""

#: ../../../components/serializer.rst:147
msgid "Deserializing an Object"
msgstr ""

#: ../../../components/serializer.rst:149
msgid ""
"You'll now learn how to do the exact opposite. This time, the information"
" of the ``Person`` class would be encoded in XML format::"
msgstr ""

#: ../../../components/serializer.rst:164
msgid ""
"In this case, "
":method:`Symfony\\\\Component\\\\Serializer\\\\Serializer::deserialize` "
"needs three parameters:"
msgstr ""

#: ../../../components/serializer.rst:167
msgid "The information to be decoded"
msgstr ""

#: ../../../components/serializer.rst:168
msgid "The name of the class this information will be decoded to"
msgstr ""

#: ../../../components/serializer.rst:169
msgid "The encoder used to convert that information into an array"
msgstr ""

#: ../../../components/serializer.rst:171
msgid ""
"By default, additional attributes that are not mapped to the denormalized"
" object will be ignored by the Serializer component. If you prefer to "
"throw an exception when this happens, set the "
"``AbstractNormalizer::ALLOW_EXTRA_ATTRIBUTES`` context option to "
"``false`` and provide an object that implements "
"``ClassMetadataFactoryInterface`` when constructing the normalizer::"
msgstr ""

#: ../../../components/serializer.rst:197
msgid "Deserializing in an Existing Object"
msgstr ""

#: ../../../components/serializer.rst:199
msgid "The serializer can also be used to update an existing object::"
msgstr ""

#: ../../../components/serializer.rst:217
msgid "This is a common need when working with an ORM."
msgstr ""

#: ../../../components/serializer.rst:219
msgid ""
"The ``AbstractNormalizer::OBJECT_TO_POPULATE`` is only used for the top "
"level object. If that object is the root of a tree structure, all child "
"elements that exist in the normalized data will be re-created with new "
"instances."
msgstr ""

#: ../../../components/serializer.rst:223
msgid ""
"When the ``AbstractObjectNormalizer::DEEP_OBJECT_TO_POPULATE`` option is "
"set to true, existing children of the root ``OBJECT_TO_POPULATE`` are "
"updated from the normalized data, instead of the denormalizer re-creating"
" them. Note that ``DEEP_OBJECT_TO_POPULATE`` only works for single child "
"objects, but not for arrays of objects. Those will still be replaced when"
" present in the normalized data."
msgstr ""

#: ../../../components/serializer.rst:233
msgid "Attributes Groups"
msgstr ""

#: ../../../components/serializer.rst:235
msgid ""
"Sometimes, you want to serialize different sets of attributes from your "
"entities. Groups are a handy way to achieve this need."
msgstr ""

#: ../../../components/serializer.rst:238
msgid "Assume you have the following plain-old-PHP object::"
msgstr ""

#: ../../../components/serializer.rst:259
msgid ""
"The definition of serialization can be specified using annotations, XML "
"or YAML. The "
":class:`Symfony\\\\Component\\\\Serializer\\\\Mapping\\\\Factory\\\\ClassMetadataFactory`"
" that will be used by the normalizer must be aware of the format to use."
msgstr ""

#: ../../../components/serializer.rst:263
msgid ""
"The following code shows how to initialize the "
":class:`Symfony\\\\Component\\\\Serializer\\\\Mapping\\\\Factory\\\\ClassMetadataFactory`"
" for each format:"
msgstr ""

#: ../../../components/serializer.rst:266
msgid "Annotations in PHP files::"
msgstr ""

#: ../../../components/serializer.rst:274
msgid "YAML files::"
msgstr ""

#: ../../../components/serializer.rst:281
msgid "XML files::"
msgstr ""

#: ../../../components/serializer.rst:290
msgid "Then, create your groups definition:"
msgstr ""

#: ../../../components/serializer.rst:347
msgid "You are now able to serialize only attributes in the groups you want::"
msgstr ""

#: ../../../components/serializer.rst:373
msgid "Selecting Specific Attributes"
msgstr ""

#: ../../../components/serializer.rst:375
msgid "It is also possible to serialize only a set of specific attributes::"
msgstr ""

#: ../../../components/serializer.rst:408
msgid ""
"Only attributes that are not ignored (see below) are available. If some "
"serialization groups are set, only attributes allowed by those groups can"
" be used."
msgstr ""

#: ../../../components/serializer.rst:411
msgid ""
"As for groups, attributes can be selected during both the serialization "
"and deserialization process."
msgstr ""

#: ../../../components/serializer.rst:414
msgid "Ignoring Attributes"
msgstr ""

#: ../../../components/serializer.rst:416
msgid ""
"As an option, there's a way to ignore attributes from the origin object. "
"To remove those attributes provide an array via the "
"``AbstractNormalizer::IGNORED_ATTRIBUTES`` key in the ``context`` "
"parameter of the desired serializer method::"
msgstr ""

#: ../../../components/serializer.rst:439
msgid "Converting Property Names when Serializing and Deserializing"
msgstr ""

#: ../../../components/serializer.rst:441
msgid ""
"Sometimes serialized attributes must be named differently than properties"
" or getter/setter methods of PHP classes."
msgstr ""

#: ../../../components/serializer.rst:444
msgid ""
"The Serializer component provides a handy way to translate or map PHP "
"field names to serialized names: The Name Converter System."
msgstr ""

#: ../../../components/serializer.rst:447
msgid "Given you have the following object::"
msgstr ""

#: ../../../components/serializer.rst:455
msgid ""
"And in the serialized form, all attributes must be prefixed by ``org_`` "
"like the following::"
msgstr ""

#: ../../../components/serializer.rst:460
msgid "A custom name converter can handle such cases::"
msgstr ""

#: ../../../components/serializer.rst:478
msgid ""
"The custom name converter can be used by passing it as second parameter "
"of any class extending "
":class:`Symfony\\\\Component\\\\Serializer\\\\Normalizer\\\\AbstractNormalizer`,"
" including "
":class:`Symfony\\\\Component\\\\Serializer\\\\Normalizer\\\\GetSetMethodNormalizer`"
" and "
":class:`Symfony\\\\Component\\\\Serializer\\\\Normalizer\\\\PropertyNormalizer`::"
msgstr ""

#: ../../../components/serializer.rst:503
msgid ""
"You can also implement "
":class:`Symfony\\\\Component\\\\Serializer\\\\NameConverter\\\\AdvancedNameConverterInterface`"
" to access to the current class name, format and context."
msgstr ""

#: ../../../components/serializer.rst:510
msgid "CamelCase to snake_case"
msgstr ""

#: ../../../components/serializer.rst:512
msgid ""
"In many formats, it's common to use underscores to separate words (also "
"known as snake_case). However, in Symfony applications is common to use "
"CamelCase to name properties (even though the `PSR-1 standard`_ doesn't "
"recommend any specific case for property names)."
msgstr ""

#: ../../../components/serializer.rst:517
msgid ""
"Symfony provides a built-in name converter designed to transform between "
"snake_case and CamelCased styles during serialization and deserialization"
" processes::"
msgstr ""

#: ../../../components/serializer.rst:549
msgid "Configure name conversion using metadata"
msgstr ""

#: ../../../components/serializer.rst:551
#: ../../../components/serializer.rst:1340
msgid ""
"When using this component inside a Symfony application and the class "
"metadata factory is enabled as explained in the :ref:`Attributes Groups "
"section <component-serializer-attributes-groups>`, this is already set up"
" and you only need to provide the configuration. Otherwise::"
msgstr ""

#: ../../../components/serializer.rst:570
msgid ""
"Now configure your name conversion mapping. Consider an application that "
"defines a ``Person`` entity with a ``firstName`` property:"
msgstr ""

#: ../../../components/serializer.rst:616
msgid ""
"This custom mapping is used to convert property names when serializing "
"and deserializing objects::"
msgstr ""

#: ../../../components/serializer.rst:623
msgid "Serializing Boolean Attributes"
msgstr ""

#: ../../../components/serializer.rst:625
msgid ""
"If you are using isser methods (methods prefixed by ``is``, like "
"``App\\Model\\Person::isSportsperson()``), the Serializer component will "
"automatically detect and use it to serialize related attributes."
msgstr ""

#: ../../../components/serializer.rst:629
msgid ""
"The ``ObjectNormalizer`` also takes care of methods starting with "
"``has``, ``add`` and ``remove``."
msgstr ""

#: ../../../components/serializer.rst:633
msgid "Using Callbacks to Serialize Properties with Object Instances"
msgstr ""

#: ../../../components/serializer.rst:635
msgid ""
"When serializing, you can set a callback to format a specific object "
"property::"
msgstr ""

#: ../../../components/serializer.rst:670
msgid "Normalizers"
msgstr ""

#: ../../../components/serializer.rst:672
msgid "There are several types of normalizers available:"
msgstr ""

#: ../../../components/serializer.rst:686
msgid ":class:`Symfony\\\\Component\\\\Serializer\\\\Normalizer\\\\ObjectNormalizer`"
msgstr ""

#: ../../../components/serializer.rst:675
msgid ""
"This normalizer leverages the :doc:`PropertyAccess Component "
"</components/property_access>` to read and write in the object. It means "
"that it can access to properties directly and through getters, setters, "
"hassers, issers, adders and removers. It supports calling the constructor"
" during the denormalization process."
msgstr ""

#: ../../../components/serializer.rst:680
msgid ""
"Objects are normalized to a map of property names and values (names are "
"generated removing the ``get``, ``set``, ``has``, ``is``, ``add`` or "
"``remove`` prefix from the method name and transforming the first letter "
"to lowercase; e.g. ``getFirstName()`` -> ``firstName``)."
msgstr ""

#: ../../../components/serializer.rst:685
msgid ""
"The ``ObjectNormalizer`` is the most powerful normalizer. It is "
"configured by default in Symfony applications with the Serializer "
"component enabled."
msgstr ""

#: ../../../components/serializer.rst:695
msgid ":class:`Symfony\\\\Component\\\\Serializer\\\\Normalizer\\\\GetSetMethodNormalizer`"
msgstr ""

#: ../../../components/serializer.rst:689
msgid ""
"This normalizer reads the content of the class by calling the \"getters\""
" (public methods starting with \"get\"). It will denormalize data by "
"calling the constructor and the \"setters\" (public methods starting with"
" \"set\")."
msgstr ""

#: ../../../components/serializer.rst:693
msgid ""
"Objects are normalized to a map of property names and values (names are "
"generated removing the ``get`` prefix from the method name and "
"transforming the first letter to lowercase; e.g. ``getFirstName()`` -> "
"``firstName``)."
msgstr ""

#: ../../../components/serializer.rst:702
msgid ":class:`Symfony\\\\Component\\\\Serializer\\\\Normalizer\\\\PropertyNormalizer`"
msgstr ""

#: ../../../components/serializer.rst:698
msgid ""
"This normalizer directly reads and writes public properties as well as "
"**private and protected** properties (from both the class and all of its "
"parent classes). It supports calling the constructor during the "
"denormalization process."
msgstr ""

#: ../../../components/serializer.rst:702
msgid "Objects are normalized to a map of property names to property values."
msgstr ""

#: ../../../components/serializer.rst:715
msgid ":class:`Symfony\\\\Component\\\\Serializer\\\\Normalizer\\\\JsonSerializableNormalizer`"
msgstr ""

#: ../../../components/serializer.rst:705
msgid ""
"This normalizer works with classes that implement "
":phpclass:`JsonSerializable`."
msgstr ""

#: ../../../components/serializer.rst:707
msgid ""
"It will call the :phpmethod:`JsonSerializable::jsonSerialize` method and "
"then further normalize the result. This means that nested "
":phpclass:`JsonSerializable` classes will also be normalized."
msgstr ""

#: ../../../components/serializer.rst:711
msgid ""
"This normalizer is particularly helpful when you want to gradually "
"migrate from an existing codebase using simple :phpfunction:`json_encode`"
" to the Symfony Serializer by allowing you to mix which normalizers are "
"used for which classes."
msgstr ""

#: ../../../components/serializer.rst:715
msgid "Unlike with :phpfunction:`json_encode` circular references can be handled."
msgstr ""

#: ../../../components/serializer.rst:720
msgid ":class:`Symfony\\\\Component\\\\Serializer\\\\Normalizer\\\\DateTimeNormalizer`"
msgstr ""

#: ../../../components/serializer.rst:718
msgid ""
"This normalizer converts :phpclass:`DateTimeInterface` objects (e.g. "
":phpclass:`DateTime` and :phpclass:`DateTimeImmutable`) into strings. By "
"default, it uses the `RFC3339`_ format."
msgstr ""

#: ../../../components/serializer.rst:724
msgid ":class:`Symfony\\\\Component\\\\Serializer\\\\Normalizer\\\\DateTimeZoneNormalizer`"
msgstr ""

#: ../../../components/serializer.rst:723
msgid ""
"This normalizer converts :phpclass:`DateTimeZone` objects into strings "
"that represent the name of the timezone according to the `list of PHP "
"timezones`_."
msgstr ""

#: ../../../components/serializer.rst:728
msgid ":class:`Symfony\\\\Component\\\\Serializer\\\\Normalizer\\\\DataUriNormalizer`"
msgstr ""

#: ../../../components/serializer.rst:727
msgid ""
"This normalizer converts :phpclass:`SplFileInfo` objects into a data URI "
"string (``data:...``) such that files can be embedded into serialized "
"data."
msgstr ""

#: ../../../components/serializer.rst:732
msgid ":class:`Symfony\\\\Component\\\\Serializer\\\\Normalizer\\\\DateIntervalNormalizer`"
msgstr ""

#: ../../../components/serializer.rst:731
#, python-format
msgid ""
"This normalizer converts :phpclass:`DateInterval` objects into strings. "
"By default, it uses the ``P%yY%mM%dDT%hH%iM%sS`` format."
msgstr ""

#: ../../../components/serializer.rst:737
msgid ":class:`Symfony\\\\Component\\\\Serializer\\\\Normalizer\\\\ConstraintViolationListNormalizer`"
msgstr ""

#: ../../../components/serializer.rst:735
msgid ""
"This normalizer converts objects that implement "
":class:`Symfony\\\\Component\\\\Validator\\\\ConstraintViolationListInterface`"
" into a list of errors according to the `RFC 7807`_ standard."
msgstr ""

#: ../../../components/serializer.rst:742
msgid "Encoders"
msgstr ""

#: ../../../components/serializer.rst:744
msgid ""
"Encoders turn **arrays** into **formats** and vice versa. They implement "
":class:`Symfony\\\\Component\\\\Serializer\\\\Encoder\\\\EncoderInterface`"
" for encoding (array to format) and "
":class:`Symfony\\\\Component\\\\Serializer\\\\Encoder\\\\DecoderInterface`"
" for decoding (format to array)."
msgstr ""

#: ../../../components/serializer.rst:750
msgid ""
"You can add new encoders to a Serializer instance by using its second "
"constructor argument::"
msgstr ""

#: ../../../components/serializer.rst:760
msgid "Built-in Encoders"
msgstr ""

#: ../../../components/serializer.rst:762
msgid "The Serializer component provides several built-in encoders:"
msgstr ""

#: ../../../components/serializer.rst:765
msgid ":class:`Symfony\\\\Component\\\\Serializer\\\\Encoder\\\\JsonEncoder`"
msgstr ""

#: ../../../components/serializer.rst:765
msgid "This class encodes and decodes data in `JSON`_."
msgstr ""

#: ../../../components/serializer.rst:768
msgid ":class:`Symfony\\\\Component\\\\Serializer\\\\Encoder\\\\XmlEncoder`"
msgstr ""

#: ../../../components/serializer.rst:768
msgid "This class encodes and decodes data in `XML`_."
msgstr ""

#: ../../../components/serializer.rst:772
msgid ":class:`Symfony\\\\Component\\\\Serializer\\\\Encoder\\\\YamlEncoder`"
msgstr ""

#: ../../../components/serializer.rst:771
msgid ""
"This encoder encodes and decodes data in `YAML`_. This encoder requires "
"the :doc:`Yaml Component </components/yaml>`."
msgstr ""

#: ../../../components/serializer.rst:775
msgid ":class:`Symfony\\\\Component\\\\Serializer\\\\Encoder\\\\CsvEncoder`"
msgstr ""

#: ../../../components/serializer.rst:775
msgid "This encoder encodes and decodes data in `CSV`_."
msgstr ""

#: ../../../components/serializer.rst:777
msgid ""
"All these encoders are enabled by default when using the Serializer "
"component in a Symfony application."
msgstr ""

#: ../../../components/serializer.rst:781
msgid "The ``JsonEncoder``"
msgstr ""

#: ../../../components/serializer.rst:783
msgid ""
"The ``JsonEncoder`` encodes to and decodes from JSON strings, based on "
"the PHP :phpfunction:`json_encode` and :phpfunction:`json_decode` "
"functions."
msgstr ""

#: ../../../components/serializer.rst:787
msgid "The ``CsvEncoder``"
msgstr ""

#: ../../../components/serializer.rst:789
msgid "The ``CsvEncoder`` encodes to and decodes from CSV."
msgstr ""

#: ../../../components/serializer.rst:792
#: ../../../components/serializer.rst:1149
msgid "The ``XmlEncoder``"
msgstr ""

#: ../../../components/serializer.rst:794
msgid "This encoder transforms arrays into XML and vice versa."
msgstr ""

#: ../../../components/serializer.rst:796
msgid "For example, take an object normalized as following::"
msgstr ""

#: ../../../components/serializer.rst:800
msgid "The ``XmlEncoder`` will encode this object like that::"
msgstr ""

#: ../../../components/serializer.rst:809
msgid ""
"Be aware that this encoder will consider keys beginning with ``@`` as "
"attributes, and will use the key  ``#comment`` for encoding XML "
"comments::"
msgstr ""

#: ../../../components/serializer.rst:824
msgid ""
"You can pass the context key ``as_collection`` in order to have the "
"results always as a collection."
msgstr ""

#: ../../../components/serializer.rst:829
msgid ""
"XML comments are ignored by default when decoding contents, but this "
"behavior can be changed with the optional ``$decoderIgnoredNodeTypes`` "
"argument of the ``XmlEncoder`` class constructor."
msgstr ""

#: ../../../components/serializer.rst:833
msgid ""
"Data with ``#comment`` keys are encoded to XML comments by default. This "
"can be changed with the optional ``$encoderIgnoredNodeTypes`` argument of"
" the ``XmlEncoder`` class constructor."
msgstr ""

#: ../../../components/serializer.rst:838
msgid "The ``YamlEncoder``"
msgstr ""

#: ../../../components/serializer.rst:840
msgid ""
"This encoder requires the :doc:`Yaml Component </components/yaml>` and "
"transforms from and to Yaml."
msgstr ""

#: ../../../components/serializer.rst:844
msgid "Skipping ``null`` Values"
msgstr ""

#: ../../../components/serializer.rst:846
msgid ""
"By default, the Serializer will preserve properties containing a ``null``"
" value. You can change this behavior by setting the "
"``AbstractObjectNormalizer::SKIP_NULL_VALUES`` context option to "
"``true``::"
msgstr ""

#: ../../../components/serializer.rst:862
msgid "Handling Circular References"
msgstr ""

#: ../../../components/serializer.rst:864
msgid "Circular references are common when dealing with entity relations::"
msgstr ""

#: ../../../components/serializer.rst:918
msgid ""
"To avoid infinite loops, "
":class:`Symfony\\\\Component\\\\Serializer\\\\Normalizer\\\\GetSetMethodNormalizer`"
" or "
":class:`Symfony\\\\Component\\\\Serializer\\\\Normalizer\\\\ObjectNormalizer`"
" throw a "
":class:`Symfony\\\\Component\\\\Serializer\\\\Exception\\\\CircularReferenceException`"
" when such a case is encountered::"
msgstr ""

#: ../../../components/serializer.rst:934
msgid ""
"The key ``circular_reference_limit`` in the default context sets the "
"number of times it will serialize the same object before considering it a"
" circular reference. The default value is ``1``."
msgstr ""

#: ../../../components/serializer.rst:938
msgid ""
"Instead of throwing an exception, circular references can also be handled"
" by custom callables. This is especially useful when serializing entities"
" having unique identifiers::"
msgstr ""

#: ../../../components/serializer.rst:955
msgid "Handling Serialization Depth"
msgstr ""

#: ../../../components/serializer.rst:957
msgid ""
"The Serializer component is able to detect and limit the serialization "
"depth. It is especially useful when serializing large trees. Assume the "
"following data structure::"
msgstr ""

#: ../../../components/serializer.rst:984
msgid ""
"The serializer can be configured to set a maximum depth for a given "
"property. Here, we set it to 2 for the ``$child`` property:"
msgstr ""

#: ../../../components/serializer.rst:1025
msgid ""
"The metadata loader corresponding to the chosen format must be configured"
" in order to use this feature. It is done automatically when using the "
"Serializer component in a Symfony application. When using the standalone "
"component, refer to :ref:`the groups documentation <component-serializer-"
"attributes-groups>` to learn how to do that."
msgstr ""

#: ../../../components/serializer.rst:1031
msgid ""
"The check is only done if the "
"``AbstractObjectNormalizer::ENABLE_MAX_DEPTH`` key of the serializer "
"context is set to ``true``. In the following example, the third level is "
"not serialized because it is deeper than the configured maximum depth of "
"2::"
msgstr ""

#: ../../../components/serializer.rst:1048
msgid ""
"Instead of throwing an exception, a custom callable can be executed when "
"the maximum depth is reached. This is especially useful when serializing "
"entities having unique identifiers::"
msgstr ""

#: ../../../components/serializer.rst:1107
msgid "Handling Arrays"
msgstr ""

#: ../../../components/serializer.rst:1109
msgid ""
"The Serializer component is capable of handling arrays of objects as "
"well. Serializing arrays works just like serializing a single object::"
msgstr ""

#: ../../../components/serializer.rst:1129
msgid ""
"If you want to deserialize such a structure, you need to add the "
":class:`Symfony\\\\Component\\\\Serializer\\\\Normalizer\\\\ArrayDenormalizer`"
" to the set of normalizers. By appending ``[]`` to the type parameter of "
"the "
":method:`Symfony\\\\Component\\\\Serializer\\\\Serializer::deserialize` "
"method, you indicate that you're expecting an array instead of a single "
"object::"
msgstr ""

#: ../../../components/serializer.rst:1151
msgid ""
"This encoder transforms arrays into XML and vice versa. For example, take"
" an object normalized as following::"
msgstr ""

#: ../../../components/serializer.rst:1156
msgid "The ``XmlEncoder`` encodes this object as follows:"
msgstr ""

#: ../../../components/serializer.rst:1167
msgid "The array keys beginning with ``@`` are considered XML attributes::"
msgstr ""

#: ../../../components/serializer.rst:1177
msgid "Use the special ``#`` key to define the data of a node::"
msgstr ""

#: ../../../components/serializer.rst:1190
msgid "Context"
msgstr ""

#: ../../../components/serializer.rst:1192
msgid ""
"The ``encode()`` method defines a third optional parameter called "
"``context`` which defines the configuration options for the XmlEncoder an"
" associative array::"
msgstr ""

#: ../../../components/serializer.rst:1197
msgid "These are the options available:"
msgstr ""

#: ../../../components/serializer.rst:1200
msgid "``xml_format_output``"
msgstr ""

#: ../../../components/serializer.rst:1200
msgid ""
"If set to true, formats the generated XML with line breaks and "
"indentation."
msgstr ""

#: ../../../components/serializer.rst:1203
msgid "``xml_version``"
msgstr ""

#: ../../../components/serializer.rst:1203
msgid "Sets the XML version attribute (default: ``1.1``)."
msgstr ""

#: ../../../components/serializer.rst:1206
msgid "``xml_encoding``"
msgstr ""

#: ../../../components/serializer.rst:1206
msgid "Sets the XML encoding attribute (default: ``utf-8``)."
msgstr ""

#: ../../../components/serializer.rst:1209
msgid "``xml_standalone``"
msgstr ""

#: ../../../components/serializer.rst:1209
msgid "Adds standalone attribute in the generated XML (default: ``true``)."
msgstr ""

#: ../../../components/serializer.rst:1212
msgid "``xml_root_node_name``"
msgstr ""

#: ../../../components/serializer.rst:1212
msgid "Sets the root node name (default: ``response``)."
msgstr ""

#: ../../../components/serializer.rst:1215
msgid "``remove_empty_tags``"
msgstr ""

#: ../../../components/serializer.rst:1215
msgid "If set to true, removes all empty tags in the generated XML."
msgstr ""

#: ../../../components/serializer.rst:1218
msgid "Handling Constructor Arguments"
msgstr ""

#: ../../../components/serializer.rst:1220
msgid ""
"If the class constructor defines arguments, as usually happens with "
"`Value Objects`_, the serializer won't be able to create the object if "
"some arguments are missing. In those cases, use the "
"``default_constructor_arguments`` context option::"
msgstr ""

#: ../../../components/serializer.rst:1254
msgid "Recursive Denormalization and Type Safety"
msgstr ""

#: ../../../components/serializer.rst:1256
msgid ""
"The Serializer component can use the :doc:`PropertyInfo Component "
"</components/property_info>` to denormalize complex types (objects). The "
"type of the class' property will be guessed using the provided extractor "
"and used to recursively denormalize the inner data."
msgstr ""

#: ../../../components/serializer.rst:1260
msgid ""
"When using this component in a Symfony application, all normalizers are "
"automatically configured to use the registered extractors. When using the"
" component standalone, an implementation of "
":class:`Symfony\\\\Component\\\\PropertyInfo\\\\PropertyTypeExtractorInterface`,"
" (usually an instance of "
":class:`Symfony\\\\Component\\\\PropertyInfo\\\\PropertyInfoExtractor`) "
"must be passed as the 4th parameter of the ``ObjectNormalizer``::"
msgstr ""

#: ../../../components/serializer.rst:1316
msgid ""
"When a ``PropertyTypeExtractor`` is available, the normalizer will also "
"check that the data to denormalize matches the type of the property (even"
" for primitive types). For instance, if a ``string`` is provided, but the"
" type of the property is ``int``, an "
":class:`Symfony\\\\Component\\\\Serializer\\\\Exception\\\\UnexpectedValueException`"
" will be thrown. The type enforcement of the properties can be disabled "
"by setting the serializer context option "
"``ObjectNormalizer::DISABLE_TYPE_ENFORCEMENT`` to ``true``."
msgstr ""

#: ../../../components/serializer.rst:1324
msgid "Serializing Interfaces and Abstract Classes"
msgstr ""

#: ../../../components/serializer.rst:1326
msgid ""
"When dealing with objects that are fairly similar or share properties, "
"you may use interfaces or abstract classes. The Serializer component "
"allows you to serialize and deserialize these objects using a "
"*\"discriminator class mapping\"*."
msgstr ""

#: ../../../components/serializer.rst:1330
msgid ""
"The discriminator is the field (in the serialized string) used to "
"differentiate between the possible objects. In practice, when using the "
"Serializer component, pass a "
":class:`Symfony\\\\Component\\\\Serializer\\\\Mapping\\\\ClassDiscriminatorResolverInterface`"
" implementation to the "
":class:`Symfony\\\\Component\\\\Serializer\\\\Normalizer\\\\ObjectNormalizer`."
msgstr ""

#: ../../../components/serializer.rst:1335
msgid ""
"The Serializer component provides an implementation of "
"``ClassDiscriminatorResolverInterface`` called "
":class:`Symfony\\\\Component\\\\Serializer\\\\Mapping\\\\ClassDiscriminatorFromClassMetadata`"
" which uses the class metadata factory and a mapping configuration to "
"serialize and deserialize objects of the correct class."
msgstr ""

#: ../../../components/serializer.rst:1360
msgid ""
"Now configure your discriminator class mapping. Consider an application "
"that defines an abstract ``CodeRepository`` class extended by "
"``GitHubCodeRepository`` and ``BitBucketCodeRepository`` classes:"
msgstr ""

#: ../../../components/serializer.rst:1408
msgid ""
"Once configured, the serializer uses the mapping to pick the correct "
"class::"
msgstr ""

#: ../../../components/serializer.rst:1417
msgid "Performance"
msgstr ""

#: ../../../components/serializer.rst:1419
msgid ""
"To figure which normalizer (or denormalizer) must be used to handle an "
"object, the :class:`Symfony\\\\Component\\\\Serializer\\\\Serializer` "
"class will call the "
":method:`Symfony\\\\Component\\\\Serializer\\\\Normalizer\\\\NormalizerInterface::supportsNormalization`"
" (or "
":method:`Symfony\\\\Component\\\\Serializer\\\\Normalizer\\\\DenormalizerInterface::supportsDenormalization`)"
" of all registered normalizers (or denormalizers) in a loop."
msgstr ""

#: ../../../components/serializer.rst:1425
msgid ""
"The result of these methods can vary depending on the object to "
"serialize, the format and the context. That's why the result **is not "
"cached** by default and can result in a significant performance "
"bottleneck."
msgstr ""

#: ../../../components/serializer.rst:1429
msgid ""
"However, most normalizers (and denormalizers) always return the same "
"result when the object's type and the format are the same, so the result "
"can be cached. To do so, make those normalizers (and denormalizers) "
"implement the "
":class:`Symfony\\\\Component\\\\Serializer\\\\Normalizer\\\\CacheableSupportsMethodInterface`"
" and return ``true`` when "
":method:`Symfony\\\\Component\\\\Serializer\\\\Normalizer\\\\CacheableSupportsMethodInterface::hasCacheableSupportsMethod`"
" is called."
msgstr ""

#: ../../../components/serializer.rst:1439
msgid ""
"All built-in :ref:`normalizers and denormalizers <component-serializer-"
"normalizers>` as well the ones included in `API Platform`_ natively "
"implement this interface."
msgstr ""

#: ../../../components/serializer.rst:1443
msgid "Learn more"
msgstr ""

#: ../../../components/serializer.rst:1453
msgid ""
"Normalizers for the Symfony Serializer Component supporting popular web "
"API formats (JSON-LD, GraphQL, OpenAPI, HAL, JSON:API) are available as "
"part of the `API Platform`_ project."
msgstr ""

#: ../../../components/serializer.rst:1458
msgid ""
"A popular alternative to the Symfony Serializer component is the third-"
"party library, `JMS serializer`_ (versions before ``v1.12.0`` were "
"released under the Apache license, so incompatible with GPLv2 projects)."
msgstr ""

