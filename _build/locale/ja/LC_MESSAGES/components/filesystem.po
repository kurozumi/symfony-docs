# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the Symfony Framework
# Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Symfony Framework Documentation \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-08 14:21+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../../components/filesystem.rst:5
msgid "The Filesystem Component"
msgstr ""

#: ../../../components/filesystem.rst:7
msgid "The Filesystem component provides basic utilities for the filesystem."
msgstr ""

#: ../../../components/filesystem.rst:10
msgid "Installation"
msgstr ""

#: ../../../components/require_autoload.rst.inc:3
msgid ""
"If you install this component outside of a Symfony application, you must "
"require the ``vendor/autoload.php`` file in your code to enable the class"
" autoloading mechanism provided by Composer. Read :doc:`this article "
"</components/using_components>` for more details."
msgstr ""

#: ../../../components/filesystem.rst:19
msgid "Usage"
msgstr ""

#: ../../../components/filesystem.rst:21
msgid ""
"The :class:`Symfony\\\\Component\\\\Filesystem\\\\Filesystem` class is "
"the unique endpoint for filesystem operations::"
msgstr ""

#: ../../../components/filesystem.rst:37
msgid ""
"Methods "
":method:`Symfony\\\\Component\\\\Filesystem\\\\Filesystem::mkdir`, "
":method:`Symfony\\\\Component\\\\Filesystem\\\\Filesystem::exists`, "
":method:`Symfony\\\\Component\\\\Filesystem\\\\Filesystem::touch`, "
":method:`Symfony\\\\Component\\\\Filesystem\\\\Filesystem::remove`, "
":method:`Symfony\\\\Component\\\\Filesystem\\\\Filesystem::chmod`, "
":method:`Symfony\\\\Component\\\\Filesystem\\\\Filesystem::chown` and "
":method:`Symfony\\\\Component\\\\Filesystem\\\\Filesystem::chgrp` can "
"receive a string, an array or any object implementing "
":phpclass:`Traversable` as the target argument."
msgstr ""

#: ../../../components/filesystem.rst:48
msgid "``mkdir``"
msgstr ""

#: ../../../components/filesystem.rst:50
msgid ""
":method:`Symfony\\\\Component\\\\Filesystem\\\\Filesystem::mkdir` creates"
" a directory recursively. On POSIX filesystems, directories are created "
"with a default mode value `0777`. You can use the second argument to set "
"your own mode::"
msgstr ""

#: ../../../components/filesystem.rst:58 ../../../components/filesystem.rst:88
#: ../../../components/filesystem.rst:122
#: ../../../components/filesystem.rst:138
#: ../../../components/filesystem.rst:154
#: ../../../components/filesystem.rst:170
#: ../../../components/filesystem.rst:183
msgid ""
"You can pass an array or any :phpclass:`Traversable` object as the first "
"argument."
msgstr ""

#: ../../../components/filesystem.rst:63
msgid "This function ignores already existing directories."
msgstr ""

#: ../../../components/filesystem.rst:67
msgid ""
"The directory permissions are affected by the current `umask`_. Set the "
"``umask`` for your webserver, use PHP's :phpfunction:`umask` function or "
"use the :phpfunction:`chmod` function after the directory has been "
"created."
msgstr ""

#: ../../../components/filesystem.rst:73
msgid "``exists``"
msgstr ""

#: ../../../components/filesystem.rst:75
msgid ""
":method:`Symfony\\\\Component\\\\Filesystem\\\\Filesystem::exists` checks"
" for the presence of one or more files or directories and returns "
"``false`` if any of them is missing::"
msgstr ""

#: ../../../components/filesystem.rst:92
msgid "``copy``"
msgstr ""

#: ../../../components/filesystem.rst:94
msgid ""
":method:`Symfony\\\\Component\\\\Filesystem\\\\Filesystem::copy` makes a "
"copy of a single file (use "
":method:`Symfony\\\\Component\\\\Filesystem\\\\Filesystem::mirror` to "
"copy directories). If the target already exists, the file is copied only "
"if the source modification date is later than the target. This behavior "
"can be overridden by the third boolean argument::"
msgstr ""

#: ../../../components/filesystem.rst:107
msgid "``touch``"
msgstr ""

#: ../../../components/filesystem.rst:109
msgid ""
":method:`Symfony\\\\Component\\\\Filesystem\\\\Filesystem::touch` sets "
"access and modification time for a file. The current time is used by "
"default. You can set your own with the second argument. The third "
"argument is the access time::"
msgstr ""

#: ../../../components/filesystem.rst:126
msgid "``chown``"
msgstr ""

#: ../../../components/filesystem.rst:128
msgid ""
":method:`Symfony\\\\Component\\\\Filesystem\\\\Filesystem::chown` changes"
" the owner of a file. The third argument is a boolean recursive option::"
msgstr ""

#: ../../../components/filesystem.rst:142
msgid "``chgrp``"
msgstr ""

#: ../../../components/filesystem.rst:144
msgid ""
":method:`Symfony\\\\Component\\\\Filesystem\\\\Filesystem::chgrp` changes"
" the group of a file. The third argument is a boolean recursive option::"
msgstr ""

#: ../../../components/filesystem.rst:158
msgid "``chmod``"
msgstr ""

#: ../../../components/filesystem.rst:160
msgid ""
":method:`Symfony\\\\Component\\\\Filesystem\\\\Filesystem::chmod` changes"
" the mode or permissions of a file. The fourth argument is a boolean "
"recursive option::"
msgstr ""

#: ../../../components/filesystem.rst:174
msgid "``remove``"
msgstr ""

#: ../../../components/filesystem.rst:176
msgid ""
":method:`Symfony\\\\Component\\\\Filesystem\\\\Filesystem::remove` "
"deletes files, directories and symlinks::"
msgstr ""

#: ../../../components/filesystem.rst:187
msgid "``rename``"
msgstr ""

#: ../../../components/filesystem.rst:189
msgid ""
":method:`Symfony\\\\Component\\\\Filesystem\\\\Filesystem::rename` "
"changes the name of a single file or directory::"
msgstr ""

#: ../../../components/filesystem.rst:198
msgid "``symlink``"
msgstr ""

#: ../../../components/filesystem.rst:200
msgid ""
":method:`Symfony\\\\Component\\\\Filesystem\\\\Filesystem::symlink` "
"creates a symbolic link from the target to the destination. If the "
"filesystem does not support symbolic links, a third boolean argument is "
"available::"
msgstr ""

#: ../../../components/filesystem.rst:211
msgid "``readlink``"
msgstr ""

#: ../../../components/filesystem.rst:213
msgid ""
":method:`Symfony\\\\Component\\\\Filesystem\\\\Filesystem::readlink` read"
" links targets."
msgstr ""

#: ../../../components/filesystem.rst:215
msgid ""
"PHP's :phpfunction:`readlink` function returns the target of a symbolic "
"link. However, its behavior is completely different under Windows and "
"Unix. On Windows systems, ``readlink()`` resolves recursively the "
"children links of a link until a final target is found. On Unix-based "
"systems ``readlink()`` only resolves the next link."
msgstr ""

#: ../../../components/filesystem.rst:220
msgid ""
"The :method:`Symfony\\\\Component\\\\Filesystem\\\\Filesystem::readlink` "
"method provided by the Filesystem component always behaves in the same "
"way::"
msgstr ""

#: ../../../components/filesystem.rst:229
msgid "Its behavior is the following::"
msgstr ""

#: ../../../components/filesystem.rst:235
msgid "When ``$canonicalize`` is ``false``:"
msgstr ""

#: ../../../components/filesystem.rst:234
msgid "if ``$path`` does not exist or is not a link, it returns ``null``."
msgstr ""

#: ../../../components/filesystem.rst:235
msgid ""
"if ``$path`` is a link, it returns the next direct target of the link "
"without considering the existence of the target."
msgstr ""

#: ../../../components/filesystem.rst:239
msgid "When ``$canonicalize`` is ``true``:"
msgstr ""

#: ../../../components/filesystem.rst:238
msgid "if ``$path`` does not exist, it returns null."
msgstr ""

#: ../../../components/filesystem.rst:239
msgid "if ``$path`` exists, it returns its absolute fully resolved final version."
msgstr ""

#: ../../../components/filesystem.rst:242
msgid "``makePathRelative``"
msgstr ""

#: ../../../components/filesystem.rst:244
msgid ""
":method:`Symfony\\\\Component\\\\Filesystem\\\\Filesystem::makePathRelative`"
" takes two absolute paths and returns the relative path from the second "
"path to the first one::"
msgstr ""

#: ../../../components/filesystem.rst:256
msgid "``mirror``"
msgstr ""

#: ../../../components/filesystem.rst:258
msgid ""
":method:`Symfony\\\\Component\\\\Filesystem\\\\Filesystem::mirror` copies"
" all the contents of the source directory into the target one (use the "
":method:`Symfony\\\\Component\\\\Filesystem\\\\Filesystem::copy` method "
"to copy single files)::"
msgstr ""

#: ../../../components/filesystem.rst:266
msgid "``isAbsolutePath``"
msgstr ""

#: ../../../components/filesystem.rst:268
msgid ""
":method:`Symfony\\\\Component\\\\Filesystem\\\\Filesystem::isAbsolutePath`"
" returns ``true`` if the given path is absolute, ``false`` otherwise::"
msgstr ""

#: ../../../components/filesystem.rst:281
msgid "``tempnam``"
msgstr ""

#: ../../../components/filesystem.rst:283
msgid ""
":method:`Symfony\\\\Component\\\\Filesystem\\\\Filesystem::tempnam` "
"creates a temporary file with a unique filename, and returns its path, or"
" throw an exception on failure::"
msgstr ""

#: ../../../components/filesystem.rst:294
msgid ""
"The option to set a suffix in  ``tempnam()`` was introduced in Symfony "
"5.1."
msgstr ""

#: ../../../components/filesystem.rst:297
msgid "``dumpFile``"
msgstr ""

#: ../../../components/filesystem.rst:299
msgid ""
":method:`Symfony\\\\Component\\\\Filesystem\\\\Filesystem::dumpFile` "
"saves the given contents into a file. It does this in an atomic manner: "
"it writes a temporary file first and then moves it to the new file "
"location when it's finished. This means that the user will always see "
"either the complete old file or complete new file (but never a partially-"
"written file)::"
msgstr ""

#: ../../../components/filesystem.rst:307
msgid "The ``file.txt`` file contains ``Hello World`` now."
msgstr ""

#: ../../../components/filesystem.rst:310
msgid "``appendToFile``"
msgstr ""

#: ../../../components/filesystem.rst:312
msgid ""
":method:`Symfony\\\\Component\\\\Filesystem\\\\Filesystem::appendToFile` "
"adds new contents at the end of some file::"
msgstr ""

#: ../../../components/filesystem.rst:317
msgid ""
"If either the file or its containing directory doesn't exist, this method"
" creates them before appending the contents."
msgstr ""

#: ../../../components/filesystem.rst:321
msgid "Error Handling"
msgstr ""

#: ../../../components/filesystem.rst:323
msgid ""
"Whenever something wrong happens, an exception implementing "
":class:`Symfony\\\\Component\\\\Filesystem\\\\Exception\\\\ExceptionInterface`"
" or "
":class:`Symfony\\\\Component\\\\Filesystem\\\\Exception\\\\IOExceptionInterface`"
" is thrown."
msgstr ""

#: ../../../components/filesystem.rst:329
msgid ""
"An "
":class:`Symfony\\\\Component\\\\Filesystem\\\\Exception\\\\IOException` "
"is thrown if directory creation fails."
msgstr ""

