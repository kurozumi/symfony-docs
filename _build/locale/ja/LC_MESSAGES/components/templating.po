# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the Symfony Framework
# Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Symfony Framework Documentation \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-08 14:21+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../../components/templating.rst:6
msgid "The Templating Component"
msgstr ""

#: ../../../components/templating.rst:8
msgid ""
"The Templating component provides all the tools needed to build any kind "
"of template system."
msgstr ""

#: ../../../components/templating.rst:11
msgid ""
"It provides an infrastructure to load template files and optionally "
"monitor them for changes. It also provides a concrete template engine "
"implementation using PHP with additional tools for escaping and "
"separating templates into blocks and layouts."
msgstr ""

#: ../../../components/templating.rst:17
msgid "Installation"
msgstr ""

#: ../../../components/require_autoload.rst.inc:3
msgid ""
"If you install this component outside of a Symfony application, you must "
"require the ``vendor/autoload.php`` file in your code to enable the class"
" autoloading mechanism provided by Composer. Read :doc:`this article "
"</components/using_components>` for more details."
msgstr ""

#: ../../../components/templating.rst:26
msgid "Usage"
msgstr ""

#: ../../../components/templating.rst:30
msgid ""
"This article explains how to use the Templating features as an "
"independent component in any PHP application. Read the article about "
":doc:`templates </templates>` to learn about how to work with templates "
"in Symfony applications."
msgstr ""

#: ../../../components/templating.rst:34
msgid ""
"The :class:`Symfony\\\\Component\\\\Templating\\\\PhpEngine` class is the"
" entry point of the component. It needs a template name parser "
"(:class:`Symfony\\\\Component\\\\Templating\\\\TemplateNameParserInterface`)"
" to convert a template name to a template reference "
"(:class:`Symfony\\\\Component\\\\Templating\\\\TemplateReferenceInterface`)."
" It also needs a template loader "
"(:class:`Symfony\\\\Component\\\\Templating\\\\Loader\\\\LoaderInterface`)"
" which uses the template reference to actually find and load the "
"template::"
msgstr ""

#: ../../../components/templating.rst:57
msgid ""
"The :method:`Symfony\\\\Component\\\\Templating\\\\PhpEngine::render` "
"method parses the ``views/hello.php`` file and returns the output text. "
"The second argument of ``render`` is an array of variables to use in the "
"template. In this example, the result will be ``Hello, Fabien!``."
msgstr ""

#: ../../../components/templating.rst:64
msgid ""
"Templates will be cached in the memory of the engine. This means that if "
"you render the same template multiple times in the same request, the "
"template will only be loaded once from the file system."
msgstr ""

#: ../../../components/templating.rst:69
msgid "The ``$view`` Variable"
msgstr ""

#: ../../../components/templating.rst:71
msgid ""
"In all templates parsed by the ``PhpEngine``, you get access to a "
"mysterious variable called ``$view``. That variable holds the current "
"``PhpEngine`` instance. That means you get access to a bunch of methods "
"that make your life easier."
msgstr ""

#: ../../../components/templating.rst:77
msgid "Including Templates"
msgstr ""

#: ../../../components/templating.rst:79
msgid ""
"The best way to share a snippet of template code is to create a template "
"that can then be included by other templates. As the ``$view`` variable "
"is an instance of ``PhpEngine``, you can use the ``render()`` method "
"(which was used to render the template originally) inside the template to"
" render another template::"
msgstr ""

#: ../../../components/templating.rst:90
msgid "Global Variables"
msgstr ""

#: ../../../components/templating.rst:92
msgid ""
"Sometimes, you need to set a variable which is available in all templates"
" rendered by an engine (like the ``$app`` variable when using the Symfony"
" Framework). These variables can be set by using the "
":method:`Symfony\\\\Component\\\\Templating\\\\PhpEngine::addGlobal` "
"method and they can be accessed in the template as normal variables::"
msgstr ""

#: ../../../components/templating.rst:100
msgid "In a template:"
msgstr ""

#: ../../../components/templating.rst:108
msgid ""
"The global variables cannot be called ``this`` or ``view``, since they "
"are already used by the PHP engine."
msgstr ""

#: ../../../components/templating.rst:113
msgid ""
"The global variables can be overridden by a local variable in the "
"template with the same name."
msgstr ""

#: ../../../components/templating.rst:117
msgid "Output Escaping"
msgstr ""

#: ../../../components/templating.rst:119
msgid ""
"When you render variables, you should probably escape them so that HTML "
"or JavaScript code isn't written out to your page. This will prevent "
"things like XSS attacks. To do this, use the "
":method:`Symfony\\\\Component\\\\Templating\\\\PhpEngine::escape` "
"method::"
msgstr ""

#: ../../../components/templating.rst:126
msgid ""
"By default, the ``escape()`` method assumes that the variable is "
"outputted within an HTML context. The second argument lets you change the"
" context. For example, to output something inside JavaScript, use the "
"``js`` context::"
msgstr ""

#: ../../../components/templating.rst:132
msgid ""
"The component comes with an HTML and JS escaper. You can register your "
"own escaper using the "
":method:`Symfony\\\\Component\\\\Templating\\\\PhpEngine::setEscaper` "
"method::"
msgstr ""

#: ../../../components/templating.rst:143
msgid "Helpers"
msgstr ""

#: ../../../components/templating.rst:145
msgid ""
"The Templating component can be extended via helpers. Helpers are PHP "
"objects that provide features useful in a template context. The component"
" has one built-in helper:"
msgstr ""

#: ../../../components/templating.rst:149
msgid ":doc:`/components/templating/slotshelper`"
msgstr ""

#: ../../../components/templating.rst:151
msgid ""
"Before you can use these helpers, you need to register them using "
":method:`Symfony\\\\Component\\\\Templating\\\\PhpEngine::set`::"
msgstr ""

#: ../../../components/templating.rst:160
msgid "Custom Helpers"
msgstr ""

#: ../../../components/templating.rst:162
msgid ""
"You can create your own helpers by creating a class which implements "
":class:`Symfony\\\\Component\\\\Templating\\\\Helper\\\\HelperInterface`."
" However, most of the time you'll extend "
":class:`Symfony\\\\Component\\\\Templating\\\\Helper\\\\Helper`."
msgstr ""

#: ../../../components/templating.rst:167
msgid ""
"The ``Helper`` has one required method: "
":method:`Symfony\\\\Component\\\\Templating\\\\Helper\\\\HelperInterface::getName`."
" This is the name that is used to get the helper from the ``$view`` "
"object."
msgstr ""

#: ../../../components/templating.rst:172
msgid "Creating a Custom Engine"
msgstr ""

#: ../../../components/templating.rst:174
msgid ""
"Besides providing a PHP templating engine, you can also create your own "
"engine using the Templating component. To do that, create a new class "
"which implements the "
":class:`Symfony\\\\Component\\\\Templating\\\\EngineInterface`. This "
"requires 3 method:"
msgstr ""

#: ../../../components/templating.rst:179
msgid ""
":method:`render($name, array $parameters = []) "
"<Symfony\\\\Component\\\\Templating\\\\EngineInterface::render>` - "
"Renders a template"
msgstr ""

#: ../../../components/templating.rst:181
msgid ""
":method:`exists($name) "
"<Symfony\\\\Component\\\\Templating\\\\EngineInterface::exists>` - Checks"
" if the template exists"
msgstr ""

#: ../../../components/templating.rst:183
msgid ""
":method:`supports($name) "
"<Symfony\\\\Component\\\\Templating\\\\EngineInterface::supports>` - "
"Checks if the given template can be handled by this engine."
msgstr ""

#: ../../../components/templating.rst:187
msgid "Using Multiple Engines"
msgstr ""

#: ../../../components/templating.rst:189
msgid ""
"It is possible to use multiple engines at the same time using the "
":class:`Symfony\\\\Component\\\\Templating\\\\DelegatingEngine` class. "
"This class takes a list of engines and acts just like a normal templating"
" engine. The only difference is that it delegates the calls to one of the"
" other engines. To choose which one to use for the template, the "
":method:`EngineInterface::supports() "
"<Symfony\\\\Component\\\\Templating\\\\EngineInterface::supports>` method"
" is used::"
msgstr ""

#: ../../../components/templating.rst:207
msgid "Learn More"
msgstr ""

