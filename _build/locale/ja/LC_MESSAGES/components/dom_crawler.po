# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the Symfony Framework
# Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Symfony Framework Documentation \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-08 14:21+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../../components/dom_crawler.rst:6
msgid "The DomCrawler Component"
msgstr ""

#: ../../../components/dom_crawler.rst:8
msgid "The DomCrawler component eases DOM navigation for HTML and XML documents."
msgstr ""

#: ../../../components/dom_crawler.rst:12
msgid ""
"While possible, the DomCrawler component is not designed for manipulation"
" of the DOM or re-dumping HTML/XML."
msgstr ""

#: ../../../components/dom_crawler.rst:16
msgid "Installation"
msgstr ""

#: ../../../components/require_autoload.rst.inc:3
msgid ""
"If you install this component outside of a Symfony application, you must "
"require the ``vendor/autoload.php`` file in your code to enable the class"
" autoloading mechanism provided by Composer. Read :doc:`this article "
"</components/using_components>` for more details."
msgstr ""

#: ../../../components/dom_crawler.rst:25
msgid "Usage"
msgstr ""

#: ../../../components/dom_crawler.rst:29
msgid ""
"This article explains how to use the DomCrawler features as an "
"independent component in any PHP application. Read the :ref:`Symfony "
"Functional Tests <functional-tests>` article to learn about how to use it"
" when creating Symfony tests."
msgstr ""

#: ../../../components/dom_crawler.rst:33
msgid ""
"The :class:`Symfony\\\\Component\\\\DomCrawler\\\\Crawler` class provides"
" methods to query and manipulate HTML and XML documents."
msgstr ""

#: ../../../components/dom_crawler.rst:36
msgid ""
"An instance of the Crawler represents a set of :phpclass:`DOMElement` "
"objects, which are nodes that can be traversed as follows::"
msgstr ""

#: ../../../components/dom_crawler.rst:57
msgid ""
"Specialized :class:`Symfony\\\\Component\\\\DomCrawler\\\\Link`, "
":class:`Symfony\\\\Component\\\\DomCrawler\\\\Image` and "
":class:`Symfony\\\\Component\\\\DomCrawler\\\\Form` classes are useful "
"for interacting with html links, images and forms as you traverse through"
" the HTML tree."
msgstr ""

#: ../../../components/dom_crawler.rst:65
msgid ""
"The DomCrawler will attempt to automatically fix your HTML to match the "
"official specification. For example, if you nest a ``<p>`` tag inside "
"another ``<p>`` tag, it will be moved to be a sibling of the parent tag. "
"This is expected and is part of the HTML5 spec. But if you're getting "
"unexpected behavior, this could be a cause. And while the DomCrawler "
"isn't meant to dump content, you can see the \"fixed\" version of your "
"HTML by :ref:`dumping it <component-dom-crawler-dumping>`."
msgstr ""

#: ../../../components/dom_crawler.rst:75
msgid ""
"If you need better support for HTML5 contents or want to get rid of the "
"inconsistencies of PHP's DOM extension, install the `html5-php library`_."
" The DomCrawler component will use it automatically when the content has "
"an HTML5 doctype."
msgstr ""

#: ../../../components/dom_crawler.rst:81
msgid "Node Filtering"
msgstr ""

#: ../../../components/dom_crawler.rst:83
msgid ""
"Using XPath expressions, you can select specific nodes within the "
"document::"
msgstr ""

#: ../../../components/dom_crawler.rst:89
msgid "``DOMXPath::query`` is used internally to actually perform an XPath query."
msgstr ""

#: ../../../components/dom_crawler.rst:91
msgid ""
"If you prefer CSS selectors over XPath, install the CssSelector "
"component. It allows you to use jQuery-like selectors to traverse::"
msgstr ""

#: ../../../components/dom_crawler.rst:96
msgid "An anonymous function can be used to filter with more complex criteria::"
msgstr ""

#: ../../../components/dom_crawler.rst:108
msgid "To remove a node the anonymous function must return false."
msgstr ""

#: ../../../components/dom_crawler.rst:112
msgid ""
"All filter methods return a new "
":class:`Symfony\\\\Component\\\\DomCrawler\\\\Crawler` instance with "
"filtered content."
msgstr ""

#: ../../../components/dom_crawler.rst:115
msgid ""
"Both the "
":method:`Symfony\\\\Component\\\\DomCrawler\\\\Crawler::filterXPath` and "
":method:`Symfony\\\\Component\\\\DomCrawler\\\\Crawler::filter` methods "
"work with XML namespaces, which can be either automatically discovered or"
" registered explicitly."
msgstr ""

#: ../../../components/dom_crawler.rst:120
msgid "Consider the XML below:"
msgstr ""

#: ../../../components/dom_crawler.rst:139
msgid ""
"This can be filtered with the  ``Crawler`` without needing to register "
"namespace aliases both with "
":method:`Symfony\\\\Component\\\\DomCrawler\\\\Crawler::filterXPath`::"
msgstr ""

#: ../../../components/dom_crawler.rst:144
msgid "and :method:`Symfony\\\\Component\\\\DomCrawler\\\\Crawler::filter`::"
msgstr ""

#: ../../../components/dom_crawler.rst:150
msgid ""
"The default namespace is registered with a prefix \"default\". It can be "
"changed with the "
":method:`Symfony\\\\Component\\\\DomCrawler\\\\Crawler::setDefaultNamespacePrefix`"
" method."
msgstr ""

#: ../../../components/dom_crawler.rst:155
msgid ""
"The default namespace is removed when loading the content if it's the "
"only namespace in the document. It's done to simplify the XPath queries."
msgstr ""

#: ../../../components/dom_crawler.rst:158
msgid ""
"Namespaces can be explicitly registered with the "
":method:`Symfony\\\\Component\\\\DomCrawler\\\\Crawler::registerNamespace`"
" method::"
msgstr ""

#: ../../../components/dom_crawler.rst:164
msgid "Verify if the current node matches a selector::"
msgstr ""

#: ../../../components/dom_crawler.rst:169
msgid "Node Traversing"
msgstr ""

#: ../../../components/dom_crawler.rst:171
msgid "Access node by its position on the list::"
msgstr ""

#: ../../../components/dom_crawler.rst:175
msgid "Get the first or last node of the current selection::"
msgstr ""

#: ../../../components/dom_crawler.rst:180
msgid "Get the nodes of the same level as the current selection::"
msgstr ""

#: ../../../components/dom_crawler.rst:184
msgid "Get the same level nodes after or before the current selection::"
msgstr ""

#: ../../../components/dom_crawler.rst:189
msgid "Get all the child or parent nodes::"
msgstr ""

#: ../../../components/dom_crawler.rst:194
msgid "Get all the direct child nodes matching a CSS selector::"
msgstr ""

#: ../../../components/dom_crawler.rst:198
msgid ""
"Get the first parent (heading toward the document root) of the element "
"that matches the provided selector::"
msgstr ""

#: ../../../components/dom_crawler.rst:204
msgid ""
"All the traversal methods return a new "
":class:`Symfony\\\\Component\\\\DomCrawler\\\\Crawler` instance."
msgstr ""

#: ../../../components/dom_crawler.rst:208
msgid "Accessing Node Values"
msgstr ""

#: ../../../components/dom_crawler.rst:210
msgid ""
"Access the node name (HTML tag name) of the first node of the current "
"selection (e.g. \"p\" or \"div\")::"
msgstr ""

#: ../../../components/dom_crawler.rst:215
msgid "Access the value of the first node of the current selection::"
msgstr ""

#: ../../../components/dom_crawler.rst:227
msgid "Access the attribute value of the first node of the current selection::"
msgstr ""

#: ../../../components/dom_crawler.rst:231
msgid "Extract attribute and/or node values from the list of nodes::"
msgstr ""

#: ../../../components/dom_crawler.rst:240
msgid ""
"Special attribute ``_text`` represents a node value, while ``_name`` "
"represents the element name (the HTML tag name)."
msgstr ""

#: ../../../components/dom_crawler.rst:243
msgid "Call an anonymous function on each node of the list::"
msgstr ""

#: ../../../components/dom_crawler.rst:252
msgid ""
"The anonymous function receives the node (as a Crawler) and the position "
"as arguments. The result is an array of values returned by the anonymous "
"function calls."
msgstr ""

#: ../../../components/dom_crawler.rst:255
msgid ""
"When using nested crawler, beware that ``filterXPath()`` is evaluated in "
"the context of the crawler::"
msgstr ""

#: ../../../components/dom_crawler.rst:268
msgid "Adding the Content"
msgstr ""

#: ../../../components/dom_crawler.rst:270
msgid "The crawler supports multiple ways of adding the content::"
msgstr ""

#: ../../../components/dom_crawler.rst:285
msgid ""
"The "
":method:`Symfony\\\\Component\\\\DomCrawler\\\\Crawler::addHtmlContent` "
"and "
":method:`Symfony\\\\Component\\\\DomCrawler\\\\Crawler::addXmlContent` "
"methods default to UTF-8 encoding but you can change this behavior with "
"their second optional argument."
msgstr ""

#: ../../../components/dom_crawler.rst:290
msgid ""
"The :method:`Symfony\\\\Component\\\\DomCrawler\\\\Crawler::addContent` "
"method guesses the best charset according to the given contents and "
"defaults to ``ISO-8859-1`` in case no charset can be guessed."
msgstr ""

#: ../../../components/dom_crawler.rst:294
msgid ""
"As the Crawler's implementation is based on the DOM extension, it is also"
" able to interact with native :phpclass:`DOMDocument`, "
":phpclass:`DOMNodeList` and :phpclass:`DOMNode` objects::"
msgstr ""

#: ../../../components/dom_crawler.rst
msgid "Manipulating and Dumping a ``Crawler``"
msgstr ""

#: ../../../components/dom_crawler.rst:313
msgid ""
"These methods on the ``Crawler`` are intended to initially populate your "
"``Crawler`` and aren't intended to be used to further manipulate a DOM "
"(though this is possible). However, since the ``Crawler`` is a set of "
":phpclass:`DOMElement` objects, you can use any method or property "
"available on :phpclass:`DOMElement`, :phpclass:`DOMNode` or "
":phpclass:`DOMDocument`. For example, you could get the HTML of a "
"``Crawler`` with something like this::"
msgstr ""

#: ../../../components/dom_crawler.rst:327
msgid ""
"Or you can get the HTML of the first node using "
":method:`Symfony\\\\Component\\\\DomCrawler\\\\Crawler::html`::"
msgstr ""

#: ../../../components/dom_crawler.rst:336
msgid ""
"Or you can get the outer HTML of the first node using "
":method:`Symfony\\\\Component\\\\DomCrawler\\\\Crawler::outerHtml`::"
msgstr ""

#: ../../../components/dom_crawler.rst:342
msgid "Expression Evaluation"
msgstr ""

#: ../../../components/dom_crawler.rst:344
msgid ""
"The ``evaluate()`` method evaluates the given XPath expression. The "
"return value depends on the XPath expression. If the expression evaluates"
" to a scalar value (e.g. HTML attributes), an array of results will be "
"returned. If the expression evaluates to a DOM document, a new "
"``Crawler`` instance will be returned."
msgstr ""

#: ../../../components/dom_crawler.rst:350
msgid "This behavior is best illustrated with examples::"
msgstr ""

#: ../../../components/dom_crawler.rst:401
msgid "Links"
msgstr ""

#: ../../../components/dom_crawler.rst:403
msgid ""
"Use the ``filter()`` method to find links by their ``id`` or ``class`` "
"attributes and use the ``selectLink()`` method to find links by their "
"content (it also finds clickable images with that content in its ``alt`` "
"attribute)."
msgstr ""

#: ../../../components/dom_crawler.rst:407
msgid ""
"Both methods return a ``Crawler`` instance with just the selected link. "
"Use the ``link()`` method to get the "
":class:`Symfony\\\\Component\\\\DomCrawler\\\\Link` object that "
"represents the link::"
msgstr ""

#: ../../../components/dom_crawler.rst:424
msgid ""
"The :class:`Symfony\\\\Component\\\\DomCrawler\\\\Link` object has "
"several useful methods to get more information about the selected link "
"itself::"
msgstr ""

#: ../../../components/dom_crawler.rst:432
msgid ""
"The ``getUri()`` is especially useful as it cleans the ``href`` value and"
" transforms it into how it should really be processed. For example, for a"
" link with ``href=\"#foo\"``, this would return the full URI of the "
"current page suffixed with ``#foo``. The return from ``getUri()`` is "
"always a full URI that you can act on."
msgstr ""

#: ../../../components/dom_crawler.rst:439
msgid "Images"
msgstr ""

#: ../../../components/dom_crawler.rst:441
msgid ""
"To find an image by its ``alt`` attribute, use the ``selectImage`` method"
" on an existing crawler. This returns a ``Crawler`` instance with just "
"the selected image(s). Calling ``image()`` gives you a special "
":class:`Symfony\\\\Component\\\\DomCrawler\\\\Image` object::"
msgstr ""

#: ../../../components/dom_crawler.rst:452
msgid ""
"The :class:`Symfony\\\\Component\\\\DomCrawler\\\\Image` object has the "
"same ``getUri()`` method as "
":class:`Symfony\\\\Component\\\\DomCrawler\\\\Link`."
msgstr ""

#: ../../../components/dom_crawler.rst:456
msgid "Forms"
msgstr ""

#: ../../../components/dom_crawler.rst:458
msgid ""
"Special treatment is also given to forms. A ``selectButton()`` method is "
"available on the Crawler which returns another Crawler that matches "
"``<button>`` or ``<input type=\"submit\">`` or ``<input "
"type=\"button\">`` elements (or an ``<img>`` element inside them). The "
"string given as argument is looked for in the ``id``, ``alt``, ``name``, "
"and ``value`` attributes and the text content of those elements."
msgstr ""

#: ../../../components/dom_crawler.rst:465
msgid ""
"This method is especially useful because you can use it to return a "
":class:`Symfony\\\\Component\\\\DomCrawler\\\\Form` object that "
"represents the form that the button lives in::"
msgstr ""

#: ../../../components/dom_crawler.rst:485
msgid ""
"The :class:`Symfony\\\\Component\\\\DomCrawler\\\\Form` object has lots "
"of very useful methods for working with forms::"
msgstr ""

#: ../../../components/dom_crawler.rst:492
msgid ""
"The :method:`Symfony\\\\Component\\\\DomCrawler\\\\Form::getUri` method "
"does more than just return the ``action`` attribute of the form. If the "
"form method is GET, then it mimics the browser's behavior and returns the"
" ``action`` attribute followed by a query string of all of the form's "
"values."
msgstr ""

#: ../../../components/dom_crawler.rst:499
msgid ""
"The optional ``formaction`` and ``formmethod`` button attributes are "
"supported. The ``getUri()`` and ``getMethod()`` methods take into account"
" those attributes to always return the right action and method depending "
"on the button used to get the form."
msgstr ""

#: ../../../components/dom_crawler.rst:504
msgid "You can virtually set and get values on the form::"
msgstr ""

#: ../../../components/dom_crawler.rst:519
msgid "To work with multi-dimensional fields::"
msgstr ""

#: ../../../components/dom_crawler.rst:530
msgid "Pass an array of values::"
msgstr ""

#: ../../../components/dom_crawler.rst:546
msgid ""
"This is great, but it gets better! The ``Form`` object allows you to "
"interact with your form like a browser, selecting radio values, ticking "
"checkboxes, and uploading files::"
msgstr ""

#: ../../../components/dom_crawler.rst:566
msgid "Using the Form Data"
msgstr ""

#: ../../../components/dom_crawler.rst:568
msgid ""
"What's the point of doing all of this? If you're testing internally, you "
"can grab the information off of your form as if it had just been "
"submitted by using the PHP values::"
msgstr ""

#: ../../../components/dom_crawler.rst:575
msgid ""
"If you're using an external HTTP client, you can use the form to grab all"
" of the information you need to create a POST request for the form::"
msgstr ""

#: ../../../components/dom_crawler.rst:585
msgid ""
"One great example of an integrated system that uses all of this is the "
":class:`Symfony\\\\Component\\\\BrowserKit\\\\HttpBrowser` provided by "
"the :doc:`BrowserKit component </components/browser_kit>`. It understands"
" the Symfony Crawler object and can use it to submit forms directly::"
msgstr ""

#: ../../../components/dom_crawler.rst:609
msgid "Selecting Invalid Choice Values"
msgstr ""

#: ../../../components/dom_crawler.rst:611
msgid ""
"By default, choice fields (select, radio) have internal validation "
"activated to prevent you from setting invalid values. If you want to be "
"able to set invalid values, you can use the  ``disableValidation()`` "
"method on either the whole form or specific field(s)::"
msgstr ""

#: ../../../components/dom_crawler.rst:624
msgid "Resolving a URI"
msgstr ""

#: ../../../components/dom_crawler.rst:628
msgid ""
"The :class:`Symfony\\\\Component\\\\DomCrawler\\\\UriResolver` helper "
"class was added in Symfony 5.1."
msgstr ""

#: ../../../components/dom_crawler.rst:630
msgid ""
"The :class:`Symfony\\\\Component\\\\DomCrawler\\\\UriResolver` class "
"takes an URI (relative, absolute, fragment, etc.) and turns it into an "
"absolute URI against another given base URI::"
msgstr ""

#: ../../../components/dom_crawler.rst:641
msgid "Learn more"
msgstr ""

#: ../../../components/dom_crawler.rst:643
msgid ":doc:`/testing`"
msgstr ""

#: ../../../components/dom_crawler.rst:644
msgid ":doc:`/components/css_selector`"
msgstr ""

