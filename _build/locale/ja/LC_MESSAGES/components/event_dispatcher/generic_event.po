# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the Symfony Framework
# Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Symfony Framework Documentation \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-08 14:21+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../../components/event_dispatcher/generic_event.rst:5
msgid "The Generic Event Object"
msgstr ""

#: ../../../components/event_dispatcher/generic_event.rst:7
msgid ""
"The base :class:`Symfony\\\\Contracts\\\\EventDispatcher\\\\Event` class "
"provided by the EventDispatcher component is deliberately sparse to allow"
" the creation of API specific event objects by inheritance using OOP. "
"This allows for elegant and readable code in complex applications."
msgstr ""

#: ../../../components/event_dispatcher/generic_event.rst:12
msgid ""
"The :class:`Symfony\\\\Component\\\\EventDispatcher\\\\GenericEvent` is "
"available for convenience for those who wish to use just one event object"
" throughout their application. It is suitable for most purposes straight "
"out of the box, because it follows the standard observer pattern where "
"the event object encapsulates an event 'subject', but has the addition of"
" optional extra arguments."
msgstr ""

#: ../../../components/event_dispatcher/generic_event.rst:19
msgid ""
":class:`Symfony\\\\Component\\\\EventDispatcher\\\\GenericEvent` adds "
"some more methods in addition to the base class "
":class:`Symfony\\\\Contracts\\\\EventDispatcher\\\\Event`"
msgstr ""

#: ../../../components/event_dispatcher/generic_event.rst:23
msgid ""
":method:`Symfony\\\\Component\\\\EventDispatcher\\\\GenericEvent::__construct`:"
" Constructor takes the event subject and any arguments;"
msgstr ""

#: ../../../components/event_dispatcher/generic_event.rst:26
msgid ""
":method:`Symfony\\\\Component\\\\EventDispatcher\\\\GenericEvent::getSubject`:"
" Get the subject;"
msgstr ""

#: ../../../components/event_dispatcher/generic_event.rst:29
msgid ""
":method:`Symfony\\\\Component\\\\EventDispatcher\\\\GenericEvent::setArgument`:"
" Sets an argument by key;"
msgstr ""

#: ../../../components/event_dispatcher/generic_event.rst:32
msgid ""
":method:`Symfony\\\\Component\\\\EventDispatcher\\\\GenericEvent::setArguments`:"
" Sets arguments array;"
msgstr ""

#: ../../../components/event_dispatcher/generic_event.rst:35
msgid ""
":method:`Symfony\\\\Component\\\\EventDispatcher\\\\GenericEvent::getArgument`:"
" Gets an argument by key;"
msgstr ""

#: ../../../components/event_dispatcher/generic_event.rst:38
msgid ""
":method:`Symfony\\\\Component\\\\EventDispatcher\\\\GenericEvent::getArguments`:"
" Getter for all arguments;"
msgstr ""

#: ../../../components/event_dispatcher/generic_event.rst:41
msgid ""
":method:`Symfony\\\\Component\\\\EventDispatcher\\\\GenericEvent::hasArgument`:"
" Returns true if the argument key exists;"
msgstr ""

#: ../../../components/event_dispatcher/generic_event.rst:44
msgid ""
"The ``GenericEvent`` also implements :phpclass:`ArrayAccess` on the event"
" arguments which makes it very convenient to pass extra arguments "
"regarding the event subject."
msgstr ""

#: ../../../components/event_dispatcher/generic_event.rst:48
msgid ""
"The following examples show use-cases to give a general idea of the "
"flexibility. The examples assume event listeners have been added to the "
"dispatcher."
msgstr ""

#: ../../../components/event_dispatcher/generic_event.rst:51
msgid "Passing a subject::"
msgstr ""

#: ../../../components/event_dispatcher/generic_event.rst:68
msgid ""
"Passing and processing arguments using the :phpclass:`ArrayAccess` API to"
" access the event arguments::"
msgstr ""

#: ../../../components/event_dispatcher/generic_event.rst:91
msgid "Filtering data::"
msgstr ""

