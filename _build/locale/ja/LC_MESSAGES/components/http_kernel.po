# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the Symfony Framework
# Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Symfony Framework Documentation \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-08 14:21+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../../components/http_kernel.rst:7
msgid "The HttpKernel Component"
msgstr ""

#: ../../../components/http_kernel.rst:9
msgid ""
"The HttpKernel component provides a structured process for converting a "
"``Request`` into a ``Response`` by making use of the EventDispatcher "
"component. It's flexible enough to create a full-stack framework "
"(Symfony), a micro-framework (Silex) or an advanced CMS system (Drupal)."
msgstr ""

#: ../../../components/http_kernel.rst:15
msgid "Installation"
msgstr ""

#: ../../../components/require_autoload.rst.inc:3
msgid ""
"If you install this component outside of a Symfony application, you must "
"require the ``vendor/autoload.php`` file in your code to enable the class"
" autoloading mechanism provided by Composer. Read :doc:`this article "
"</components/using_components>` for more details."
msgstr ""

#: ../../../components/http_kernel.rst:24
msgid "The Workflow of a Request"
msgstr ""

#: ../../../components/http_kernel.rst:28
msgid ""
"This article explains how to use the HttpKernel features as an "
"independent component in any PHP application. In Symfony applications "
"everything is already configured and ready to use. Read the "
":doc:`/controller` and :doc:`/event_dispatcher` articles to learn about "
"how to use it to create controllers and define events in Symfony "
"applications."
msgstr ""

#: ../../../components/http_kernel.rst:35
msgid ""
"Every HTTP web interaction begins with a request and ends with a "
"response. Your job as a developer is to create PHP code that reads the "
"request information (e.g. the URL) and creates and returns a response "
"(e.g. an HTML page or JSON string). This is a simplified overview of the "
"request workflow in Symfony applications:"
msgstr ""

#: ../../../components/http_kernel.rst:40
msgid "The **user** asks for a **resource** in a **browser**;"
msgstr ""

#: ../../../components/http_kernel.rst:41
msgid "The **browser** sends a **request** to the **server**;"
msgstr ""

#: ../../../components/http_kernel.rst:42
msgid "**Symfony** gives the **application** a **Request** object;"
msgstr ""

#: ../../../components/http_kernel.rst:43
msgid ""
"The **application** generates a **Response** object using the data of the"
" **Request** object;"
msgstr ""

#: ../../../components/http_kernel.rst:44
msgid "The **server** sends back the **response** to the **browser**;"
msgstr ""

#: ../../../components/http_kernel.rst:45
msgid "The **browser** displays the **resource** to the **user**."
msgstr ""

#: ../../../components/http_kernel.rst:47
msgid ""
"Typically, some sort of framework or system is built to handle all the "
"repetitive tasks (e.g. routing, security, etc) so that a developer can "
"build each *page* of the application. Exactly *how* these systems are "
"built varies greatly. The HttpKernel component provides an interface that"
" formalizes the process of starting with a request and creating the "
"appropriate response. The component is meant to be the heart of any "
"application or framework, no matter how varied the architecture of that "
"system::"
msgstr ""

#: ../../../components/http_kernel.rst:73
msgid ""
"Internally, :method:`HttpKernel::handle() "
"<Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel::handle>` - the "
"concrete implementation of :method:`HttpKernelInterface::handle() "
"<Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelInterface::handle>` - "
"defines a workflow that starts with a "
":class:`Symfony\\\\Component\\\\HttpFoundation\\\\Request` and ends with "
"a :class:`Symfony\\\\Component\\\\HttpFoundation\\\\Response`."
msgstr ""

#: ../../../components/http_kernel.rst:82
msgid ""
"The exact details of this workflow are the key to understanding how the "
"kernel (and the Symfony Framework or any other library that uses the "
"kernel) works."
msgstr ""

#: ../../../components/http_kernel.rst:86
msgid "HttpKernel: Driven by Events"
msgstr ""

#: ../../../components/http_kernel.rst:88
msgid ""
"The ``HttpKernel::handle()`` method works internally by dispatching "
"events. This makes the method both flexible, but also a bit abstract, "
"since all the \"work\" of a framework/application built with HttpKernel "
"is actually done in event listeners."
msgstr ""

#: ../../../components/http_kernel.rst:93
msgid ""
"To help explain this process, this document looks at each step of the "
"process and talks about how one specific implementation of the HttpKernel"
" - the Symfony Framework - works."
msgstr ""

#: ../../../components/http_kernel.rst:97
msgid ""
"Initially, using the "
":class:`Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel` does not take "
"many steps. You create an :doc:`event dispatcher "
"</components/event_dispatcher>` and a :ref:`controller and argument "
"resolver <component-http-kernel-resolve-controller>` (explained below). "
"To complete your working kernel, you'll add more event listeners to the "
"events discussed below::"
msgstr ""

#: ../../../components/http_kernel.rst:134
msgid ""
"See \":ref:`http-kernel-working-example`\" for a more concrete "
"implementation."
msgstr ""

#: ../../../components/http_kernel.rst:136
msgid ""
"For general information on adding listeners to the events below, see :ref"
":`http-kernel-creating-listener`."
msgstr ""

#: ../../../components/http_kernel.rst:141
msgid ""
"As of 3.1 the :class:`Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel` "
"accepts a fourth argument, which must be an instance of "
":class:`Symfony\\\\Component\\\\HttpKernel\\\\Controller\\\\ArgumentResolverInterface`."
" In 4.0 this argument will become mandatory."
msgstr ""

#: ../../../components/http_kernel.rst:148
msgid ""
"There is a wonderful tutorial series on using the HttpKernel component "
"and other Symfony components to create your own framework. See "
":doc:`/create_framework/introduction`."
msgstr ""

#: ../../../components/http_kernel.rst:155
msgid "1) The ``kernel.request`` Event"
msgstr ""

#: ../../../components/http_kernel.rst:157
msgid ""
"**Typical Purposes**: To add more information to the ``Request``, "
"initialize parts of the system, or return a ``Response`` if possible "
"(e.g. a security layer that denies access)."
msgstr ""

#: ../../../components/http_kernel.rst:161
#: ../../../components/http_kernel.rst:286
#: ../../../components/http_kernel.rst:389
#: ../../../components/http_kernel.rst:431
#: ../../../components/http_kernel.rst:469
#: ../../../components/http_kernel.rst:515
msgid ":ref:`Kernel Events Information Table <component-http-kernel-event-table>`"
msgstr ""

#: ../../../components/http_kernel.rst:163
msgid ""
"The first event that is dispatched inside :method:`HttpKernel::handle "
"<Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel::handle>` is "
"``kernel.request``, which may have a variety of different listeners."
msgstr ""

#: ../../../components/http_kernel.rst:166
msgid ""
"Listeners of this event can be quite varied. Some listeners - such as a "
"security listener - might have enough information to create a "
"``Response`` object immediately. For example, if a security listener "
"determined that a user doesn't have access, that listener may return a "
":class:`Symfony\\\\Component\\\\HttpFoundation\\\\RedirectResponse` to "
"the login page or a 403 Access Denied response."
msgstr ""

#: ../../../components/http_kernel.rst:172
msgid ""
"If a ``Response`` is returned at this stage, the process skips directly "
"to the :ref:`kernel.response <component-http-kernel-kernel-response>` "
"event."
msgstr ""

#: ../../../components/http_kernel.rst:175
msgid ""
"Other listeners initialize things or add more information to the request."
" For example, a listener might determine and set the locale on the "
"``Request`` object."
msgstr ""

#: ../../../components/http_kernel.rst:179
msgid ""
"Another common listener is routing. A router listener may process the "
"``Request`` and determine the controller that should be rendered (see the"
" next section). In fact, the ``Request`` object has an \":ref:`attributes"
" <component-foundation-attributes>`\" bag which is a perfect spot to "
"store this extra, application-specific data about the request. This means"
" that if your router listener somehow determines the controller, it can "
"store it on the ``Request`` attributes (which can be used by your "
"controller resolver)."
msgstr ""

#: ../../../components/http_kernel.rst:187
msgid ""
"Overall, the purpose of the ``kernel.request`` event is either to create "
"and return a ``Response`` directly, or to add information to the "
"``Request`` (e.g. setting the locale or setting some other information on"
" the ``Request`` attributes)."
msgstr ""

#: ../../../components/http_kernel.rst:194
msgid ""
"When setting a response for the ``kernel.request`` event, the propagation"
" is stopped. This means listeners with lower priority won't be executed."
msgstr ""

#: ../../../components/http_kernel.rst
msgid "``kernel.request`` in the Symfony Framework"
msgstr ""

#: ../../../components/http_kernel.rst:199
msgid ""
"The most important listener to ``kernel.request`` in the Symfony "
"Framework is the "
":class:`Symfony\\\\Component\\\\HttpKernel\\\\EventListener\\\\RouterListener`."
" This class executes the routing layer, which returns an *array* of "
"information about the matched request, including the ``_controller`` and "
"any placeholders that are in the route's pattern (e.g. ``{slug}``). See "
"the :doc:`Routing documentation </routing>`."
msgstr ""

#: ../../../components/http_kernel.rst:206
msgid ""
"This array of information is stored in the "
":class:`Symfony\\\\Component\\\\HttpFoundation\\\\Request` object's "
"``attributes`` array. Adding the routing information here doesn't do "
"anything yet, but is used next when resolving the controller."
msgstr ""

#: ../../../components/http_kernel.rst:213
msgid "2) Resolve the Controller"
msgstr ""

#: ../../../components/http_kernel.rst:215
msgid ""
"Assuming that no ``kernel.request`` listener was able to create a "
"``Response``, the next step in HttpKernel is to determine and prepare "
"(i.e. resolve) the controller. The controller is the part of the end-"
"application's code that is responsible for creating and returning the "
"``Response`` for a specific page. The only requirement is that it is a "
"PHP callable - i.e. a function, method on an object or a ``Closure``."
msgstr ""

#: ../../../components/http_kernel.rst:222
msgid ""
"But *how* you determine the exact controller for a request is entirely up"
" to your application. This is the job of the \"controller resolver\" - a "
"class that implements "
":class:`Symfony\\\\Component\\\\HttpKernel\\\\Controller\\\\ControllerResolverInterface`"
" and is one of the constructor arguments to ``HttpKernel``."
msgstr ""

#: ../../../components/http_kernel.rst:227
msgid ""
"Your job is to create a class that implements the interface and fill in "
"its method: ``getController()``. In fact, one default implementation "
"already exists, which you can use directly or learn from: "
":class:`Symfony\\\\Component\\\\HttpKernel\\\\Controller\\\\ControllerResolver`."
" This implementation is explained more in the sidebar below::"
msgstr ""

#: ../../../components/http_kernel.rst:242
msgid ""
"Internally, the ``HttpKernel::handle()`` method first calls "
":method:`Symfony\\\\Component\\\\HttpKernel\\\\Controller\\\\ControllerResolverInterface::getController`"
" on the controller resolver. This method is passed the ``Request`` and is"
" responsible for somehow determining and returning a PHP callable (the "
"controller) based on the request's information."
msgstr ""

#: ../../../components/http_kernel.rst
msgid "Resolving the Controller in the Symfony Framework"
msgstr ""

#: ../../../components/http_kernel.rst:250
msgid ""
"The Symfony Framework uses the built-in "
":class:`Symfony\\\\Component\\\\HttpKernel\\\\Controller\\\\ControllerResolver`"
" class (actually, it uses a sub-class with some extra functionality "
"mentioned below). This class leverages the information that was placed on"
" the ``Request`` object's ``attributes`` property during the "
"``RouterListener``."
msgstr ""

#: ../../../components/http_kernel.rst:256
msgid "**getController**"
msgstr ""

#: ../../../components/http_kernel.rst:258
msgid ""
"The ``ControllerResolver`` looks for a ``_controller`` key on the "
"``Request`` object's attributes property (recall that this information is"
" typically placed on the ``Request`` via the ``RouterListener``). This "
"string is then transformed into a PHP callable by doing the following:"
msgstr ""

#: ../../../components/http_kernel.rst:263
msgid ""
"If the ``_controller`` key doesn't follow the recommended PHP namespace "
"format (e.g. ``App\\Controller\\DefaultController::index``) its format is"
" transformed into it. For example, the legacy ``FooBundle:Default:index``"
" format would be changed to "
"``Acme\\FooBundle\\Controller\\DefaultController::indexAction``. This "
"transformation is specific to the "
":class:`Symfony\\\\Bundle\\\\FrameworkBundle\\\\Controller\\\\ControllerResolver`"
" sub-class used by the Symfony Framework."
msgstr ""

#: ../../../components/http_kernel.rst:270
msgid ""
"A new instance of your controller class is instantiated with no "
"constructor arguments."
msgstr ""

#: ../../../components/http_kernel.rst:273
msgid ""
"If the controller implements "
":class:`Symfony\\\\Component\\\\DependencyInjection\\\\ContainerAwareInterface`,"
" ``setContainer()`` is called on the controller object and the container "
"is passed to it. This step is also specific to the  "
":class:`Symfony\\\\Bundle\\\\FrameworkBundle\\\\Controller\\\\ControllerResolver`"
" sub-class used by the Symfony Framework."
msgstr ""

#: ../../../components/http_kernel.rst:281
msgid "3) The ``kernel.controller`` Event"
msgstr ""

#: ../../../components/http_kernel.rst:283
msgid ""
"**Typical Purposes**: Initialize things or change the controller just "
"before the controller is executed."
msgstr ""

#: ../../../components/http_kernel.rst:288
msgid ""
"After the controller callable has been determined, "
"``HttpKernel::handle()`` dispatches the ``kernel.controller`` event. "
"Listeners to this event might initialize some part of the system that "
"needs to be initialized after certain things have been determined (e.g. "
"the controller, routing information) but before the controller is "
"executed. For some examples, see the Symfony section below."
msgstr ""

#: ../../../components/http_kernel.rst:294
msgid ""
"Listeners to this event can also change the controller callable "
"completely by calling :method:`ControllerEvent::setController "
"<Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\ControllerEvent::setController>`"
" on the event object that's passed to listeners on this event."
msgstr ""

#: ../../../components/http_kernel.rst
msgid "``kernel.controller`` in the Symfony Framework"
msgstr ""

#: ../../../components/http_kernel.rst:300
msgid ""
"There are a few minor listeners to the ``kernel.controller`` event in the"
" Symfony Framework, and many deal with collecting profiler data when the "
"profiler is enabled."
msgstr ""

#: ../../../components/http_kernel.rst:304
msgid ""
"One interesting listener comes from the `SensioFrameworkExtraBundle`_. "
"This listener's `@ParamConverter`_ functionality allows you to pass a "
"full object (e.g. a ``Post`` object) to your controller instead of a "
"scalar value (e.g. an ``id`` parameter that was on your route). The "
"listener - ``ParamConverterListener`` - uses reflection to look at each "
"of the arguments of the controller and tries to use different methods to "
"convert those to objects, which are then stored in the ``attributes`` "
"property of the ``Request`` object. Read the next section to see why this"
" is important."
msgstr ""

#: ../../../components/http_kernel.rst:314
msgid "4) Getting the Controller Arguments"
msgstr ""

#: ../../../components/http_kernel.rst:316
msgid ""
"Next, ``HttpKernel::handle()`` calls "
":method:`ArgumentResolverInterface::getArguments() "
"<Symfony\\\\Component\\\\HttpKernel\\\\Controller\\\\ArgumentResolverInterface::getArguments>`."
" Remember that the controller returned in ``getController()`` is a "
"callable. The purpose of ``getArguments()`` is to return the array of "
"arguments that should be passed to that controller. Exactly how this is "
"done is completely up to your design, though the built-in "
":class:`Symfony\\\\Component\\\\HttpKernel\\\\Controller\\\\ArgumentResolver`"
" is a good example."
msgstr ""

#: ../../../components/http_kernel.rst:324
msgid ""
"At this point the kernel has a PHP callable (the controller) and an array"
" of arguments that should be passed when executing that callable."
msgstr ""

#: ../../../components/http_kernel.rst
msgid "Getting the Controller Arguments in the Symfony Framework"
msgstr ""

#: ../../../components/http_kernel.rst:329
msgid ""
"Now that you know exactly what the controller callable (usually a method "
"inside a controller object) is, the ``ArgumentResolver`` uses "
"`reflection`_ on the callable to return an array of the *names* of each "
"of the arguments. It then iterates over each of these arguments and uses "
"the following tricks to determine which value should be passed for each "
"argument:"
msgstr ""

#: ../../../components/http_kernel.rst:335
msgid ""
"If the ``Request`` attributes bag contains a key that matches the name of"
" the argument, that value is used. For example, if the first argument to "
"a controller is ``$slug`` and there is a ``slug`` key in the ``Request`` "
"``attributes`` bag, that value is used (and typically this value came "
"from the ``RouterListener``)."
msgstr ""

#: ../../../components/http_kernel.rst:341
msgid ""
"If the argument in the controller is type-hinted with Symfony's "
":class:`Symfony\\\\Component\\\\HttpFoundation\\\\Request` object, the "
"``Request`` is passed in as the value."
msgstr ""

#: ../../../components/http_kernel.rst:345
msgid ""
"If the function or method argument is `variadic`_ and the ``Request`` "
"``attributes`` bag contains an array for that argument, they will all be "
"available through the `variadic`_ argument."
msgstr ""

#: ../../../components/http_kernel.rst:349
msgid ""
"This functionality is provided by resolvers implementing the "
":class:`Symfony\\\\Component\\\\HttpKernel\\\\Controller\\\\ArgumentValueResolverInterface`."
" There are four implementations which provide the default behavior of "
"Symfony but customization is the key here. By implementing the "
"``ArgumentValueResolverInterface`` yourself and passing this to the "
"``ArgumentResolver``, you can extend this functionality."
msgstr ""

#: ../../../components/http_kernel.rst:359
msgid "5) Calling the Controller"
msgstr ""

#: ../../../components/http_kernel.rst:361
msgid "The next step ``HttpKernel::handle()`` does is executing the controller."
msgstr ""

#: ../../../components/http_kernel.rst:363
msgid ""
"The job of the controller is to build the response for the given "
"resource. This could be an HTML page, a JSON string or anything else. "
"Unlike every other part of the process so far, this step is implemented "
"by the \"end-developer\", for each page that is built."
msgstr ""

#: ../../../components/http_kernel.rst:368
msgid ""
"Usually, the controller will return a ``Response`` object. If this is "
"true, then the work of the kernel is just about done! In this case, the "
"next step is the :ref:`kernel.response <component-http-kernel-kernel-"
"response>` event."
msgstr ""

#: ../../../components/http_kernel.rst:372
msgid ""
"But if the controller returns anything besides a ``Response``, then the "
"kernel has a little bit more work to do - :ref:`kernel.view <component-"
"http-kernel-kernel-view>` (since the end goal is *always* to generate a "
"``Response`` object)."
msgstr ""

#: ../../../components/http_kernel.rst:378
msgid ""
"A controller must return *something*. If a controller returns ``null``, "
"an exception will be thrown immediately."
msgstr ""

#: ../../../components/http_kernel.rst:384
msgid "6) The ``kernel.view`` Event"
msgstr ""

#: ../../../components/http_kernel.rst:386
msgid ""
"**Typical Purposes**: Transform a non-``Response`` return value from a "
"controller into a ``Response``"
msgstr ""

#: ../../../components/http_kernel.rst:391
msgid ""
"If the controller doesn't return a ``Response`` object, then the kernel "
"dispatches another event - ``kernel.view``. The job of a listener to this"
" event is to use the return value of the controller (e.g. an array of "
"data or an object) to create a ``Response``."
msgstr ""

#: ../../../components/http_kernel.rst:396
msgid ""
"This can be useful if you want to use a \"view\" layer: instead of "
"returning a ``Response`` from the controller, you return data that "
"represents the page. A listener to this event could then use this data to"
" create a ``Response`` that is in the correct format (e.g HTML, JSON, "
"etc)."
msgstr ""

#: ../../../components/http_kernel.rst:401
msgid ""
"At this stage, if no listener sets a response on the event, then an "
"exception is thrown: either the controller *or* one of the view listeners"
" must always return a ``Response``."
msgstr ""

#: ../../../components/http_kernel.rst:407
msgid ""
"When setting a response for the ``kernel.view`` event, the propagation is"
" stopped. This means listeners with lower priority won't be executed."
msgstr ""

#: ../../../components/http_kernel.rst
msgid "``kernel.view`` in the Symfony Framework"
msgstr ""

#: ../../../components/http_kernel.rst:412
msgid ""
"There is no default listener inside the Symfony Framework for the "
"``kernel.view`` event. However, `SensioFrameworkExtraBundle`_ *does* add "
"a listener to this event. If your controller returns an array, and you "
"place the `@Template`_ annotation above the controller, then this "
"listener renders a template, passes the array you returned from your "
"controller to that template, and creates a ``Response`` containing the "
"returned content from that template."
msgstr ""

#: ../../../components/http_kernel.rst:419
msgid ""
"Additionally, a popular community bundle `FOSRestBundle`_ implements a "
"listener on this event which aims to give you a robust view layer capable"
" of using a single controller to return many different content-type "
"responses (e.g. HTML, JSON, XML, etc)."
msgstr ""

#: ../../../components/http_kernel.rst:427
msgid "7) The ``kernel.response`` Event"
msgstr ""

#: ../../../components/http_kernel.rst:429
msgid ""
"**Typical Purposes**: Modify the ``Response`` object just before it is "
"sent"
msgstr ""

#: ../../../components/http_kernel.rst:433
msgid ""
"The end goal of the kernel is to transform a ``Request`` into a "
"``Response``. The ``Response`` might be created during the "
":ref:`kernel.request <component-http-kernel-kernel-request>` event, "
"returned from the :ref:`controller <component-http-kernel-calling-"
"controller>`, or returned by one of the listeners to the "
":ref:`kernel.view <component-http-kernel-kernel-view>` event."
msgstr ""

#: ../../../components/http_kernel.rst:439
msgid ""
"Regardless of who creates the ``Response``, another event - "
"``kernel.response`` is dispatched directly afterwards. A typical listener"
" to this event will modify the ``Response`` object in some way, such as "
"modifying headers, adding cookies, or even changing the content of the "
"``Response`` itself (e.g. injecting some JavaScript before the end "
"``</body>`` tag of an HTML response)."
msgstr ""

#: ../../../components/http_kernel.rst:445
msgid ""
"After this event is dispatched, the final ``Response`` object is returned"
" from :method:`Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel::handle`."
" In the most typical use-case, you can then call the "
":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Response::send` "
"method, which sends the headers and prints the ``Response`` content."
msgstr ""

#: ../../../components/http_kernel.rst
msgid "``kernel.response`` in the Symfony Framework"
msgstr ""

#: ../../../components/http_kernel.rst:452
msgid ""
"There are several minor listeners on this event inside the Symfony "
"Framework, and most modify the response in some way. For example, the "
":class:`Symfony\\\\Bundle\\\\WebProfilerBundle\\\\EventListener\\\\WebDebugToolbarListener`"
" injects some JavaScript at the bottom of your page in the ``dev`` "
"environment which causes the web debug toolbar to be displayed. Another "
"listener, "
":class:`Symfony\\\\Component\\\\Security\\\\Http\\\\Firewall\\\\ContextListener`"
" serializes the current user's information into the session so that it "
"can be reloaded on the next request."
msgstr ""

#: ../../../components/http_kernel.rst:464
msgid "8) The ``kernel.terminate`` Event"
msgstr ""

#: ../../../components/http_kernel.rst:466
msgid ""
"**Typical Purposes**: To perform some \"heavy\" action after the response"
" has been streamed to the user"
msgstr ""

#: ../../../components/http_kernel.rst:471
msgid ""
"The final event of the HttpKernel process is ``kernel.terminate`` and is "
"unique because it occurs *after* the ``HttpKernel::handle()`` method, and"
" after the response is sent to the user. Recall from above, then the code"
" that uses the kernel, ends like this::"
msgstr ""

#: ../../../components/http_kernel.rst:482
msgid ""
"As you can see, by calling ``$kernel->terminate`` after sending the "
"response, you will trigger the ``kernel.terminate`` event where you can "
"perform certain actions that you may have delayed in order to return the "
"response as quickly as possible to the client (e.g. sending emails)."
msgstr ""

#: ../../../components/http_kernel.rst:489
msgid ""
"Internally, the HttpKernel makes use of the "
":phpfunction:`fastcgi_finish_request` PHP function. This means that at "
"the moment, only the `PHP FPM`_ server API is able to send a response to "
"the client while the server's PHP process still performs some tasks. With"
" all other server APIs, listeners to ``kernel.terminate`` are still "
"executed, but the response is not sent to the client until they are all "
"completed."
msgstr ""

#: ../../../components/http_kernel.rst:498
msgid ""
"Using the ``kernel.terminate`` event is optional, and should only be "
"called if your kernel implements "
":class:`Symfony\\\\Component\\\\HttpKernel\\\\TerminableInterface`."
msgstr ""

#: ../../../components/http_kernel.rst
msgid "``kernel.terminate`` in the Symfony Framework"
msgstr ""

#: ../../../components/http_kernel.rst:503
msgid ""
"If you use the :ref:`memory spooling <email-spool-memory>` option of the "
"default Symfony mailer, then the `EmailSenderListener`_ is activated, "
"which actually delivers any emails that you scheduled to send during the "
"request."
msgstr ""

#: ../../../components/http_kernel.rst:510
msgid "Handling Exceptions: the ``kernel.exception`` Event"
msgstr ""

#: ../../../components/http_kernel.rst:512
msgid ""
"**Typical Purposes**: Handle some type of exception and create an "
"appropriate ``Response`` to return for the exception"
msgstr ""

#: ../../../components/http_kernel.rst:517
msgid ""
"If an exception is thrown at any point inside ``HttpKernel::handle()``, "
"another event - ``kernel.exception`` is thrown. Internally, the body of "
"the ``handle()`` function is wrapped in a try-catch block. When any "
"exception is thrown, the ``kernel.exception`` event is dispatched so that"
" your system can somehow respond to the exception."
msgstr ""

#: ../../../components/http_kernel.rst:527
msgid ""
"Each listener to this event is passed a "
":class:`Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\ExceptionEvent` "
"object, which you can use to access the original exception via the "
":method:`Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\ExceptionEvent::getThrowable`"
" method. A typical listener on this event will check for a certain type "
"of exception and create an appropriate error ``Response``."
msgstr ""

#: ../../../components/http_kernel.rst:533
msgid ""
"For example, to generate a 404 page, you might throw a special type of "
"exception and then add a listener on this event that looks for this "
"exception and creates and returns a 404 ``Response``. In fact, the "
"HttpKernel component comes with an "
":class:`Symfony\\\\Component\\\\HttpKernel\\\\EventListener\\\\ExceptionListener`,"
" which if you choose to use, will do this and more by default (see the "
"sidebar below for more details)."
msgstr ""

#: ../../../components/http_kernel.rst:542
msgid ""
"When setting a response for the ``kernel.exception`` event, the "
"propagation is stopped. This means listeners with lower priority won't be"
" executed."
msgstr ""

#: ../../../components/http_kernel.rst
msgid "``kernel.exception`` in the Symfony Framework"
msgstr ""

#: ../../../components/http_kernel.rst:547
msgid ""
"There are two main listeners to ``kernel.exception`` when using the "
"Symfony Framework."
msgstr ""

#: ../../../components/http_kernel.rst:550
msgid "**ExceptionListener in the HttpKernel Component**"
msgstr ""

#: ../../../components/http_kernel.rst:552
msgid ""
"The first comes core to the HttpKernel component and is called "
":class:`Symfony\\\\Component\\\\HttpKernel\\\\EventListener\\\\ExceptionListener`."
" The listener has several goals:"
msgstr ""

#: ../../../components/http_kernel.rst:556
msgid ""
"The thrown exception is converted into a "
":class:`Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException`"
" object, which contains all the information about the request, but which "
"can be printed and serialized."
msgstr ""

#: ../../../components/http_kernel.rst:561
msgid ""
"If the original exception implements "
":class:`Symfony\\\\Component\\\\HttpKernel\\\\Exception\\\\HttpExceptionInterface`,"
" then ``getStatusCode()`` and ``getHeaders()`` are called on the "
"exception and used to populate the headers and status code of the "
"``FlattenException`` object. The idea is that these are used in the next "
"step when creating the final response. If you want to set custom HTTP "
"headers, you can always use the ``setHeaders()`` method on exceptions "
"derived from the "
":class:`Symfony\\\\Component\\\\HttpKernel\\\\Exception\\\\HttpException`"
" class."
msgstr ""

#: ../../../components/http_kernel.rst:570
msgid ""
"If the original exception implements "
":class:`Symfony\\\\Component\\\\HttpFoundation\\\\Exception\\\\RequestExceptionInterface`,"
" then the status code of the ``FlattenException`` object is populated "
"with ``400`` and no other headers are modified."
msgstr ""

#: ../../../components/http_kernel.rst:575
msgid ""
"A controller is executed and passed the flattened exception. The exact "
"controller to render is passed as a constructor argument to this "
"listener. This controller will return the final ``Response`` for this "
"error page."
msgstr ""

#: ../../../components/http_kernel.rst:579
msgid "**ExceptionListener in the Security Component**"
msgstr ""

#: ../../../components/http_kernel.rst:581
msgid ""
"The other important listener is the "
":class:`Symfony\\\\Component\\\\Security\\\\Http\\\\Firewall\\\\ExceptionListener`."
" The goal of this listener is to handle security exceptions and, when "
"appropriate, *help* the user to authenticate (e.g. redirect to the login "
"page)."
msgstr ""

#: ../../../components/http_kernel.rst:590
msgid "Creating an Event Listener"
msgstr ""

#: ../../../components/http_kernel.rst:592
msgid ""
"As you've seen, you can create and attach event listeners to any of the "
"events dispatched during the ``HttpKernel::handle()`` cycle. Typically a "
"listener is a PHP class with a method that's executed, but it can be "
"anything. For more information on creating and attaching event listeners,"
" see :doc:`/components/event_dispatcher`."
msgstr ""

#: ../../../components/http_kernel.rst:597
msgid ""
"The name of each of the \"kernel\" events is defined as a constant on the"
" :class:`Symfony\\\\Component\\\\HttpKernel\\\\KernelEvents` class. "
"Additionally, each event listener is passed a single argument, which is "
"some sub-class of "
":class:`Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\KernelEvent`. This"
" object contains information about the current state of the system and "
"each event has their own event object:"
msgstr ""

#: ../../../components/http_kernel.rst:606
msgid "Name"
msgstr ""

#: ../../../components/http_kernel.rst:606
msgid "``KernelEvents`` Constant"
msgstr ""

#: ../../../components/http_kernel.rst:606
msgid "Argument passed to the listener"
msgstr ""

#: ../../../components/http_kernel.rst:608
msgid "kernel.request"
msgstr ""

#: ../../../components/http_kernel.rst:608
msgid "``KernelEvents::REQUEST``"
msgstr ""

#: ../../../components/http_kernel.rst:608
msgid ":class:`Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\RequestEvent`"
msgstr ""

#: ../../../components/http_kernel.rst:609
msgid "kernel.controller"
msgstr ""

#: ../../../components/http_kernel.rst:609
msgid "``KernelEvents::CONTROLLER``"
msgstr ""

#: ../../../components/http_kernel.rst:609
msgid ":class:`Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\ControllerEvent`"
msgstr ""

#: ../../../components/http_kernel.rst:610
msgid "kernel.controller_arguments"
msgstr ""

#: ../../../components/http_kernel.rst:610
msgid "``KernelEvents::CONTROLLER_ARGUMENTS``"
msgstr ""

#: ../../../components/http_kernel.rst:610
msgid ":class:`Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\ControllerArgumentsEvent`"
msgstr ""

#: ../../../components/http_kernel.rst:611
msgid "kernel.view"
msgstr ""

#: ../../../components/http_kernel.rst:611
msgid "``KernelEvents::VIEW``"
msgstr ""

#: ../../../components/http_kernel.rst:611
msgid ":class:`Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\ViewEvent`"
msgstr ""

#: ../../../components/http_kernel.rst:612
msgid "kernel.response"
msgstr ""

#: ../../../components/http_kernel.rst:612
msgid "``KernelEvents::RESPONSE``"
msgstr ""

#: ../../../components/http_kernel.rst:612
msgid ":class:`Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\ResponseEvent`"
msgstr ""

#: ../../../components/http_kernel.rst:613
msgid "kernel.finish_request"
msgstr ""

#: ../../../components/http_kernel.rst:613
msgid "``KernelEvents::FINISH_REQUEST``"
msgstr ""

#: ../../../components/http_kernel.rst:613
msgid ":class:`Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\FinishRequestEvent`"
msgstr ""

#: ../../../components/http_kernel.rst:614
msgid "kernel.terminate"
msgstr ""

#: ../../../components/http_kernel.rst:614
msgid "``KernelEvents::TERMINATE``"
msgstr ""

#: ../../../components/http_kernel.rst:614
msgid ":class:`Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\TerminateEvent`"
msgstr ""

#: ../../../components/http_kernel.rst:615
msgid "kernel.exception"
msgstr ""

#: ../../../components/http_kernel.rst:615
msgid "``KernelEvents::EXCEPTION``"
msgstr ""

#: ../../../components/http_kernel.rst:615
msgid ":class:`Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\ExceptionEvent`"
msgstr ""

#: ../../../components/http_kernel.rst:621
msgid "A full Working Example"
msgstr ""

#: ../../../components/http_kernel.rst:623
msgid ""
"When using the HttpKernel component, you're free to attach any listeners "
"to the core events, use any controller resolver that implements the "
":class:`Symfony\\\\Component\\\\HttpKernel\\\\Controller\\\\ControllerResolverInterface`"
" and use any argument resolver that implements the "
":class:`Symfony\\\\Component\\\\HttpKernel\\\\Controller\\\\ArgumentResolverInterface`."
" However, the HttpKernel component comes with some built-in listeners and"
" everything else that can be used to create a working example::"
msgstr ""

#: ../../../components/http_kernel.rst:673
msgid "Sub Requests"
msgstr ""

#: ../../../components/http_kernel.rst:675
msgid ""
"In addition to the \"main\" request that's sent into "
"``HttpKernel::handle()``, you can also send so-called \"sub request\". A "
"sub request looks and acts like any other request, but typically serves "
"to render just one small portion of a page instead of a full page. You'll"
" most commonly make sub-requests from your controller (or perhaps from "
"inside a template, that's being rendered by your controller)."
msgstr ""

#: ../../../components/http_kernel.rst:686
msgid ""
"To execute a sub request, use ``HttpKernel::handle()``, but change the "
"second argument as follows::"
msgstr ""

#: ../../../components/http_kernel.rst:702
msgid ""
"This creates another full request-response cycle where this new "
"``Request`` is transformed into a ``Response``. The only difference "
"internally is that some listeners (e.g. security) may only act upon the "
"master request. Each listener is passed some sub-class of "
":class:`Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\KernelEvent`, "
"whose "
":method:`Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\KernelEvent::isMasterRequest`"
" can be used to check if the current request is a \"master\" or \"sub\" "
"request."
msgstr ""

#: ../../../components/http_kernel.rst:709
msgid ""
"For example, a listener that only needs to act on the master request may "
"look like this::"
msgstr ""

#: ../../../components/http_kernel.rst:727
msgid "Locating Resources"
msgstr ""

#: ../../../components/http_kernel.rst:729
msgid ""
"The HttpKernel component is responsible of the bundle mechanism used in "
"Symfony applications. The key feature of the bundles is that they allow "
"to override any resource used by the application (config files, "
"templates, controllers, translation files, etc.)"
msgstr ""

#: ../../../components/http_kernel.rst:734
msgid ""
"This overriding mechanism works because resources are referenced not by "
"their physical path but by their logical path. For example, the "
"``services.xml`` file stored in the ``Resources/config/`` directory of a "
"bundle called FooBundle is referenced as "
"``@FooBundle/Resources/config/services.xml``. This logical path will work"
" when the application overrides that file and even if you change the "
"directory of FooBundle."
msgstr ""

#: ../../../components/http_kernel.rst:741
msgid ""
"The HttpKernel component provides a method called "
":method:`Symfony\\\\Component\\\\HttpKernel\\\\Kernel::locateResource` "
"which can be used to transform logical paths into physical paths::"
msgstr ""

#: ../../../components/http_kernel.rst:747
msgid "Learn more"
msgstr ""

