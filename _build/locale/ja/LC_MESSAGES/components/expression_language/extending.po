# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the Symfony Framework
# Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Symfony Framework Documentation \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-08 14:21+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../../components/expression_language/extending.rst:5
msgid "Extending the ExpressionLanguage"
msgstr ""

#: ../../../components/expression_language/extending.rst:7
msgid ""
"The ExpressionLanguage can be extended by adding custom functions. For "
"instance, in the Symfony Framework, the security has custom functions to "
"check the user's role."
msgstr ""

#: ../../../components/expression_language/extending.rst:13
msgid ""
"If you want to learn how to use functions in an expression, read \":ref"
":`component-expression-functions`\"."
msgstr ""

#: ../../../components/expression_language/extending.rst:17
msgid "Registering Functions"
msgstr ""

#: ../../../components/expression_language/extending.rst:19
msgid ""
"Functions are registered on each specific ``ExpressionLanguage`` "
"instance. That means the functions can be used in any expression executed"
" by that instance."
msgstr ""

#: ../../../components/expression_language/extending.rst:23
msgid ""
"To register a function, use "
":method:`Symfony\\\\Component\\\\ExpressionLanguage\\\\ExpressionLanguage::register`."
" This method has 3 arguments:"
msgstr ""

#: ../../../components/expression_language/extending.rst:27
msgid "**name** - The name of the function in an expression;"
msgstr ""

#: ../../../components/expression_language/extending.rst:28
msgid ""
"**compiler** - A function executed when compiling an expression using the"
" function;"
msgstr ""

#: ../../../components/expression_language/extending.rst:30
msgid "**evaluator** - A function executed when the expression is evaluated."
msgstr ""

#: ../../../components/expression_language/extending.rst:32
msgid "Example::"
msgstr ""

#: ../../../components/expression_language/extending.rst:50
msgid ""
"In addition to the custom function arguments, the **evaluator** is passed"
" an ``arguments`` variable as its first argument, which is equal to the "
"second argument of ``evaluate()`` (e.g. the \"values\" when evaluating an"
" expression)."
msgstr ""

#: ../../../components/expression_language/extending.rst:57
msgid "Using Expression Providers"
msgstr ""

#: ../../../components/expression_language/extending.rst:59
msgid ""
"When you use the ``ExpressionLanguage`` class in your library, you often "
"want to add custom functions. To do so, you can create a new expression "
"provider by creating a class that implements "
":class:`Symfony\\\\Component\\\\ExpressionLanguage\\\\ExpressionFunctionProviderInterface`."
msgstr ""

#: ../../../components/expression_language/extending.rst:64
msgid ""
"This interface requires one method: "
":method:`Symfony\\\\Component\\\\ExpressionLanguage\\\\ExpressionFunctionProviderInterface::getFunctions`,"
" which returns an array of expression functions (instances of "
":class:`Symfony\\\\Component\\\\ExpressionLanguage\\\\ExpressionFunction`)"
" to register::"
msgstr ""

#: ../../../components/expression_language/extending.rst:93
msgid ""
"To create an expression function from a PHP function with the "
":method:`Symfony\\\\Component\\\\ExpressionLanguage\\\\ExpressionFunction::fromPhp`"
" static method::"
msgstr ""

#: ../../../components/expression_language/extending.rst:98
msgid ""
"Namespaced functions are supported, but they require a second argument to"
" define the name of the expression::"
msgstr ""

#: ../../../components/expression_language/extending.rst:103
msgid ""
"You can register providers using "
":method:`Symfony\\\\Component\\\\ExpressionLanguage\\\\ExpressionLanguage::registerProvider`"
" or by using the second argument of the constructor::"
msgstr ""

#: ../../../components/expression_language/extending.rst:120
msgid ""
"It is recommended to create your own ``ExpressionLanguage`` class in your"
" library. Now you can add the extension by overriding the constructor::"
msgstr ""

