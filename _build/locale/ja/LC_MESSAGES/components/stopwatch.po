# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the Symfony Framework
# Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Symfony Framework Documentation \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-08 14:21+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../../components/stopwatch.rst:6
msgid "The Stopwatch Component"
msgstr ""

#: ../../../components/stopwatch.rst:8
msgid "The Stopwatch component provides a way to profile code."
msgstr ""

#: ../../../components/stopwatch.rst:11
msgid "Installation"
msgstr ""

#: ../../../components/require_autoload.rst.inc:3
msgid ""
"If you install this component outside of a Symfony application, you must "
"require the ``vendor/autoload.php`` file in your code to enable the class"
" autoloading mechanism provided by Composer. Read :doc:`this article "
"</components/using_components>` for more details."
msgstr ""

#: ../../../components/stopwatch.rst:20
msgid "Usage"
msgstr ""

#: ../../../components/stopwatch.rst:22
msgid ""
"The Stopwatch component provides a consistent way to measure execution "
"time of certain parts of code so that you don't constantly have to parse "
":phpfunction:`microtime` by yourself. Instead, use the "
":class:`Symfony\\\\Component\\\\Stopwatch\\\\Stopwatch` class::"
msgstr ""

#: ../../../components/stopwatch.rst:40
msgid ""
"The :class:`Symfony\\\\Component\\\\Stopwatch\\\\StopwatchEvent` object "
"can be retrieved from the  "
":method:`Symfony\\\\Component\\\\Stopwatch\\\\Stopwatch::start`, "
":method:`Symfony\\\\Component\\\\Stopwatch\\\\Stopwatch::stop`, "
":method:`Symfony\\\\Component\\\\Stopwatch\\\\Stopwatch::lap` and "
":method:`Symfony\\\\Component\\\\Stopwatch\\\\Stopwatch::getEvent` "
"methods. The latter should be used when you need to retrieve the duration"
" of an event while it is still running."
msgstr ""

#: ../../../components/stopwatch.rst:50
msgid ""
"By default, the stopwatch truncates any sub-millisecond time measure to "
"``0``, so you can't measure microseconds or nanoseconds. If you need more"
" precision, pass ``true`` to the ``Stopwatch`` class constructor to "
"enable full precision::"
msgstr ""

#: ../../../components/stopwatch.rst:56
msgid ""
"The stopwatch can be reset to its original state at any given time with "
"the :method:`Symfony\\\\Component\\\\Stopwatch\\\\Stopwatch::reset` "
"method, which deletes all the data measured so far."
msgstr ""

#: ../../../components/stopwatch.rst:60
msgid "You can also provide a category name to an event::"
msgstr ""

#: ../../../components/stopwatch.rst:64
msgid ""
"You can consider categories as a way of tagging events. For example, the "
"Symfony Profiler tool uses categories to nicely color-code different "
"events."
msgstr ""

#: ../../../components/stopwatch.rst:69
msgid ""
"Read :ref:`this article <profiler-timing-execution>` to learn more about "
"integrating the Stopwatch component into the Symfony profiler."
msgstr ""

#: ../../../components/stopwatch.rst:73
msgid "Periods"
msgstr ""

#: ../../../components/stopwatch.rst:75
msgid ""
"As you know from the real world, all stopwatches come with two buttons: "
"one to start and stop the stopwatch, and another to measure the lap time."
" This is exactly what the "
":method:`Symfony\\\\Component\\\\Stopwatch\\\\Stopwatch::lap` method "
"does::"
msgstr ""

#: ../../../components/stopwatch.rst:90
msgid ""
"Lap information is stored as \"periods\" within the event. To get lap "
"information call::"
msgstr ""

#: ../../../components/stopwatch.rst:95
msgid ""
"In addition to periods, you can get other useful information from the "
"event object. For example::"
msgstr ""

#: ../../../components/stopwatch.rst:107
msgid "Sections"
msgstr ""

#: ../../../components/stopwatch.rst:109
msgid ""
"Sections are a way to logically split the timeline into groups. You can "
"see how Symfony uses sections to nicely visualize the framework lifecycle"
" in the Symfony Profiler tool. Here is a basic usage example using "
"sections::"
msgstr ""

#: ../../../components/stopwatch.rst:121
msgid ""
"You can reopen a closed section by calling the "
":method:`Symfony\\\\Component\\\\Stopwatch\\\\Stopwatch::openSection` "
"method and specifying the id of the section to be reopened::"
msgstr ""

