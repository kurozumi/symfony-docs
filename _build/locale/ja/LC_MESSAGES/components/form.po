# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the Symfony Framework
# Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Symfony Framework Documentation \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-08 14:21+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../../components/form.rst:6
msgid "The Form Component"
msgstr ""

#: ../../../components/form.rst:8
msgid "The Form component allows you to create, process and reuse forms."
msgstr ""

#: ../../../components/form.rst:10
msgid ""
"The Form component is a tool to help you solve the problem of allowing "
"end-users to interact with the data and modify the data in your "
"application. And though traditionally this has been through HTML forms, "
"the component focuses on processing data to and from your client and "
"application, whether that data be from a normal form post or from an API."
msgstr ""

#: ../../../components/form.rst:17
msgid "Installation"
msgstr ""

#: ../../../components/require_autoload.rst.inc:3
msgid ""
"If you install this component outside of a Symfony application, you must "
"require the ``vendor/autoload.php`` file in your code to enable the class"
" autoloading mechanism provided by Composer. Read :doc:`this article "
"</components/using_components>` for more details."
msgstr ""

#: ../../../components/form.rst:26
msgid "Configuration"
msgstr ""

#: ../../../components/form.rst:30
msgid ""
"This article explains how to use the Form features as an independent "
"component in any PHP application. Read the :doc:`/forms` article to learn"
" about how to use it in Symfony applications."
msgstr ""

#: ../../../components/form.rst:34
msgid ""
"In Symfony, forms are represented by objects and these objects are built "
"by using a *form factory*. Building a form factory is done with the "
"factory method ``Forms::createFormFactory``::"
msgstr ""

#: ../../../components/form.rst:42
msgid ""
"This factory can already be used to create basic forms, but it is lacking"
" support for very important features:"
msgstr ""

#: ../../../components/form.rst:45
msgid "**Request Handling:** Support for request handling and file uploads;"
msgstr ""

#: ../../../components/form.rst:46
msgid ""
"**CSRF Protection:** Support for protection against Cross-Site-Request-"
"Forgery (CSRF) attacks;"
msgstr ""

#: ../../../components/form.rst:48
msgid ""
"**Templating:** Integration with a templating layer that allows you to "
"reuse HTML fragments when rendering a form;"
msgstr ""

#: ../../../components/form.rst:50
msgid ""
"**Translation:** Support for translating error messages, field labels and"
" other strings;"
msgstr ""

#: ../../../components/form.rst:52
msgid ""
"**Validation:** Integration with a validation library to generate error "
"messages for submitted data."
msgstr ""

#: ../../../components/form.rst:55
msgid ""
"The Symfony Form component relies on other libraries to solve these "
"problems. Most of the time you will use Twig and the Symfony "
":doc:`HttpFoundation </components/http_foundation>`, :doc:`Translation "
"</translation>` and :doc:`Validator </components/validator>` components, "
"but you can replace any of these with a different library of your choice."
msgstr ""

#: ../../../components/form.rst:61
msgid ""
"The following sections explain how to plug these libraries into the form "
"factory."
msgstr ""

#: ../../../components/form.rst:66
msgid "For a working example, see https://github.com/webmozart/standalone-forms"
msgstr ""

#: ../../../components/form.rst:69
msgid "Request Handling"
msgstr ""

#: ../../../components/form.rst:71
msgid ""
"To process form data, you'll need to call the "
":method:`Symfony\\\\Component\\\\Form\\\\Form::handleRequest` method::"
msgstr ""

#: ../../../components/form.rst:76
msgid ""
"Behind the scenes, this uses a "
":class:`Symfony\\\\Component\\\\Form\\\\NativeRequestHandler` object to "
"read data off of the correct PHP superglobals (i.e. ``$_POST`` or "
"``$_GET``) based on the HTTP method configured on the form (POST is "
"default)."
msgstr ""

#: ../../../components/form.rst:82
msgid ""
"If you need more control over exactly when your form is submitted or "
"which data is passed to it, :doc:`use the submit() method to handle form "
"submissions </form/direct_submit>`."
msgstr ""

#: ../../../components/form.rst
msgid "Integration with the HttpFoundation Component"
msgstr ""

#: ../../../components/form.rst:88
msgid ""
"If you use the HttpFoundation component, then you should add the "
":class:`Symfony\\\\Component\\\\Form\\\\Extension\\\\HttpFoundation\\\\HttpFoundationExtension`"
" to your form factory::"
msgstr ""

#: ../../../components/form.rst:99
msgid ""
"Now, when you process a form, you can pass the "
":class:`Symfony\\\\Component\\\\HttpFoundation\\\\Request` object to "
":method:`Symfony\\\\Component\\\\Form\\\\Form::handleRequest`::"
msgstr ""

#: ../../../components/form.rst:106
msgid ""
"For more information about the HttpFoundation component or how to install"
" it, see :doc:`/components/http_foundation`."
msgstr ""

#: ../../../components/form.rst:110
msgid "CSRF Protection"
msgstr ""

#: ../../../components/form.rst:112
msgid ""
"Protection against CSRF attacks is built into the Form component, but you"
" need to explicitly enable it or replace it with a custom solution. If "
"you want to use the built-in support, first install the Security CSRF "
"component:"
msgstr ""

#: ../../../components/form.rst:120
msgid "The following snippet adds CSRF protection to the form factory::"
msgstr ""

#: ../../../components/form.rst:141
msgid ""
"Internally, this extension will automatically add a hidden field to every"
" form (called ``_token`` by default) whose value is automatically "
"generated by the CSRF generator and validated when binding the form."
msgstr ""

#: ../../../components/form.rst:147
msgid ""
"If you're not using the HttpFoundation component, you can use "
":class:`Symfony\\\\Component\\\\Security\\\\Csrf\\\\TokenStorage\\\\NativeSessionTokenStorage`"
" instead, which relies on PHP's native session handling::"
msgstr ""

#: ../../../components/form.rst:156
msgid ""
"You can disable CSRF protection per form using the ``csrf_protection`` "
"option::"
msgstr ""

#: ../../../components/form.rst:164
msgid "Twig Templating"
msgstr ""

#: ../../../components/form.rst:166
msgid ""
"If you're using the Form component to process HTML forms, you'll need a "
"way to render your form as HTML form fields (complete with field values, "
"errors, and labels). If you use `Twig`_ as your template engine, the Form"
" component offers a rich integration."
msgstr ""

#: ../../../components/form.rst:171
msgid ""
"To use the integration, you'll need the twig bridge, which provides "
"integration between Twig and several Symfony components:"
msgstr ""

#: ../../../components/form.rst:178
msgid ""
"The TwigBridge integration provides you with several :ref:`Twig Functions"
" <reference-form-twig-functions-variables>` that help you render the HTML"
" widget, label, help and errors for each field (as well as a few other "
"things). To configure the integration, you'll need to bootstrap or access"
" Twig and add the "
":class:`Symfony\\\\Bridge\\\\Twig\\\\Extension\\\\FormExtension`::"
msgstr ""

#: ../../../components/form.rst:227
msgid ""
"The ``Twig\\RuntimeLoader\\FactoryRuntimeLoader`` was introduced in Twig "
"1.30."
msgstr ""

#: ../../../components/form.rst:229
msgid ""
"The exact details of your `Twig Configuration`_ will vary, but the goal "
"is always to add the "
":class:`Symfony\\\\Bridge\\\\Twig\\\\Extension\\\\FormExtension` to Twig,"
" which gives you access to the Twig functions for rendering forms. To do "
"this, you first need to create a "
":class:`Symfony\\\\Bridge\\\\Twig\\\\Form\\\\TwigRendererEngine`, where "
"you define your :doc:`form themes </form/form_themes>` (i.e. "
"resources/files that define form HTML markup)."
msgstr ""

#: ../../../components/form.rst:236
msgid ""
"For general details on rendering forms, see "
":doc:`/form/form_customization`."
msgstr ""

#: ../../../components/form.rst:240
msgid ""
"If you use the Twig integration, read \":ref:`component-form-intro-"
"install-translation`\" below for details on the needed translation "
"filters."
msgstr ""

#: ../../../components/form.rst:246
msgid "Translation"
msgstr ""

#: ../../../components/form.rst:248
msgid ""
"If you're using the Twig integration with one of the default form theme "
"files (e.g. ``form_div_layout.html.twig``), there is a Twig filter "
"(``trans``) that is used for translating form labels, errors, option text"
" and other strings."
msgstr ""

#: ../../../components/form.rst:253
msgid ""
"To add the ``trans`` Twig filter, you can either use the built-in "
":class:`Symfony\\\\Bridge\\\\Twig\\\\Extension\\\\TranslationExtension` "
"that integrates with Symfony's Translation component, or add the Twig "
"filter yourself, via your own Twig extension."
msgstr ""

#: ../../../components/form.rst:258
msgid ""
"To use the built-in integration, be sure that your project has Symfony's "
"Translation and :doc:`Config </components/config>` components installed:"
msgstr ""

#: ../../../components/form.rst:266
msgid ""
"Next, add the "
":class:`Symfony\\\\Bridge\\\\Twig\\\\Extension\\\\TranslationExtension` "
"to your ``Twig\\Environment`` instance::"
msgstr ""

#: ../../../components/form.rst:291
msgid ""
"Depending on how your translations are being loaded, you can now add "
"string keys, such as field labels, and their translations to your "
"translation files."
msgstr ""

#: ../../../components/form.rst:294
msgid "For more details on translations, see :doc:`/translation`."
msgstr ""

#: ../../../components/form.rst:297
msgid "Validation"
msgstr ""

#: ../../../components/form.rst:299
msgid ""
"The Form component comes with tight (but optional) integration with "
"Symfony's Validator component. If you're using a different solution for "
"validation, no problem! Take the submitted/bound data of your form (which"
" is an array or object) and pass it through your own validation system."
msgstr ""

#: ../../../components/form.rst:304
msgid ""
"To use the integration with Symfony's Validator component, first make "
"sure it's installed in your application:"
msgstr ""

#: ../../../components/form.rst:311
msgid ""
"If you're not familiar with Symfony's Validator component, read more "
"about it: :doc:`/validation`. The Form component comes with a "
":class:`Symfony\\\\Component\\\\Form\\\\Extension\\\\Validator\\\\ValidatorExtension`"
" class, which automatically applies validation to your data on bind. "
"These errors are then mapped to the correct field and rendered."
msgstr ""

#: ../../../components/form.rst:317
msgid ""
"Your integration with the Validation component will look something like "
"this::"
msgstr ""

#: ../../../components/form.rst:349
msgid ""
"To learn more, skip down to the :ref:`component-form-intro-validation` "
"section."
msgstr ""

#: ../../../components/form.rst:352
msgid "Accessing the Form Factory"
msgstr ""

#: ../../../components/form.rst:354
msgid ""
"Your application only needs one form factory, and that one factory object"
" should be used to create any and all form objects in your application. "
"This means that you should create it in some central, bootstrap part of "
"your application and then access it whenever you need to build a form."
msgstr ""

#: ../../../components/form.rst:361
msgid ""
"In this document, the form factory is always a local variable called "
"``$formFactory``. The point here is that you will probably need to create"
" this object in some more \"global\" way so you can access it from "
"anywhere."
msgstr ""

#: ../../../components/form.rst:365
msgid ""
"Exactly how you gain access to your one form factory is up to you. If "
"you're using a service container (like provided with the "
":doc:`DependencyInjection component </components/dependency_injection>`),"
" then you should add the form factory to your container and grab it out "
"whenever you need to. If your application uses global or static variables"
" (not usually a good idea), then you can store the object on some static "
"class or do something similar."
msgstr ""

#: ../../../components/form.rst:373
msgid ""
"Regardless of how you architect your application, remember that you "
"should only have one form factory and that you'll need to be able to "
"access it throughout your application."
msgstr ""

#: ../../../components/form.rst:380
msgid "Creating a simple Form"
msgstr ""

#: ../../../components/form.rst:384
msgid ""
"If you're using the Symfony Framework, then the form factory is available"
" automatically as a service called ``form.factory``. Also, the default "
"base controller class has a "
":method:`Symfony\\\\Bundle\\\\FrameworkBundle\\\\Controller::createFormBuilder`"
" method, which is a shortcut to fetch the form factory and call "
"``createBuilder()`` on it."
msgstr ""

#: ../../../components/form.rst:390
msgid ""
"Creating a form is done via a "
":class:`Symfony\\\\Component\\\\Form\\\\FormBuilder` object, where you "
"build and configure different fields. The form builder is created from "
"the form factory."
msgstr ""

#: ../../../components/form.rst:440
msgid ""
"As you can see, creating a form is like writing a recipe: you call "
"``add()`` for each new field you want to create. The first argument to "
"``add()`` is the name of your field, and the second is the fully "
"qualified class name. The Form component comes with a lot of :doc:`built-"
"in types </reference/forms/types>`."
msgstr ""

#: ../../../components/form.rst:445
msgid ""
"Now that you've built your form, learn how to :ref:`render <component-"
"form-intro-rendering-form>` it and :ref:`process the form submission "
"<component-form-intro-handling-submission>`."
msgstr ""

#: ../../../components/form.rst:449
msgid "Setting default Values"
msgstr ""

#: ../../../components/form.rst:451
msgid ""
"If you need your form to load with some default values (or you're "
"building an \"edit\" form), pass in the default data when creating your "
"form builder:"
msgstr ""

#: ../../../components/form.rst:501
msgid ""
"In this example, the default data is an array. Later, when you use the "
":ref:`data_class <form-data-class>` option to bind data directly to "
"objects, your default data will be an instance of that object."
msgstr ""

#: ../../../components/form.rst:508
msgid "Rendering the Form"
msgstr ""

#: ../../../components/form.rst:510
msgid ""
"Now that the form has been created, the next step is to render it. This "
"is done by passing a special form \"view\" object to your template "
"(notice the ``$form->createView()`` in the controller above) and using a "
"set of :ref:`form helper functions <reference-form-twig-functions>`:"
msgstr ""

#: ../../../components/form.rst:526
msgid ""
"That's it! By printing ``form_widget(form)``, each field in the form is "
"rendered, along with a label and error message (if there is one). While "
"this is convenient, it's not very flexible (yet). Usually, you'll want to"
" render each form field individually so you can control how the form "
"looks. You'll learn how to do that in the :doc:`form customization "
"</form/form_customization>` article."
msgstr ""

#: ../../../components/form.rst:533
msgid "Changing a Form's Method and Action"
msgstr ""

#: ../../../components/form.rst:535
msgid ""
"By default, a form is submitted to the same URI that rendered the form "
"with an HTTP POST request. This behavior can be changed using the :ref"
":`form-option-action` and :ref:`form-option-method` options (the "
"``method`` option is also used by "
":method:`Symfony\\\\Component\\\\Form\\\\Form::handleRequest` to "
"determine whether a form has been submitted):"
msgstr ""

#: ../../../components/form.rst:579
msgid "Handling Form Submissions"
msgstr ""

#: ../../../components/form.rst:581
msgid ""
"To handle form submissions, use the "
":method:`Symfony\\\\Component\\\\Form\\\\Form::handleRequest` method:"
msgstr ""

#: ../../../components/form.rst:649
msgid ""
"This defines a common form \"workflow\", which contains 3 different "
"possibilities:"
msgstr ""

#: ../../../components/form.rst:651
msgid ""
"On the initial GET request (i.e. when the user \"surfs\" to your page), "
"build your form and render it;"
msgstr ""

#: ../../../components/form.rst:654
msgid ""
"If the request is a POST, process the submitted data (via "
":method:`Symfony\\\\Component\\\\Form\\\\Form::handleRequest`). Then:"
msgstr ""

#: ../../../components/form.rst:657
msgid ""
"if the form is invalid, re-render the form (which will now contain "
"errors);"
msgstr ""

#: ../../../components/form.rst:658
msgid "if the form is valid, perform some action and redirect."
msgstr ""

#: ../../../components/form.rst:660
msgid ""
"Luckily, you don't need to decide whether or not a form has been "
"submitted. Just pass the current request to the "
":method:`Symfony\\\\Component\\\\Form\\\\Form::handleRequest` method. "
"Then, the Form component will do all the necessary work for you."
msgstr ""

#: ../../../components/form.rst:667
msgid "Form Validation"
msgstr ""

#: ../../../components/form.rst:669
msgid ""
"The easiest way to add validation to your form is via the ``constraints``"
" option when building each field:"
msgstr ""

#: ../../../components/form.rst:723
msgid ""
"When the form is bound, these validation constraints will be applied "
"automatically and the errors will display next to the fields on error."
msgstr ""

#: ../../../components/form.rst:728
msgid ""
"For a list of all of the built-in validation constraints, see "
":doc:`/reference/constraints`."
msgstr ""

#: ../../../components/form.rst:732
msgid "Accessing Form Errors"
msgstr ""

#: ../../../components/form.rst:734
msgid ""
"You can use the "
":method:`Symfony\\\\Component\\\\Form\\\\FormInterface::getErrors` method"
" to access the list of errors. It returns a "
":class:`Symfony\\\\Component\\\\Form\\\\FormErrorIterator` instance::"
msgstr ""

#: ../../../components/form.rst:758
msgid "Clearing Form Errors"
msgstr ""

#: ../../../components/form.rst:760
msgid ""
"Any errors can be manually cleared using the "
":method:`Symfony\\\\Component\\\\Form\\\\ClearableErrorsInterface::clearErrors`"
" method. This is useful when you'd like to validate the form without "
"showing validation errors to the user (i.e. during a partial AJAX "
"submission or :doc:`dynamic form modification "
"</form/dynamic_form_modification>`)."
msgstr ""

#: ../../../components/form.rst:766
msgid ""
"Because clearing the errors makes the form valid, "
":method:`Symfony\\\\Component\\\\Form\\\\ClearableErrorsInterface::clearErrors`"
" should only be called after testing whether the form is valid."
msgstr ""

#: ../../../components/form.rst:771
msgid "Learn more"
msgstr ""

