# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the Symfony Framework
# Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Symfony Framework Documentation \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-08 14:21+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../../components/uid.rst:6
msgid "The UID Component"
msgstr ""

#: ../../../components/uid.rst:8
msgid ""
"The UID component provides utilities to work with `unique identifiers`_ "
"(UIDs) such as UUIDs and ULIDs."
msgstr ""

#: ../../../components/uid.rst:13
msgid ""
"The UID component was introduced in Symfony 5.1 as an :doc:`experimental "
"feature </contributing/code/experimental>`."
msgstr ""

#: ../../../components/uid.rst:17
msgid "Installation"
msgstr ""

#: ../../../components/require_autoload.rst.inc:3
msgid ""
"If you install this component outside of a Symfony application, you must "
"require the ``vendor/autoload.php`` file in your code to enable the class"
" autoloading mechanism provided by Composer. Read :doc:`this article "
"</components/using_components>` for more details."
msgstr ""

#: ../../../components/uid.rst:26
msgid "UUIDs"
msgstr ""

#: ../../../components/uid.rst:28
msgid ""
"`UUIDs`_ (*universally unique identifiers*) are one of the most popular "
"UIDs in the software industry. UUIDs are 128-bit numbers usually "
"represented as five groups of hexadecimal characters: ``xxxxxxxx-xxxx-"
"Mxxx-Nxxx-xxxxxxxxxxxx`` (the ``M`` digit is the UUID version and the "
"``N`` digit is the UUID variant)."
msgstr ""

#: ../../../components/uid.rst:34
msgid "Generating UUIDs"
msgstr ""

#: ../../../components/uid.rst:36
msgid ""
"Use the named constructors of the ``Uuid`` class or any of the specific "
"classes to create each type of UUID::"
msgstr ""

#: ../../../components/uid.rst:62
msgid ""
"If your UUID is generated by another system, use the ``fromString()`` "
"method to create an object and make use of the utilities available for "
"Symfony UUIDs::"
msgstr ""

#: ../../../components/uid.rst:69
msgid ""
"If your UUIDs are generated in binary format, use the ``fromBinary()`` "
"method to create the objects for them::"
msgstr ""

#: ../../../components/uid.rst:75
msgid "Converting UUIDs"
msgstr ""

#: ../../../components/uid.rst:77
msgid "Use these methods to transform the UUID object into different bases::"
msgstr ""

#: ../../../components/uid.rst:87
msgid "Working with UUIDs"
msgstr ""

#: ../../../components/uid.rst:89
msgid ""
"UUID objects created with the ``Uuid`` class can use the following "
"methods (which are equivalent to the ``uuid_*()`` method of the PHP "
"extension)::"
msgstr ""

#: ../../../components/uid.rst:121
msgid "ULIDs"
msgstr ""

#: ../../../components/uid.rst:123
msgid ""
"`ULIDs`_ (*Universally Unique Lexicographically Sortable Identifier*) are"
" 128-bit numbers usually represented as a 26-character string: "
"``TTTTTTTTTTRRRRRRRRRRRRRRRR`` (where ``T`` represents a timestamp and "
"``R`` represents the random bits)."
msgstr ""

#: ../../../components/uid.rst:127
msgid ""
"ULIDs are an alternative to UUIDs when using those is impractical. They "
"provide 128-bit compatibility with UUID, they are lexicographically "
"sortable and they are encoded as 26-character strings (vs 36-character "
"UUIDs)."
msgstr ""

#: ../../../components/uid.rst:132
msgid "Generating ULIDs"
msgstr ""

#: ../../../components/uid.rst:134
msgid "Instantiate the ``Ulid`` class to generate a random ULID value::"
msgstr ""

#: ../../../components/uid.rst:140
msgid ""
"If your ULID is generated by another system, use the ``fromString()`` "
"method to create an object and make use of the utilities available for "
"Symfony ULIDs::"
msgstr ""

#: ../../../components/uid.rst:147
msgid ""
"If your ULIDs are generated in binary format, use the ``fromBinary()`` "
"method to create the objects for them::"
msgstr ""

#: ../../../components/uid.rst:153
msgid "Converting ULIDs"
msgstr ""

#: ../../../components/uid.rst:155
msgid "Use these methods to transform the ULID object into different bases::"
msgstr ""

#: ../../../components/uid.rst:165
msgid "Working with ULIDs"
msgstr ""

#: ../../../components/uid.rst:167
msgid ""
"ULID objects created with the ``Ulid`` class can use the following "
"methods::"
msgstr ""

