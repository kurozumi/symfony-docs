# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the Symfony Framework
# Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Symfony Framework Documentation \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-08 14:21+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../../security/csrf.rst:5
msgid "How to Implement CSRF Protection"
msgstr ""

#: ../../../security/csrf.rst:7
msgid ""
"CSRF - or `Cross-site request forgery`_ - is a method by which a "
"malicious user attempts to make your legitimate users unknowingly submit "
"data that they don't intend to submit."
msgstr ""

#: ../../../security/csrf.rst:11
msgid ""
"CSRF protection works by adding a hidden field to your form that contains"
" a value that only you and your user know. This ensures that the user - "
"not some other entity - is submitting the given data."
msgstr ""

#: ../../../security/csrf.rst:15
msgid "Before using the CSRF protection, install it in your project:"
msgstr ""

#: ../../../security/csrf.rst:21
msgid ""
"Then, enable/disable the CSRF protection with the ``csrf_protection`` "
"option (see the :ref:`CSRF configuration reference <reference-framework-"
"csrf-protection>` for more information):"
msgstr ""

#: ../../../security/csrf.rst:58
msgid ""
"The tokens used for CSRF protection are meant to be different for every "
"user and they are stored in the session. That's why a session is started "
"automatically as soon as you render a form with CSRF protection."
msgstr ""

#: ../../../security/csrf.rst:64
msgid ""
"Moreover, this means that you cannot fully cache pages that include CSRF "
"protected forms. As an alternative, you can:"
msgstr ""

#: ../../../security/csrf.rst:67
msgid ""
"Embed the form inside an uncached :doc:`ESI fragment </http_cache/esi>` "
"and cache the rest of the page contents;"
msgstr ""

#: ../../../security/csrf.rst:69
msgid "Cache the entire page and load the form via an uncached AJAX request;"
msgstr ""

#: ../../../security/csrf.rst:70
msgid ""
"Cache the entire page and use :doc:`hinclude.js </templating/hinclude>` "
"to load just the CSRF token with an uncached AJAX request and replace the"
" form field value with it."
msgstr ""

#: ../../../security/csrf.rst:75
msgid "CSRF Protection in Symfony Forms"
msgstr ""

#: ../../../security/csrf.rst:77
msgid ""
"Forms created with the Symfony Form component include CSRF tokens by "
"default and Symfony checks them automatically, so you don't have to do "
"anything to be protected against CSRF attacks."
msgstr ""

#: ../../../security/csrf.rst:83
msgid ""
"By default Symfony adds the CSRF token in a hidden field called "
"``_token``, but this can be customized on a form-by-form basis::"
msgstr ""

#: ../../../security/csrf.rst:111
#, python-format
msgid ""
"You can also customize the rendering of the CSRF form field creating a "
"custom :doc:`form theme </form/form_themes>` and using ``csrf_token`` as "
"the prefix of the field (e.g. define ``{% block csrf_token_widget %} ... "
"{% endblock %}`` to customize the entire form field contents)."
msgstr ""

#: ../../../security/csrf.rst:117
msgid "CSRF Protection in Login Forms"
msgstr ""

#: ../../../security/csrf.rst:119
msgid ""
"See :doc:`/security/form_login_setup` for a login form that is protected "
"from CSRF attacks. You can also configure the :ref:`CSRF protection for "
"the logout action <reference-security-logout-csrf>`."
msgstr ""

#: ../../../security/csrf.rst:126
msgid "Generating and Checking CSRF Tokens Manually"
msgstr ""

#: ../../../security/csrf.rst:128
msgid ""
"Although Symfony Forms provide automatic CSRF protection by default, you "
"may need to generate and check CSRF tokens manually for example when "
"using regular HTML forms not managed by the Symfony Form component."
msgstr ""

#: ../../../security/csrf.rst:132
msgid ""
"Consider a simple HTML form created to allow deleting items. First, use "
"the :ref:`csrf_token() Twig function <reference-twig-function-csrf-"
"token>` to generate a CSRF token in the template and store it as a hidden"
" form field:"
msgstr ""

#: ../../../security/csrf.rst:145
msgid ""
"Then, get the value of the CSRF token in the controller action and use "
"the "
":method:`Symfony\\\\Bundle\\\\FrameworkBundle\\\\Controller\\\\AbstractController::isCsrfTokenValid`"
" to check its validity::"
msgstr ""

