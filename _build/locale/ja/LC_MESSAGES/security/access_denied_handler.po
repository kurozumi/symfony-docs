# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the Symfony Framework
# Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Symfony Framework Documentation \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-08 14:21+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../../security/access_denied_handler.rst:5
msgid "How to Create a Custom Access Denied Handler"
msgstr ""

#: ../../../security/access_denied_handler.rst:7
msgid ""
"When your application throws an ``AccessDeniedException``, you can handle"
" this exception with a service to return a custom response."
msgstr ""

#: ../../../security/access_denied_handler.rst:10
msgid ""
"First, create a class that implements "
":class:`Symfony\\\\Component\\\\Security\\\\Http\\\\Authorization\\\\AccessDeniedHandlerInterface`."
" This interface defines one method called ``handle()`` where you can "
"implement whatever logic that should execute when access is denied for "
"the current user (e.g. send a mail, log a message, or generally return a "
"custom response)::"
msgstr ""

#: ../../../security/access_denied_handler.rst:33
msgid ""
"If you're using the :ref:`default services.yaml configuration <service-"
"container-services-load-example>`, you're done! Symfony will "
"automatically know about your new service. You can then configure it "
"under your firewall:"
msgstr ""

#: ../../../security/access_denied_handler.rst:72
msgid ""
"That's it! Any ``AccessDeniedException`` thrown by code under the "
"``main`` firewall will now be handled by your service."
msgstr ""

