# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the Symfony Framework
# Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Symfony Framework Documentation \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-08 14:21+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../../security/user_provider.rst:2
msgid "Security User Providers"
msgstr ""

#: ../../../security/user_provider.rst:4
msgid ""
"User providers are PHP classes related to Symfony Security that have two "
"jobs:"
msgstr ""

#: ../../../security/user_provider.rst:11
msgid "**Reload the User from the Session**"
msgstr ""

#: ../../../security/user_provider.rst:7
msgid ""
"At the beginning of each request (unless your firewall is ``stateless``),"
" Symfony loads the ``User`` object from the session. To make sure it's "
"not out-of-date, the user provider \"refreshes it\". The Doctrine user "
"provider, for example, queries the database for fresh data. Symfony then "
"checks to see if the user has \"changed\" and de-authenticates the user "
"if they have (see :ref:`user_session_refresh`)."
msgstr ""

#: ../../../security/user_provider.rst:17
msgid "**Load the User for some Feature**"
msgstr ""

#: ../../../security/user_provider.rst:14
msgid ""
"Some features, like :doc:`user impersonation "
"</security/impersonating_user>`, :doc:`Remember Me "
"</security/remember_me>` and many of the built-in :doc:`authentication "
"providers </security/auth_providers>`, use the user provider to load a "
"User object via its \"username\" (or email, or whatever field you want)."
msgstr ""

#: ../../../security/user_provider.rst:19
msgid "Symfony comes with several built-in user providers:"
msgstr ""

#: ../../../security/user_provider.rst:21
msgid ""
":ref:`Entity User Provider <security-entity-user-provider>` (loads users "
"from a database);"
msgstr ""

#: ../../../security/user_provider.rst:23
msgid ""
":ref:`LDAP User Provider <security-ldap-user-provider>` (loads users from"
" a LDAP server);"
msgstr ""

#: ../../../security/user_provider.rst:25
msgid ""
":ref:`Memory User Provider <security-memory-user-provider>` (loads users "
"from a configuration file);"
msgstr ""

#: ../../../security/user_provider.rst:27
msgid ""
":ref:`Chain User Provider <security-chain-user-provider>` (merges two or "
"more user providers into a new user provider)."
msgstr ""

#: ../../../security/user_provider.rst:30
msgid ""
"The built-in user providers cover all the needs for most applications, "
"but you can also create your own :ref:`custom user provider <custom-user-"
"provider>`."
msgstr ""

#: ../../../security/user_provider.rst:36
msgid "Entity User Provider"
msgstr ""

#: ../../../security/user_provider.rst:38
msgid ""
"This is the most common user provider for traditional web applications. "
"Users are stored in a database and the user provider uses :doc:`Doctrine "
"</doctrine>` to retrieve them:"
msgstr ""

#: ../../../security/user_provider.rst:111
msgid ""
"The ``providers`` section creates a \"user provider\" called ``users`` "
"that knows how to query from your ``App\\Entity\\User`` entity by the "
"``username`` property. You can choose any name for the user provider, but"
" it's recommended to pick a descriptive name because this will be later "
"used in the firewall configuration."
msgstr ""

#: ../../../security/user_provider.rst:119
msgid "Using a Custom Query to Load the User"
msgstr ""

#: ../../../security/user_provider.rst:121
msgid ""
"The ``entity`` provider can only query from one *specific* field, "
"specified by the ``property`` config key. If you want a bit more control "
"over this - e.g. you want to find a user by ``email`` *or* ``username``, "
"you can do that by making your ``UserRepository`` implement the "
":class:`Symfony\\\\Bridge\\\\Doctrine\\\\Security\\\\User\\\\UserLoaderInterface`."
" This interface only requires one method: "
"``loadUserByUsername($username)``::"
msgstr ""

#: ../../../security/user_provider.rst:152
msgid ""
"To finish this, remove the ``property`` key from the user provider in "
"``security.yaml``:"
msgstr ""

#: ../../../security/user_provider.rst:206
msgid ""
"This tells Symfony to *not* query automatically for the User. Instead, "
"when needed (e.g. because :doc:`user impersonation "
"</security/impersonating_user>`, :doc:`Remember Me "
"</security/remember_me>`, or some other security feature is activated), "
"the ``loadUserByUsername()`` method on ``UserRepository`` will be called."
msgstr ""

#: ../../../security/user_provider.rst:214
msgid "Memory User Provider"
msgstr ""

#: ../../../security/user_provider.rst:216
msgid ""
"It's not recommended to use this provider in real applications because of"
" its limitations and how difficult it is to manage users. It may be "
"useful in application prototypes and for limited applications that don't "
"store users in databases."
msgstr ""

#: ../../../security/user_provider.rst:220
msgid ""
"This user provider stores all user information in a configuration file, "
"including their passwords. That's why the first step is to configure how "
"these users will encode their passwords:"
msgstr ""

#: ../../../security/user_provider.rst:273
msgid "Then, run this command to encode the plain text passwords of your users:"
msgstr ""

#: ../../../security/user_provider.rst:279
msgid ""
"Now you can configure all the user information in "
"``config/packages/security.yaml``:"
msgstr ""

#: ../../../security/user_provider.rst:295
msgid ""
"When using a ``memory`` provider, and not the ``auto`` algorithm, you "
"have to choose an encoding without salt (i.e. ``bcrypt``)."
msgstr ""

#: ../../../security/user_provider.rst:301
msgid "LDAP User Provider"
msgstr ""

#: ../../../security/user_provider.rst:303
msgid ""
"This user provider requires installing certain dependencies and using "
"some special authentication providers, so it's explained in a separate "
"article: :doc:`/security/ldap`."
msgstr ""

#: ../../../security/user_provider.rst:310
msgid "Chain User Provider"
msgstr ""

#: ../../../security/user_provider.rst:312
msgid ""
"This user provider combines two or more of the other provider types "
"(``entity``, ``memory`` and ``ldap``) to create a new user provider. The "
"order in which providers are configured is important because Symfony will"
" look for users starting from the first provider and will keep looking "
"for in the other providers until the user is found:"
msgstr ""

#: ../../../security/user_provider.rst:343
msgid "Creating a Custom User Provider"
msgstr ""

#: ../../../security/user_provider.rst:345
msgid ""
"Most applications don't need to create a custom provider. If you store "
"users in a database, a LDAP server or a configuration file, Symfony "
"supports that. However, if you're loading users from a custom location "
"(e.g. via an API or legacy database connection), you'll need to create a "
"custom user provider."
msgstr ""

#: ../../../security/user_provider.rst:350
msgid ""
"First, make sure you've followed the :doc:`Security Guide </security>` to"
" create your ``User`` class."
msgstr ""

#: ../../../security/user_provider.rst:353
msgid ""
"If you used the ``make:user`` command to create your ``User`` class (and "
"you answered the questions indicating that you need a custom user "
"provider), that command will generate a nice skeleton to get you "
"started::"
msgstr ""

#: ../../../security/user_provider.rst:420
msgid ""
"Most of the work is already done! Read the comments in the code and "
"update the TODO sections to finish the user provider. When you're done, "
"tell Symfony about the user provider by adding it in ``security.yaml``:"
msgstr ""

#: ../../../security/user_provider.rst:433
msgid ""
"Lastly, update the ``config/packages/security.yaml`` file to set the "
"``provider`` key to ``your_custom_user_provider`` in all the firewalls "
"which will use this custom user provider."
msgstr ""

#: ../../../security/user_provider.rst:440
msgid "Understanding how Users are Refreshed from the Session"
msgstr ""

#: ../../../security/user_provider.rst:442
msgid ""
"At the end of every request (unless your firewall is ``stateless``), your"
" ``User`` object is serialized to the session. At the beginning of the "
"next request, it's deserialized and then passed to your user provider to "
"\"refresh\" it (e.g. Doctrine queries for a fresh user)."
msgstr ""

#: ../../../security/user_provider.rst:447
msgid ""
"Then, the two User objects (the original from the session and the "
"refreshed User object) are \"compared\" to see if they are \"equal\". By "
"default, the core ``AbstractToken`` class compares the return values of "
"the ``getPassword()``, ``getSalt()`` and ``getUsername()`` methods. If "
"any of these are different, your user will be logged out. This is a "
"security measure to make sure that malicious users can be de-"
"authenticated if core user data changes."
msgstr ""

#: ../../../security/user_provider.rst:454
msgid ""
"However, in some cases, this process can cause unexpected authentication "
"problems. If you're having problems authenticating, it could be that you "
"*are* authenticating successfully, but you immediately lose "
"authentication after the first redirect."
msgstr ""

#: ../../../security/user_provider.rst:458
msgid ""
"In that case, review the serialization logic (e.g. "
"``SerializableInterface``) if you have any, to make sure that all the "
"fields necessary are serialized."
msgstr ""

#: ../../../security/user_provider.rst:462
msgid "Comparing Users Manually with EquatableInterface"
msgstr ""

#: ../../../security/user_provider.rst:464
msgid ""
"Or, if you need more control over the \"compare users\" process, make "
"your User class implement "
":class:`Symfony\\\\Component\\\\Security\\\\Core\\\\User\\\\EquatableInterface`."
" Then, your ``isEqualTo()`` method will be called when comparing users."
msgstr ""

#: ../../../security/user_provider.rst:469
msgid "Injecting a User Provider in your Services"
msgstr ""

#: ../../../security/user_provider.rst:471
msgid "Symfony defines several services related to user providers:"
msgstr ""

#: ../../../security/user_provider.rst:483
msgid ""
"Most of these services are abstract and cannot be injected in your "
"services. Instead, you must inject the normal service that Symfony "
"creates for each of your user providers. The names of these services "
"follow this pattern: ``security.user.provider.concrete.<your-provider-"
"name>``."
msgstr ""

#: ../../../security/user_provider.rst:488
msgid ""
"For example, if you are :doc:`building a form login "
"</security/form_login_setup>` and want to inject in your "
"``LoginFormAuthenticator`` a user provider of type ``memory`` and called"
"  ``backend_users``, do the following::"
msgstr ""

#: ../../../security/user_provider.rst:511
msgid ""
"Then, inject the concrete service created by Symfony for the "
"``backend_users`` user provider:"
msgstr ""

