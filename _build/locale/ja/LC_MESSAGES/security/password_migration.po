# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the Symfony Framework
# Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Symfony Framework Documentation \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-08 14:21+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../../security/password_migration.rst:5
msgid "How to Migrate a Password Hash"
msgstr ""

#: ../../../security/password_migration.rst:7
msgid ""
"In order to protect passwords, it is recommended to store them using the "
"latest hash algorithms. This means that if a better hash algorithm is "
"supported on your system, the user's password should be *rehashed* using "
"the newer algorithm and stored. That's possible with the ``migrate_from``"
" option:"
msgstr ""

#: ../../../security/password_migration.rst:12
msgid "`Configure a new Encoder Using \"migrate_from\"`_"
msgstr ""

#: ../../../security/password_migration.rst:13
msgid "`Upgrade the Password`_"
msgstr ""

#: ../../../security/password_migration.rst:14
msgid "Optionally, `Trigger Password Migration From a Custom Encoder`_"
msgstr ""

#: ../../../security/password_migration.rst:17
msgid "Configure a new Encoder Using \"migrate_from\""
msgstr ""

#: ../../../security/password_migration.rst:19
msgid ""
"When a better hashing algorithm becomes available, you should keep the "
"existing encoder(s), rename it, and then define the new one. Set the "
"``migrate_from`` option on the new encoder to point to the old, legacy "
"encoder(s):"
msgstr ""

#: ../../../security/password_migration.rst:103
msgid "With this setup:"
msgstr ""

#: ../../../security/password_migration.rst:105
msgid "New users will be encoded with the new algorithm;"
msgstr ""

#: ../../../security/password_migration.rst:106
msgid ""
"Whenever a user logs in whose password is still stored using the old "
"algorithm, Symfony will verify the password with the old algorithm and "
"then rehash and update the password using the new algorithm."
msgstr ""

#: ../../../security/password_migration.rst:112
msgid ""
"The *auto*, *native*, *bcrypt* and *argon* encoders automatically enable "
"password migration using the following list of ``migrate_from`` "
"algorithms:"
msgstr ""

#: ../../../security/password_migration.rst:115
msgid ""
":ref:`PBKDF2 <reference-security-pbkdf2>` (which uses "
":phpfunction:`hash_pbkdf2`);"
msgstr ""

#: ../../../security/password_migration.rst:116
msgid "Message digest (which uses :phpfunction:`hash`)"
msgstr ""

#: ../../../security/password_migration.rst:118
msgid ""
"Both use the ``hash_algorithm`` setting as the algorithm. It is "
"recommended to use ``migrate_from`` instead of ``hash_algorithm``, unless"
" the *auto* encoder is used."
msgstr ""

#: ../../../security/password_migration.rst:123
msgid "Upgrade the Password"
msgstr ""

#: ../../../security/password_migration.rst:125
msgid ""
"Upon successful login, the Security system checks whether a better "
"algorithm is available to hash the user's password. If it is, it'll hash "
"the correct password using the new hash. If you use a Guard "
"authenticator, you first need to :ref:`provide the original password to "
"the Security system <provide-the-password-guard>`."
msgstr ""

#: ../../../security/password_migration.rst:130
msgid ""
"You can enable the upgrade behavior by implementing how this newly hashed"
" password should be stored:"
msgstr ""

#: ../../../security/password_migration.rst:133
msgid ""
":ref:`When using Doctrine's entity user provider <upgrade-the-password-"
"doctrine>`"
msgstr ""

#: ../../../security/password_migration.rst:134
msgid ""
":ref:`When using a custom user provider <upgrade-the-password-custom-"
"provider>`"
msgstr ""

#: ../../../security/password_migration.rst:136
msgid ""
"After this, you're done and passwords are always hashed as secure as "
"possible!"
msgstr ""

#: ../../../security/password_migration.rst:141
msgid "Provide the Password when using Guard"
msgstr ""

#: ../../../security/password_migration.rst:143
msgid ""
"When you're using a custom :doc:`guard authenticator "
"</security/guard_authentication>`, you need to implement "
":class:`Symfony\\\\Component\\\\Security\\\\Guard\\\\PasswordAuthenticatedInterface`."
" This interface defines a ``getPassword()`` method that returns the "
"password for this login request. This password is used in the migration "
"process::"
msgstr ""

#: ../../../security/password_migration.rst:167
msgid "Upgrade the Password when using Doctrine"
msgstr ""

#: ../../../security/password_migration.rst:169
msgid ""
"When using the :ref:`entity user provider <security-entity-user-"
"provider>`, implement "
":class:`Symfony\\\\Component\\\\Security\\\\Core\\\\User\\\\PasswordUpgraderInterface`"
" in the ``UserRepository`` (see `the Doctrine docs for information`_ on "
"how to create this class if it's not already created). This interface "
"implements storing the newly created password hash::"
msgstr ""

#: ../../../security/password_migration.rst:198
msgid "Upgrade the Password when using a Custom User Provider"
msgstr ""

#: ../../../security/password_migration.rst:200
msgid ""
"If you're using a :ref:`custom user provider <custom-user-provider>`, "
"implement the "
":class:`Symfony\\\\Component\\\\Security\\\\Core\\\\User\\\\PasswordUpgraderInterface`"
" in the user provider::"
msgstr ""

#: ../../../security/password_migration.rst:224
msgid "Trigger Password Migration From a Custom Encoder"
msgstr ""

#: ../../../security/password_migration.rst:226
msgid ""
"If you're using a custom password encoder, you can trigger the password "
"migration by returning ``true`` in the ``needsRehash()`` method::"
msgstr ""

