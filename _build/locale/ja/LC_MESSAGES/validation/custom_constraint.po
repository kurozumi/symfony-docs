# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the Symfony Framework
# Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Symfony Framework Documentation \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-08 14:21+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../../validation/custom_constraint.rst:5
msgid "How to Create a custom Validation Constraint"
msgstr ""

#: ../../../validation/custom_constraint.rst:7
msgid ""
"You can create a custom constraint by extending the base constraint "
"class, :class:`Symfony\\\\Component\\\\Validator\\\\Constraint`. As an "
"example you're going to create a simple validator that checks if a string"
" contains only alphanumeric characters."
msgstr ""

#: ../../../validation/custom_constraint.rst:13
msgid "Creating the Constraint Class"
msgstr ""

#: ../../../validation/custom_constraint.rst:15
msgid ""
"First you need to create a Constraint class and extend "
":class:`Symfony\\\\Component\\\\Validator\\\\Constraint`::"
msgstr ""

#: ../../../validation/custom_constraint.rst:32
msgid ""
"The ``@Annotation`` annotation is necessary for this new constraint in "
"order to make it available for use in classes via annotations. Options "
"for your constraint are represented as public properties on the "
"constraint class."
msgstr ""

#: ../../../validation/custom_constraint.rst:38
msgid "Creating the Validator itself"
msgstr ""

#: ../../../validation/custom_constraint.rst:40
msgid ""
"As you can see, a constraint class is fairly minimal. The actual "
"validation is performed by another \"constraint validator\" class. The "
"constraint validator class is specified by the constraint's "
"``validatedBy()`` method, which includes some simple default logic::"
msgstr ""

#: ../../../validation/custom_constraint.rst:51
msgid ""
"In other words, if you create a custom ``Constraint`` (e.g. "
"``MyConstraint``), Symfony will automatically look for another class, "
"``MyConstraintValidator`` when actually performing the validation."
msgstr ""

#: ../../../validation/custom_constraint.rst:55
msgid ""
"The validator class is also simple, and only has one required method "
"``validate()``::"
msgstr ""

#: ../../../validation/custom_constraint.rst:96
msgid ""
"Inside ``validate``, you don't need to return a value. Instead, you add "
"violations to the validator's ``context`` property and a value will be "
"considered valid if it causes no violations. The ``buildViolation()`` "
"method takes the error message as its argument and returns an instance of"
" "
":class:`Symfony\\\\Component\\\\Validator\\\\Violation\\\\ConstraintViolationBuilderInterface`."
" The ``addViolation()`` method call finally adds the violation to the "
"context."
msgstr ""

#: ../../../validation/custom_constraint.rst:104
msgid "Using the new Validator"
msgstr ""

#: ../../../validation/custom_constraint.rst:106
msgid "You can use custom validators just as the ones provided by Symfony itself:"
msgstr ""

#: ../../../validation/custom_constraint.rst:172
msgid ""
"If your constraint contains options, then they should be public "
"properties on the custom Constraint class you created earlier. These "
"options can be configured like options on core Symfony constraints."
msgstr ""

#: ../../../validation/custom_constraint.rst:177
msgid "Constraint Validators with Dependencies"
msgstr ""

#: ../../../validation/custom_constraint.rst:179
msgid ""
"If you're using the :ref:`default services.yaml configuration <service-"
"container-services-load-example>`, then your validator is already "
"registered as a service and :doc:`tagged </service_container/tags>` with "
"the necessary ``validator.constraint_validator``. This means you can "
":ref:`inject services or configuration <services-constructor-injection>` "
"like any other service."
msgstr ""

#: ../../../validation/custom_constraint.rst:185
msgid "Create a Reusable Set of Constraints"
msgstr ""

#: ../../../validation/custom_constraint.rst:187
msgid ""
"In case you need to apply some common set of constraints in different "
"places consistently across your application, you can extend the "
":doc:`Compound constraint</reference/constraints/Compound>`."
msgstr ""

#: ../../../validation/custom_constraint.rst:192
msgid "The ``Compound`` constraint was introduced in Symfony 5.1."
msgstr ""

#: ../../../validation/custom_constraint.rst:195
msgid "Class Constraint Validator"
msgstr ""

#: ../../../validation/custom_constraint.rst:197
msgid ""
"Besides validating a single property, a constraint can have an entire "
"class as its scope. You only need to add this to the ``Constraint`` "
"class::"
msgstr ""

#: ../../../validation/custom_constraint.rst:205
msgid ""
"With this, the validator's ``validate()`` method gets an object as its "
"first argument::"
msgstr ""

#: ../../../validation/custom_constraint.rst:221
msgid ""
"The ``atPath()`` method defines the property which the validation error "
"is associated to. Use any :doc:`valid PropertyAccess syntax "
"</components/property_access>` to define that property."
msgstr ""

#: ../../../validation/custom_constraint.rst:225
msgid ""
"A class constraint validator is applied to the class itself, and not to "
"the property:"
msgstr ""

