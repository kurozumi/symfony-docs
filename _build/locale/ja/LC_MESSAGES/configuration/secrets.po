# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the Symfony Framework
# Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Symfony Framework Documentation \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-08 14:21+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../../configuration/secrets.rst:5
msgid "How to Keep Sensitive Information Secret"
msgstr ""

#: ../../../configuration/secrets.rst:7
msgid ""
":ref:`Environment variables <config-env-vars>` are the best way to store "
"configuration that depends on where the application is run - for example,"
" some API key that might be set to one value while developing locally and"
" another value on production."
msgstr ""

#: ../../../configuration/secrets.rst:11
msgid ""
"When these values are *sensitive* and need to be kept private, you can "
"safely store them by using Symfony's secrets management system - "
"sometimes called a \"vault\"."
msgstr ""

#: ../../../configuration/secrets.rst:17
msgid ""
"The Secrets system requires the sodium PHP extension that is bundled with"
" PHP 7.2. If you're using an earlier PHP version, you can install the "
"`libsodium`_ PHP extension or use the `paragonie/sodium_compat`_ package."
msgstr ""

#: ../../../configuration/secrets.rst:25
msgid "Generate Cryptographic Keys"
msgstr ""

#: ../../../configuration/secrets.rst:27
msgid ""
"In order to encrypt and decrypt **secrets**, Symfony needs "
"**cryptographic keys**. A pair of keys can be generated by running:"
msgstr ""

#: ../../../configuration/secrets.rst:34
msgid ""
"This will generate a pair of asymmetric **cryptographic keys**. Each "
":ref:`environment <configuration-environments>` has its own set of keys. "
"Assuming you're coding locally in the ``dev`` environment, this will "
"create:"
msgstr ""

#: ../../../configuration/secrets.rst:39
msgid "``config/secrets/dev/dev.encrypt.public.php``"
msgstr ""

#: ../../../configuration/secrets.rst:39
msgid "Used to encrypt/add secrets to the vault. Can be safely committed."
msgstr ""

#: ../../../configuration/secrets.rst:44
msgid "``config/secrets/dev/dev.decrypt.private.php``"
msgstr ""

#: ../../../configuration/secrets.rst:42
msgid ""
"Used to decrypt/read secrets from the vault. The ``dev`` decryption key "
"can be committed (assuming no highly-sensitive secrets are stored in the "
"dev vault) but the ``prod`` decryption key should *never* be committed."
msgstr ""

#: ../../../configuration/secrets.rst:46
msgid ""
"You can generate a pair of cryptographic keys for the ``prod`` "
"environment by running:"
msgstr ""

#: ../../../configuration/secrets.rst:53
msgid ""
"This will generate ``config/secrets/prod/prod.encrypt.public.php`` and "
"``config/secrets/prod/prod.decrypt.private.php``."
msgstr ""

#: ../../../configuration/secrets.rst:58
msgid ""
"The ``prod.decrypt.private.php`` file is highly sensitive. Your team of "
"developers and even Continuous Integration services don't need that key. "
"If the **decryption key** has been exposed (ex-employee leaving for "
"instance), you should consider generating a new one by running: ``secrets"
":generate-keys --rotate``."
msgstr ""

#: ../../../configuration/secrets.rst:67
msgid "Create or Update Secrets"
msgstr ""

#: ../../../configuration/secrets.rst:69
msgid ""
"Suppose you want to store your database password a secret. By using the "
"``secrets:set`` command, you should add this secret to both the ``dev`` "
"*and* ``prod`` vaults:"
msgstr ""

#: ../../../configuration/secrets.rst:83
msgid ""
"This will create a new file for the secret in ``config/secrets/dev`` and "
"another in ``config/secrets/prod``. You can also set the secret in a few "
"other ways:"
msgstr ""

#: ../../../configuration/secrets.rst:98
msgid "Referencing Secrets in Configuration Files"
msgstr ""

#: ../../../configuration/secrets.rst:100
msgid ""
"Secret values can be referenced in the same way as :ref:`environment "
"variables<config-env-vars>`. Be careful that you don't accidentally "
"define a secret *and* an environment variable with the same name: "
"**environment variables override secrets**."
msgstr ""

#: ../../../configuration/secrets.rst:105
msgid "If you stored a ``DATABASE_PASSWORD`` secret, you can reference by:"
msgstr ""

#: ../../../configuration/secrets.rst:147
msgid ""
"The actual value will be resolved at runtime: container compilation and "
"cache warmup don't need the **decryption key**."
msgstr ""

#: ../../../configuration/secrets.rst:151
msgid "List Existing Secrets"
msgstr ""

#: ../../../configuration/secrets.rst:153
msgid ""
"Everybody is allowed to list the secrets names with the command "
"``secrets:list``. If you have the **decryption key** you can also reveal "
"the secrets' values by passing the ``--reveal`` option:"
msgstr ""

#: ../../../configuration/secrets.rst:168
msgid "Remove Secrets"
msgstr ""

#: ../../../configuration/secrets.rst:170
msgid "Symfony provides a convenient command to remove a Secret:"
msgstr ""

#: ../../../configuration/secrets.rst:177
msgid "Local secrets: Overriding Secrets Locally"
msgstr ""

#: ../../../configuration/secrets.rst:179
msgid ""
"The ``dev`` environment secrets should contain nice default values for "
"development. But sometimes a developer *still* needs to override a secret"
" value locally when developing."
msgstr ""

#: ../../../configuration/secrets.rst:183
msgid ""
"Most of the ``secrets`` commands - including ``secrets:set`` - have a "
"``--local`` option that stores the \"secret\" in the ``.env.{env}.local``"
" file as a standard environment variable. To override the "
"``DATABASE_PASSWORD`` secret locally, run:"
msgstr ""

#: ../../../configuration/secrets.rst:191
msgid ""
"If you entered ``root``, you will now see this in your ``.env.dev.local``"
" file:"
msgstr ""

#: ../../../configuration/secrets.rst:197
msgid ""
"This will *override* the ``DATABASE_PASSWORD`` secret because environment"
" variables always take precedence over secrets."
msgstr ""

#: ../../../configuration/secrets.rst:200
msgid "Listing the secrets will now also display the local variable:"
msgstr ""

#: ../../../configuration/secrets.rst:211
msgid ""
"Symfony also provides the ``secrets:decrypt-to-local`` command to "
"decrypts all secrets and stores them in the local vault and ``secrets"
":encrypt-from-local`` to encrypt all local secrets to the vault."
msgstr ""

#: ../../../configuration/secrets.rst:216
msgid "Secrets in the test Environment"
msgstr ""

#: ../../../configuration/secrets.rst:218
msgid ""
"If you add a secret in the ``dev`` and ``prod`` environments, it will be "
"missing from the ``test`` environment. You *could* create a \"vault\" for"
" the ``test`` environment and define the secrets there. But an easier way"
" is to set the test values via the ``.env.test`` file:"
msgstr ""

#: ../../../configuration/secrets.rst:229
msgid "Deploy Secrets to Production"
msgstr ""

#: ../../../configuration/secrets.rst:231
msgid ""
"Due to the fact that decryption keys should never be committed, you will "
"need to manually store this file somewhere and deploy it. There are 2 "
"ways to do that:"
msgstr ""

#: ../../../configuration/secrets.rst:234
msgid "Uploading the file:"
msgstr ""

#: ../../../configuration/secrets.rst:236
msgid ""
"The first option is to copy the **decryption key** - "
"``/config/secrets/prod/prod.decrypt.private.php`` to your server(s)."
msgstr ""

#: ../../../configuration/secrets.rst:239
msgid "Using an Environment Variable"
msgstr ""

#: ../../../configuration/secrets.rst:241
msgid ""
"The second way is to set the ``SYMFONY_DECRYPTION_SECRET`` environment "
"variable to the base64 encoded value of the **decryption key**. A fancy "
"way to fetch the value of the key is:"
msgstr ""

#: ../../../configuration/secrets.rst:249
msgid ""
"To improve performance (i.e. avoid decrypting secrets at runtime), you "
"can decrypt your secrets during deployment to the \"local\" vault:"
msgstr ""

#: ../../../configuration/secrets.rst:256
msgid ""
"This will put all the decrypted secrets into ``.env.prod.local``. After "
"doing this, the decryption key does *not* need to remain on the server."
msgstr ""

#: ../../../configuration/secrets.rst:260
msgid "Rotating Secrets"
msgstr ""

#: ../../../configuration/secrets.rst:262
msgid ""
"The ``secrets:generate-keys`` command provides a ``--rotate`` option to "
"regenerate the **cryptographic keys**. Symfony will decrypt existing "
"secrets with the old key, generate new **cryptographic keys** and re-"
"encrypt secrets with the new key. In order to decrypt previous secrets, "
"the developer must have the **decryption key**."
msgstr ""

#: ../../../configuration/secrets.rst:269
msgid "Configuration"
msgstr ""

#: ../../../configuration/secrets.rst:271
msgid ""
"The secrets system is enabled by default and some of its behavior can be "
"configured:"
msgstr ""

