# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the Symfony Framework
# Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Symfony Framework Documentation \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-08 14:21+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../../configuration/front_controllers_and_kernel.rst:6
msgid ""
"Understanding how the Front Controller, Kernel and Environments Work "
"together"
msgstr ""

#: ../../../configuration/front_controllers_and_kernel.rst:8
msgid ""
"The :ref:`configuration environments <configuration-environments>` "
"section explained the basics on how Symfony uses environments to run your"
" application with different configuration settings. This section will "
"explain a bit more in-depth what happens when your application is "
"bootstrapped. To hook into this process, you need to understand three "
"parts that work together:"
msgstr ""

#: ../../../configuration/front_controllers_and_kernel.rst:14
msgid "`The Front Controller`_"
msgstr ""

#: ../../../configuration/front_controllers_and_kernel.rst:15
msgid "`The Kernel Class`_"
msgstr ""

#: ../../../configuration/front_controllers_and_kernel.rst:16
msgid "`The Environments`_"
msgstr ""

#: ../../../configuration/front_controllers_and_kernel.rst:20
msgid ""
"Usually, you will not need to define your own front controller or "
"``Kernel`` class as Symfony provides sensible default implementations. "
"This article is provided to explain what is going on behind the scenes."
msgstr ""

#: ../../../configuration/front_controllers_and_kernel.rst:27
msgid "The Front Controller"
msgstr ""

#: ../../../configuration/front_controllers_and_kernel.rst:29
msgid ""
"The `front controller`_ is a design pattern; it is a section of code that"
" *all* requests served by an application run through."
msgstr ""

#: ../../../configuration/front_controllers_and_kernel.rst:32
msgid ""
"In the Symfony Skeleton, this role is taken by the ``index.php`` file in "
"the ``public/`` directory. This is the very first PHP script executed "
"when a request is processed."
msgstr ""

#: ../../../configuration/front_controllers_and_kernel.rst:36
msgid ""
"The main purpose of the front controller is to create an instance of the "
"``Kernel`` (more on that in a second), make it handle the request and "
"return the resulting response to the browser."
msgstr ""

#: ../../../configuration/front_controllers_and_kernel.rst:40
msgid ""
"Because every request is routed through it, the front controller can be "
"used to perform global initialization prior to setting up the kernel or "
"to `decorate`_ the kernel with additional features. Examples include:"
msgstr ""

#: ../../../configuration/front_controllers_and_kernel.rst:44
msgid "Configuring the autoloader or adding additional autoloading mechanisms;"
msgstr ""

#: ../../../configuration/front_controllers_and_kernel.rst:45
msgid ""
"Adding HTTP level caching by wrapping the kernel with an instance of "
":ref:`HttpCache <symfony-gateway-cache>`;"
msgstr ""

#: ../../../configuration/front_controllers_and_kernel.rst:47
msgid "Enabling the `Debug component`_."
msgstr ""

#: ../../../configuration/front_controllers_and_kernel.rst:49
msgid ""
"You can choose the front controller that's used by adding it in the URL, "
"like:"
msgstr ""

#: ../../../configuration/front_controllers_and_kernel.rst:55
msgid ""
"As you can see, this URL contains the PHP script to be used as the front "
"controller. You can use that to switch to a custom made front controller "
"that is located in the ``public/`` directory."
msgstr ""

#: ../../../configuration/front_controllers_and_kernel.rst:61
msgid ""
"You almost never want to show the front controller in the URL. This is "
"achieved by configuring the web server, as shown in "
":doc:`/setup/web_server_configuration`."
msgstr ""

#: ../../../configuration/front_controllers_and_kernel.rst:65
msgid ""
"Technically, the ``bin/console`` script used when running Symfony on the "
"command line is also a front controller, only that is not used for web, "
"but for command line requests."
msgstr ""

#: ../../../configuration/front_controllers_and_kernel.rst:70
msgid "The Kernel Class"
msgstr ""

#: ../../../configuration/front_controllers_and_kernel.rst:72
msgid ""
"The :class:`Symfony\\\\Component\\\\HttpKernel\\\\Kernel` is the core of "
"Symfony. It is responsible for setting up all the bundles used by your "
"application and providing them with the application's configuration. It "
"then creates the service container before serving requests in its "
":method:`Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelInterface::handle`"
" method."
msgstr ""

#: ../../../configuration/front_controllers_and_kernel.rst:79
msgid ""
"The kernel used in Symfony applications extends from "
":class:`Symfony\\\\Component\\\\HttpKernel\\\\Kernel` and uses the "
":class:`Symfony\\\\Bundle\\\\FrameworkBundle\\\\Kernel\\\\MicroKernelTrait`."
" The ``Kernel`` class leaves some methods from "
":class:`Symfony\\\\Component\\\\HttpKernel\\\\KernelInterface` "
"unimplemented and the ``MicroKernelTrait`` defines several abstract "
"methods, so you must implement them all:"
msgstr ""

#: ../../../configuration/front_controllers_and_kernel.rst:86
msgid ":method:`Symfony\\\\Component\\\\HttpKernel\\\\KernelInterface::registerBundles`"
msgstr ""

#: ../../../configuration/front_controllers_and_kernel.rst:86
msgid "It must return an array of all bundles needed to run the application."
msgstr ""

#: ../../../configuration/front_controllers_and_kernel.rst:90
msgid ":method:`Symfony\\\\Bundle\\\\FrameworkBundle\\\\Kernel\\\\MicroKernelTrait::configureRoutes`"
msgstr ""

#: ../../../configuration/front_controllers_and_kernel.rst:89
msgid ""
"It adds individual routes or collections of routes to the application "
"(for example loading the routes defined in some config file)."
msgstr ""

#: ../../../configuration/front_controllers_and_kernel.rst:95
msgid ":method:`Symfony\\\\Bundle\\\\FrameworkBundle\\\\Kernel\\\\MicroKernelTrait::configureContainer`"
msgstr ""

#: ../../../configuration/front_controllers_and_kernel.rst:93
msgid ""
"It loads the application configuration from config files or using the "
"``loadFromExtension()`` method and can also register new container "
"parameters and services."
msgstr ""

#: ../../../configuration/front_controllers_and_kernel.rst:97
msgid ""
"To fill these (small) blanks, your application needs to extend the Kernel"
" class and use the MicroKernelTrait to implement these methods. Symfony "
"provides by default that kernel in the ``src/Kernel.php`` file."
msgstr ""

#: ../../../configuration/front_controllers_and_kernel.rst:101
msgid ""
"This class uses the name of the environment - which is passed to the "
"Kernel's :method:`constructor "
"<Symfony\\\\Component\\\\HttpKernel\\\\Kernel::__construct>` method and "
"is available via "
":method:`Symfony\\\\Component\\\\HttpKernel\\\\Kernel::getEnvironment` - "
"to decide which bundles to enable. The logic for that is in "
"``registerBundles()``."
msgstr ""

#: ../../../configuration/front_controllers_and_kernel.rst:106
msgid ""
"You are free to create your own, alternative or additional ``Kernel`` "
"variants. All you need is to adapt your (or add a new) front controller "
"to make use of the new kernel."
msgstr ""

#: ../../../configuration/front_controllers_and_kernel.rst:112
msgid ""
"The name and location of the ``Kernel`` is not fixed. When putting "
":doc:`multiple kernels into a single application "
"</configuration/multiple_kernels>`, it might therefore make sense to add "
"additional sub-directories, for example ``src/admin/AdminKernel.php`` and"
" ``src/api/ApiKernel.php``. All that matters is that your front "
"controller is able to create an instance of the appropriate kernel."
msgstr ""

#: ../../../configuration/front_controllers_and_kernel.rst:120
msgid ""
"There's a lot more the ``Kernel`` can be used for, for example "
":doc:`overriding the default directory structure "
"</configuration/override_dir_structure>`. But odds are high that you "
"don't need to change things like this on the fly by having several "
"``Kernel`` implementations."
msgstr ""

#: ../../../configuration/front_controllers_and_kernel.rst:131
msgid "Debug Mode"
msgstr ""

#: ../../../configuration/front_controllers_and_kernel.rst:133
msgid ""
"The second argument to the ``Kernel`` constructor specifies if the "
"application should run in \"debug mode\". Regardless of the "
":ref:`configuration environment <configuration-environments>`, a Symfony "
"application can be run with debug mode set to ``true`` or ``false``."
msgstr ""

#: ../../../configuration/front_controllers_and_kernel.rst:138
msgid ""
"This affects many things in the application, such as displaying "
"stacktraces on error pages or if cache files are dynamically rebuilt on "
"each request. Though not a requirement, debug mode is generally set to "
"``true`` for the ``dev`` and ``test`` environments and ``false`` for the "
"``prod`` environment."
msgstr ""

#: ../../../configuration/front_controllers_and_kernel.rst:143
msgid ""
"Similar to :ref:`configuring the environment <selecting-the-active-"
"environment>` you can also enable/disable the debug mode using :ref:`the "
".env file <config-dot-env>`:"
msgstr ""

#: ../../../configuration/front_controllers_and_kernel.rst:152
msgid ""
"This value can be overridden for commands by passing the ``APP_DEBUG`` "
"value before running them:"
msgstr ""

#: ../../../configuration/front_controllers_and_kernel.rst:163
msgid ""
"Internally, the value of the debug mode becomes the ``kernel.debug`` "
"parameter used inside the :doc:`service container </service_container>`. "
"If you look inside the application configuration file, you'll see the "
"parameter used, for example, to turn Twig's debug mode on:"
msgstr ""

#: ../../../configuration/front_controllers_and_kernel.rst:199
msgid "The Environments"
msgstr ""

#: ../../../configuration/front_controllers_and_kernel.rst:201
msgid ""
"As mentioned above, the ``Kernel`` has to implement another method - "
":method:`Symfony\\\\Bundle\\\\FrameworkBundle\\\\Kernel\\\\MicroKernelTrait::configureContainer`."
" This method is responsible for loading the application's configuration "
"from the right *environment*."
msgstr ""

#: ../../../configuration/front_controllers_and_kernel.rst:206
msgid ""
":ref:`Configuration environments <configuration-environments>` allow to "
"execute the same code using different configuration. Symfony provides "
"three environments by default called ``dev``, ``prod`` and ``test``."
msgstr ""

#: ../../../configuration/front_controllers_and_kernel.rst:210
msgid ""
"More technically, these names are nothing more than strings passed from "
"the front controller to the ``Kernel``'s constructor. This name can then "
"be used in the ``configureContainer()`` method to decide which "
"configuration files to load."
msgstr ""

#: ../../../configuration/front_controllers_and_kernel.rst:214
msgid ""
"Symfony's default ``Kernel`` class implements this method by loading "
"first the config files found on ``config/packages/*`` and then, the files"
" found on ``config/packages/ENVIRONMENT_NAME/``. You are free to "
"implement this method differently if you need a more sophisticated way of"
" loading your configuration."
msgstr ""

#: ../../../configuration/front_controllers_and_kernel.rst:223
msgid "Environments and the Cache Directory"
msgstr ""

#: ../../../configuration/front_controllers_and_kernel.rst:225
msgid ""
"Symfony takes advantage of caching in many ways: the application "
"configuration, routing configuration, Twig templates and more are cached "
"to PHP objects stored in files on the filesystem."
msgstr ""

#: ../../../configuration/front_controllers_and_kernel.rst:229
msgid ""
"By default, these cached files are largely stored in the ``var/cache/`` "
"directory. However, each environment caches its own set of files:"
msgstr ""

#: ../../../configuration/front_controllers_and_kernel.rst:241
msgid ""
"Sometimes, when debugging, it may be helpful to inspect a cached file to "
"understand how something is working. When doing so, remember to look in "
"the directory of the environment you're using (most commonly ``dev/`` "
"while developing and debugging). While it can vary, the "
"``var/cache/dev/`` directory includes the following:"
msgstr ""

#: ../../../configuration/front_controllers_and_kernel.rst:249
msgid "``appDevDebugProjectContainer.php``"
msgstr ""

#: ../../../configuration/front_controllers_and_kernel.rst:248
msgid ""
"The cached \"service container\" that represents the cached application "
"configuration."
msgstr ""

#: ../../../configuration/front_controllers_and_kernel.rst:253
msgid "``appDevUrlGenerator.php``"
msgstr ""

#: ../../../configuration/front_controllers_and_kernel.rst:252
msgid ""
"The PHP class generated from the routing configuration and used when "
"generating URLs."
msgstr ""

#: ../../../configuration/front_controllers_and_kernel.rst:257
msgid "``appDevUrlMatcher.php``"
msgstr ""

#: ../../../configuration/front_controllers_and_kernel.rst:256
msgid ""
"The PHP class used for route matching - look here to see the compiled "
"regular expression logic used to match incoming URLs to different routes."
msgstr ""

#: ../../../configuration/front_controllers_and_kernel.rst:260
msgid "``twig/``"
msgstr ""

#: ../../../configuration/front_controllers_and_kernel.rst:260
msgid "This directory contains all the cached Twig templates."
msgstr ""

#: ../../../configuration/front_controllers_and_kernel.rst:264
msgid ""
"You can change the cache directory location and name. For more "
"information read the article "
":doc:`/configuration/override_dir_structure`."
msgstr ""

