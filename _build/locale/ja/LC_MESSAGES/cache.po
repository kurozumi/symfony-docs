# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the Symfony Framework
# Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Symfony Framework Documentation \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-08 14:21+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../../cache.rst:5
msgid "Cache"
msgstr ""

#: ../../../cache.rst:7
msgid ""
"Using a cache is a great way of making your application run quicker. The "
"Symfony cache component ships with many adapters to different storages. "
"Every adapter is developed for high performance."
msgstr ""

#: ../../../cache.rst:11
msgid "The following example shows a typical usage of the cache::"
msgstr ""

#: ../../../cache.rst:30
msgid ""
"Symfony supports Cache Contracts, PSR-6/16 and Doctrine Cache interfaces."
" You can read more about these at the :doc:`component documentation "
"</components/cache>`."
msgstr ""

#: ../../../cache.rst:36
msgid "Configuring Cache with FrameworkBundle"
msgstr ""

#: ../../../cache.rst:38
msgid ""
"When configuring the cache component there are a few concepts you should "
"know of:"
msgstr ""

#: ../../../cache.rst:42
msgid "**Pool**"
msgstr ""

#: ../../../cache.rst:42
msgid ""
"This is a service that you will interact with. Each pool will always have"
" its own namespace and cache items. There is never a conflict between "
"pools."
msgstr ""

#: ../../../cache.rst:44
msgid "**Adapter**"
msgstr ""

#: ../../../cache.rst:45
msgid "An adapter is a *template* that you use to create pools."
msgstr ""

#: ../../../cache.rst:49
msgid "**Provider**"
msgstr ""

#: ../../../cache.rst:47
msgid ""
"A provider is a service that some adapters use to connect to the storage."
" Redis and Memcached are example of such adapters. If a DSN is used as "
"the provider then a service is automatically created."
msgstr ""

#: ../../../cache.rst:51
msgid ""
"There are two pools that are always enabled by default. They are "
"``cache.app`` and ``cache.system``. The system cache is used for things "
"like annotations, serializer, and validation. The ``cache.app`` can be "
"used in your code. You can configure which adapter (template) they use by"
" using the ``app`` and ``system`` key like:"
msgstr ""

#: ../../../cache.rst:95
msgid "The Cache component comes with a series of adapters pre-configured:"
msgstr ""

#: ../../../cache.rst:97
msgid ":doc:`cache.adapter.apcu </components/cache/adapters/apcu_adapter>`"
msgstr ""

#: ../../../cache.rst:98
msgid ""
":doc:`cache.adapter.array "
"</components/cache/adapters/array_cache_adapter>`"
msgstr ""

#: ../../../cache.rst:99
msgid ""
":doc:`cache.adapter.doctrine "
"</components/cache/adapters/doctrine_adapter>`"
msgstr ""

#: ../../../cache.rst:100
msgid ""
":doc:`cache.adapter.filesystem "
"</components/cache/adapters/filesystem_adapter>`"
msgstr ""

#: ../../../cache.rst:101
msgid ""
":doc:`cache.adapter.memcached "
"</components/cache/adapters/memcached_adapter>`"
msgstr ""

#: ../../../cache.rst:102
msgid ""
":doc:`cache.adapter.pdo "
"</components/cache/adapters/pdo_doctrine_dbal_adapter>`"
msgstr ""

#: ../../../cache.rst:103
msgid ":doc:`cache.adapter.psr6 </components/cache/adapters/proxy_adapter>`"
msgstr ""

#: ../../../cache.rst:104
msgid ":doc:`cache.adapter.redis </components/cache/adapters/redis_adapter>`"
msgstr ""

#: ../../../cache.rst:106
msgid ""
"Some of these adapters could be configured via shortcuts. Using these "
"shortcuts will create pools with service IDs that follow the pattern "
"``cache.[type]``."
msgstr ""

#: ../../../cache.rst:182
msgid "Creating Custom (Namespaced) Pools"
msgstr ""

#: ../../../cache.rst:184
msgid "You can also create more customized pools:"
msgstr ""

#: ../../../cache.rst:301
msgid ""
"Each pool manages a set of independent cache keys: keys from different "
"pools *never* collide, even if they share the same backend. This is "
"achieved by prefixing keys with a namespace that's generated by hashing "
"the name of the pool, the name of the compiled container class and a "
":ref:`configurable seed<reference-cache-prefix-seed>` that defaults to "
"the project directory."
msgstr ""

#: ../../../cache.rst:307
msgid ""
"Each custom pool becomes a service whose service ID is the name of the "
"pool (e.g. ``custom_thing.cache``). An autowiring alias is also created "
"for each pool using the camel case version of its name - e.g. "
"``custom_thing.cache`` can be injected automatically by naming the "
"argument ``$customThingCache`` and type-hinting it with either "
":class:`Symfony\\\\Contracts\\\\Cache\\\\CacheInterface` or "
"``Psr\\Cache\\CacheItemPoolInterface``::"
msgstr ""

#: ../../../cache.rst:329
msgid "Custom Provider Options"
msgstr ""

#: ../../../cache.rst:331
msgid ""
"Some providers have specific options that can be configured. The "
":doc:`RedisAdapter </components/cache/adapters/redis_adapter>` allows you"
" to create providers with the options ``timeout``, ``retry_interval``. "
"etc. To use these options with non-default values you need to create your"
" own ``\\Redis`` provider and use that when configuring the pool."
msgstr ""

#: ../../../cache.rst:413
msgid "Creating a Cache Chain"
msgstr ""

#: ../../../cache.rst:415
msgid ""
"Different cache adapters have different strengths and weaknesses. Some "
"might be really quick but optimized to store small items and some may be "
"able to contain a lot of data but are quite slow. To get the best of both"
" worlds you may use a chain of adapters."
msgstr ""

#: ../../../cache.rst:420
msgid ""
"A cache chain combines several cache pools into a single one. When "
"storing an item in a cache chain, Symfony stores it in all pools "
"sequentially. When retrieving an item, Symfony tries to get it from the "
"first pool. If it's not found, it tries the next pools until the item is "
"found or an exception is thrown. Because of this behavior, it's "
"recommended to define the adapters in the chain in order from fastest to "
"slowest."
msgstr ""

#: ../../../cache.rst:427
msgid ""
"If an error happens when storing an item in a pool, Symfony stores it in "
"the other pools and no exception is thrown. Later, when the item is "
"retrieved, Symfony stores the item automatically in all the missing "
"pools."
msgstr ""

#: ../../../cache.rst:486
msgid "Using Cache Tags"
msgstr ""

#: ../../../cache.rst:488
msgid ""
"In applications with many cache keys it could be useful to organize the "
"data stored to be able to invalidate the cache more efficiently. One way "
"to achieve that is to use cache tags. One or more tags could be added to "
"the cache item. All items with the same key could be invalidated with one"
" function call::"
msgstr ""

#: ../../../cache.rst:525
msgid ""
"The cache adapter needs to implement "
":class:`Symfony\\\\Contracts\\\\Cache\\\\TagAwareCacheInterface` to "
"enable this feature. This could be added by using the following "
"configuration."
msgstr ""

#: ../../../cache.rst:576
msgid ""
"Tags are stored in the same pool by default. This is good in most "
"scenarios. But sometimes it might be better to store the tags in a "
"different pool. That could be achieved by specifying the adapter."
msgstr ""

#: ../../../cache.rst:631
msgid ""
"The interface "
":class:`Symfony\\\\Contracts\\\\Cache\\\\TagAwareCacheInterface` is "
"autowired to the ``cache.app`` service."
msgstr ""

#: ../../../cache.rst:635
msgid "Clearing the Cache"
msgstr ""

#: ../../../cache.rst:637
msgid ""
"To clear the cache you can use the ``bin/console cache:pool:clear "
"[pool]`` command. That will remove all the entries from your storage and "
"you will have to recalculate all the values. You can also group your "
"pools into \"cache clearers\". There are 3 cache clearers by default:"
msgstr ""

#: ../../../cache.rst:642
msgid "``cache.global_clearer``"
msgstr ""

#: ../../../cache.rst:643
msgid "``cache.system_clearer``"
msgstr ""

#: ../../../cache.rst:644
msgid "``cache.app_clearer``"
msgstr ""

#: ../../../cache.rst:646
msgid ""
"The global clearer clears all the cache items in every pool. The system "
"cache clearer is used in the ``bin/console cache:clear`` command. The app"
" clearer is the default clearer."
msgstr ""

#: ../../../cache.rst:650
msgid "To see all available cache pools:"
msgstr ""

#: ../../../cache.rst:656
msgid "Clear one pool:"
msgstr ""

#: ../../../cache.rst:662
msgid "Clear all custom pools:"
msgstr ""

#: ../../../cache.rst:668
msgid "Clear all caches everywhere:"
msgstr ""

