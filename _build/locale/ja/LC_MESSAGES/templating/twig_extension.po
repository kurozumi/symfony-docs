# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the Symfony Framework
# Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Symfony Framework Documentation \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-08 14:21+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../../templating/twig_extension.rst:5
msgid "How to Write a custom Twig Extension"
msgstr ""

#: ../../../templating/twig_extension.rst:7
msgid ""
"`Twig Extensions`_ allow to create custom functions, filters and more to "
"use them in your Twig templates. Before writing your own Twig extension, "
"check if the filter/function that you need is already implemented in:"
msgstr ""

#: ../../../templating/twig_extension.rst:11
msgid "The `default Twig filters and functions`_;"
msgstr ""

#: ../../../templating/twig_extension.rst:12
msgid ""
"The :doc:`Twig filters and functions added by Symfony "
"</reference/twig_reference>`;"
msgstr ""

#: ../../../templating/twig_extension.rst:13
msgid ""
"The `official Twig extensions`_ related to strings, HTML, Markdown, "
"internationalization, etc."
msgstr ""

#: ../../../templating/twig_extension.rst:16
msgid "Create the Extension Class"
msgstr ""

#: ../../../templating/twig_extension.rst:18
msgid ""
"Suppose you want to create a new filter called ``price`` that formats a "
"number into money:"
msgstr ""

#: ../../../templating/twig_extension.rst:28
msgid "Create a class that extends ``AbstractExtension`` and fill in the logic::"
msgstr ""

#: ../../../templating/twig_extension.rst:54
msgid ""
"If you want to create a function instead of a filter, define the "
"``getFunctions()`` method::"
msgstr ""

#: ../../../templating/twig_extension.rst:80
msgid ""
"Along with custom filters and functions, you can also register `global "
"variables`_."
msgstr ""

#: ../../../templating/twig_extension.rst:84
msgid "Register an Extension as a Service"
msgstr ""

#: ../../../templating/twig_extension.rst:86
msgid ""
"Next, register your class as a service and tag it with "
"``twig.extension``. If you're using the :ref:`default services.yaml "
"configuration <service-container-services-load-example>`, you're done! "
"Symfony will automatically know about your new service and add the tag."
msgstr ""

#: ../../../templating/twig_extension.rst:90
msgid ""
"You can now start using your filter in any Twig template. Optionally, "
"execute this command to confirm that your new filter was successfully "
"registered:"
msgstr ""

#: ../../../templating/twig_extension.rst:104
msgid "Creating Lazy-Loaded Twig Extensions"
msgstr ""

#: ../../../templating/twig_extension.rst:108
msgid ""
"Support for lazy-loaded extensions was introduced in Twig 1.35.0 and "
"2.4.4."
msgstr ""

#: ../../../templating/twig_extension.rst:110
msgid ""
"Including the code of the custom filters/functions in the Twig extension "
"class is the simplest way to create extensions. However, Twig must "
"initialize all extensions before rendering any template, even if the "
"template doesn't use an extension."
msgstr ""

#: ../../../templating/twig_extension.rst:115
msgid ""
"If extensions don't define dependencies (i.e. if you don't inject "
"services in them) performance is not affected. However, if extensions "
"define lots of complex dependencies (e.g. those making database "
"connections), the performance loss can be significant."
msgstr ""

#: ../../../templating/twig_extension.rst:120
msgid ""
"That's why Twig allows to decouple the extension definition from its "
"implementation. Following the same example as before, the first change "
"would be to remove the ``formatPrice()`` method from the extension and "
"update the PHP callable defined in ``getFilters()``::"
msgstr ""

#: ../../../templating/twig_extension.rst:143
msgid ""
"Then, create the new ``AppRuntime`` class (it's not required but these "
"classes are suffixed with ``Runtime`` by convention) and include the "
"logic of the previous ``formatPrice()`` method::"
msgstr ""

#: ../../../templating/twig_extension.rst:169
msgid ""
"If you're using the default ``services.yaml`` configuration, this will "
"already work! Otherwise, :ref:`create a service <service-container-"
"creating-service>` for this class and :doc:`tag your service "
"</service_container/tags>` with ``twig.runtime``."
msgstr ""

