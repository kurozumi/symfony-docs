# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the Symfony Framework
# Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Symfony Framework Documentation \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-08 14:21+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../../templates.rst:5
msgid "Creating and Using Templates"
msgstr ""

#: ../../../templates.rst:7
msgid ""
"A template is the best way to organize and render HTML from inside your "
"application, whether you need to render HTML from a :doc:`controller "
"</controller>` or generate the :doc:`contents of an email </mailer>`. "
"Templates in Symfony are created with Twig: a flexible, fast, and secure "
"template engine."
msgstr ""

#: ../../../templates.rst:15
msgid "Twig Templating Language"
msgstr ""

#: ../../../templates.rst:17
msgid ""
"The `Twig`_ templating language allows you to write concise, readable "
"templates that are more friendly to web designers and, in several ways, "
"more powerful than PHP templates. Take a look at the following Twig "
"template example. Even if it's the first time you see Twig, you probably "
"understand most of it:"
msgstr ""

#: ../../../templates.rst:40
msgid "Twig syntax is based on these three constructs:"
msgstr ""

#: ../../../templates.rst:42
msgid ""
"``{{ ... }}``, used to display the content of a variable or the result of"
" evaluating an expression;"
msgstr ""

#: ../../../templates.rst:44
msgid "``{% ... %}``, used to run some logic, such as a conditional or a loop;"
msgstr ""

#: ../../../templates.rst:45
msgid ""
"``{# ... #}``, used to add comments to the template (unlike HTML "
"comments, these comments are not included in the rendered page)."
msgstr ""

#: ../../../templates.rst:48
msgid ""
"You can't run PHP code inside Twig templates, but Twig provides utilities"
" to run some logic in the templates. For example, **filters** modify "
"content before being rendered, like the ``upper`` filter to uppercase "
"contents:"
msgstr ""

#: ../../../templates.rst:56
msgid ""
"Twig comes with a long list of `tags`_, `filters`_ and `functions`_ that "
"are available by default. In Symfony applications you can also use these "
":doc:`Twig filters and functions defined by Symfony "
"</reference/twig_reference>` and you can :doc:`create your own Twig "
"filters and functions </templating/twig_extension>`."
msgstr ""

#: ../../../templates.rst:61
msgid ""
"Twig is fast in the ``prod`` :ref:`environment <configuration-"
"environments>` (because templates are compiled into PHP and cached "
"automatically), but convenient to use in the ``dev`` environment (because"
" templates are recompiled automatically when you change them)."
msgstr ""

#: ../../../templates.rst:67
msgid "Twig Configuration"
msgstr ""

#: ../../../templates.rst:69
msgid ""
"Twig has several configuration options to define things like the format "
"used to display numbers and dates, the template caching, etc. Read the "
":doc:`Twig configuration reference </reference/configuration/twig>` to "
"learn about them."
msgstr ""

#: ../../../templates.rst:74
msgid "Creating Templates"
msgstr ""

#: ../../../templates.rst:76
msgid ""
"Before explaining in detail how to create and render templates, look at "
"the following example for a quick overview of the whole process. First, "
"you need to create a new file in the ``templates/`` directory to store "
"the template contents:"
msgstr ""

#: ../../../templates.rst:86
msgid ""
"Then, create a :doc:`controller </controller>` that renders this template"
" and passes to it the needed variables::"
msgstr ""

#: ../../../templates.rst:116
msgid "Template Naming"
msgstr ""

#: ../../../templates.rst:118
msgid "Symfony recommends the following for template names:"
msgstr ""

#: ../../../templates.rst:120
msgid ""
"Use `snake case`_ for filenames and directories (e.g. "
"``blog_posts.twig``, ``admin/default_theme/blog/index.twig``, etc.);"
msgstr ""

#: ../../../templates.rst:122
msgid ""
"Define two extensions for filenames (e.g. ``index.html.twig`` or "
"``blog_posts.xml.twig``) being the first extension (``html``, ``xml``, "
"etc.) the final format that the template will generate."
msgstr ""

#: ../../../templates.rst:126
msgid ""
"Although templates usually generate HTML contents, they can generate any "
"text-based format. That's why the two-extension convention simplifies the"
" way templates are created and rendered for multiple formats."
msgstr ""

#: ../../../templates.rst:131
msgid "Template Location"
msgstr ""

#: ../../../templates.rst:133
msgid ""
"Templates are stored by default in the ``templates/`` directory. When a "
"service or controller renders the ``product/index.html.twig`` template, "
"they are actually referring to the ``<your-"
"project>/templates/product/index.html.twig`` file."
msgstr ""

#: ../../../templates.rst:137
msgid ""
"The default templates directory is configurable with the "
":ref:`twig.default_path <config-twig-default-path>` option and you can "
"add more template directories :ref:`as explained later <templates-"
"namespaces>` in this article."
msgstr ""

#: ../../../templates.rst:142
msgid "Template Variables"
msgstr ""

#: ../../../templates.rst:144
msgid ""
"A common need for templates is to print the values stored in the "
"templates passed from the controller or service. Variables usually store "
"objects and arrays instead of strings, numbers and boolean values. That's"
" why Twig provides quick access to complex PHP variables. Consider the "
"following template:"
msgstr ""

#: ../../../templates.rst:153
msgid ""
"The ``user.name`` notation means that you want to display some "
"information (``name``) stored in a variable (``user``). Is ``user`` an "
"array or an object? Is ``name`` a property or a method? In Twig this "
"doesn't matter."
msgstr ""

#: ../../../templates.rst:157
msgid ""
"When using the ``foo.bar`` notation, Twig tries to get the value of the "
"variable in the following order:"
msgstr ""

#: ../../../templates.rst:160
msgid "``$foo['bar']`` (array and element);"
msgstr ""

#: ../../../templates.rst:161
msgid "``$foo->bar`` (object and public property);"
msgstr ""

#: ../../../templates.rst:162
msgid "``$foo->bar()`` (object and public method);"
msgstr ""

#: ../../../templates.rst:163
msgid "``$foo->getBar()`` (object and *getter* method);"
msgstr ""

#: ../../../templates.rst:164
msgid "``$foo->isBar()`` (object and *isser* method);"
msgstr ""

#: ../../../templates.rst:165
msgid "``$foo->hasBar()`` (object and *hasser* method);"
msgstr ""

#: ../../../templates.rst:166
msgid "If none of the above exists, use ``null``."
msgstr ""

#: ../../../templates.rst:168
msgid ""
"This allows to evolve your application code without having to change the "
"template code (you can start with array variables for the application "
"proof of concept, then move to objects with methods, etc.)"
msgstr ""

#: ../../../templates.rst:175
msgid "Linking to Pages"
msgstr ""

#: ../../../templates.rst:177
msgid ""
"Instead of writing the link URLs by hand, use the ``path()`` function to "
"generate URLs based on the :ref:`routing configuration <routing-creating-"
"routes>`."
msgstr ""

#: ../../../templates.rst:180
msgid ""
"Later, if you want to modify the URL of a particular page, all you'll "
"need to do is change the routing configuration: the templates will "
"automatically generate the new URL."
msgstr ""

#: ../../../templates.rst:184
msgid "Consider the following routing configuration:"
msgstr ""

#: ../../../templates.rst:260
msgid ""
"Use the ``path()`` Twig function to link to these pages and pass the "
"route name as the first argument and the route parameters as the optional"
" second argument:"
msgstr ""

#: ../../../templates.rst:277
msgid ""
"The ``path()`` function generates relative URLs. If you need to generate "
"absolute URLs (for example when rendering templates for emails or RSS "
"feeds), use the ``url()`` function, which takes the same arguments as "
"``path()`` (e.g. ``<a href=\"{{ url('blog_index') }}\"> ... </a>``)."
msgstr ""

#: ../../../templates.rst:285
msgid "Linking to CSS, JavaScript and Image Assets"
msgstr ""

#: ../../../templates.rst:287
msgid ""
"If a template needs to link to a static asset (e.g. an image), Symfony "
"provides an ``asset()`` Twig function to help generate that URL. First, "
"install the ``asset`` package:"
msgstr ""

#: ../../../templates.rst:295
msgid "You can now use the ``asset()`` function:"
msgstr ""

#: ../../../templates.rst:308
msgid ""
"The ``asset()`` function's main purpose is to make your application more "
"portable. If your application lives at the root of your host (e.g. "
"``https://example.com``), then the rendered path should be "
"``/images/logo.png``. But if your application lives in a subdirectory "
"(e.g. ``https://example.com/my_app``), each asset path should render with"
" the subdirectory (e.g. ``/my_app/images/logo.png``). The ``asset()`` "
"function takes care of this by determining how your application is being "
"used and generating the correct paths accordingly."
msgstr ""

#: ../../../templates.rst:318
msgid ""
"The ``asset()`` function supports various cache busting techniques via "
"the :ref:`version <reference-framework-assets-version>`, "
":ref:`version_format <reference-assets-version-format>`, and "
":ref:`json_manifest_path <reference-assets-json-manifest-path>` "
"configuration options."
msgstr ""

#: ../../../templates.rst:325
msgid ""
"If you'd like help packaging, versioning and minifying your JavaScript "
"and CSS assets in a modern way, read about :doc:`Symfony's Webpack Encore"
" </frontend>`."
msgstr ""

#: ../../../templates.rst:328
msgid ""
"If you need absolute URLs for assets, use the ``absolute_url()`` Twig "
"function as follows:"
msgstr ""

#: ../../../templates.rst:340
msgid "The App Global Variable"
msgstr ""

#: ../../../templates.rst:342
msgid ""
"Symfony creates a context object that is injected into every Twig "
"template automatically as a variable called ``app``. It provides access "
"to some application information:"
msgstr ""

#: ../../../templates.rst:354
msgid ""
"The ``app`` variable (which is an instance of "
":class:`Symfony\\\\Bridge\\\\Twig\\\\AppVariable`) gives you access to "
"these variables:"
msgstr ""

#: ../../../templates.rst:358
msgid "``app.user``"
msgstr ""

#: ../../../templates.rst:358
msgid ""
"The :ref:`current user object <create-user-class>` or ``null`` if the "
"user is not authenticated."
msgstr ""

#: ../../../templates.rst:363
msgid "``app.request``"
msgstr ""

#: ../../../templates.rst:361
msgid ""
"The :class:`Symfony\\\\Component\\\\HttpFoundation\\\\Request` object "
"that stores the current :ref:`request data <accessing-request-data>` "
"(depending on your application, this can be a :ref:`sub-request <http-"
"kernel-sub-requests>` or a regular request)."
msgstr ""

#: ../../../templates.rst:366
msgid "``app.session``"
msgstr ""

#: ../../../templates.rst:366
msgid ""
"The :class:`Symfony\\\\Component\\\\HttpFoundation\\\\Session\\\\Session`"
" object that represents the current :doc:`user's session </session>` or "
"``null`` if there is none."
msgstr ""

#: ../../../templates.rst:369
msgid "``app.flashes``"
msgstr ""

#: ../../../templates.rst:369
msgid ""
"An array of all the :ref:`flash messages <flash-messages>` stored in the "
"session. You can also get only the messages of some type (e.g. "
"``app.flashes('notice')``)."
msgstr ""

#: ../../../templates.rst:372
msgid "``app.environment``"
msgstr ""

#: ../../../templates.rst:372
msgid ""
"The name of the current :ref:`configuration environment <configuration-"
"environments>` (``dev``, ``prod``, etc)."
msgstr ""

#: ../../../templates.rst:374
msgid "``app.debug``"
msgstr ""

#: ../../../templates.rst:375
msgid "True if in :ref:`debug mode <debug-mode>`. False otherwise."
msgstr ""

#: ../../../templates.rst:378
msgid "``app.token``"
msgstr ""

#: ../../../templates.rst:377
msgid ""
"A "
":class:`Symfony\\\\Component\\\\Security\\\\Core\\\\Authentication\\\\Token\\\\TokenInterface`"
" object representing the security token."
msgstr ""

#: ../../../templates.rst:380
msgid ""
"In addition to the global ``app`` variable injected by Symfony, you can "
"also :doc:`inject variables automatically to all Twig templates "
"</templating/global_variables>`."
msgstr ""

#: ../../../templates.rst:386
msgid "Rendering Templates"
msgstr ""

#: ../../../templates.rst:389
msgid "Rendering a Template in Controllers"
msgstr ""

#: ../../../templates.rst:391
msgid ""
"If your controller extends from the :ref:`AbstractController <the-base-"
"controller-class-services>`, use the ``render()`` helper::"
msgstr ""

#: ../../../templates.rst:424
msgid ""
"If your controller does not extend from ``AbstractController``, you'll "
"need to :ref:`fetch services in your controller <controller-accessing-"
"services>` and use the ``render()`` method of the ``twig`` service."
msgstr ""

#: ../../../templates.rst:429
msgid "Rendering a Template in Services"
msgstr ""

#: ../../../templates.rst:431
msgid ""
"Inject the ``twig`` Symfony service into your own services and use its "
"``render()`` method. When using :doc:`service autowiring "
"</service_container/autowiring>` you only need to add an argument in the "
"service constructor and type-hint it with the "
":class:`Twig\\\\Environment` class::"
msgstr ""

#: ../../../templates.rst:462
msgid "Rendering a Template in Emails"
msgstr ""

#: ../../../templates.rst:464
msgid "Read the docs about the :ref:`mailer and Twig integration <mailer-twig>`."
msgstr ""

#: ../../../templates.rst:469
msgid "Rendering a Template Directly from a Route"
msgstr ""

#: ../../../templates.rst:471
msgid ""
"Although templates are usually rendered in controllers and services, you "
"can render static pages that don't need any variables directly from the "
"route definition. Use the special "
":class:`Symfony\\\\Bundle\\\\FrameworkBundle\\\\Controller\\\\TemplateController`"
" provided by Symfony:"
msgstr ""

#: ../../../templates.rst:560
msgid "The ``context`` option was introduced in Symfony 5.1."
msgstr ""

#: ../../../templates.rst:563
msgid "Checking if a Template Exists"
msgstr ""

#: ../../../templates.rst:565
msgid ""
"Templates are loaded in the application using a `Twig template loader`_, "
"which also provides a method to check for template existence. First, get "
"the loader::"
msgstr ""

#: ../../../templates.rst:579
msgid ""
"Then, pass the path of the Twig template to the ``exists()`` method of "
"the loader::"
msgstr ""

#: ../../../templates.rst:587
msgid "Debugging Templates"
msgstr ""

#: ../../../templates.rst:589
msgid ""
"Symfony provides several utilities to help you debug issues in your "
"templates."
msgstr ""

#: ../../../templates.rst:592
msgid "Linting Twig Templates"
msgstr ""

#: ../../../templates.rst:594
msgid ""
"The ``lint:twig`` command checks that your Twig templates don't have any "
"syntax errors. It's useful to run it before deploying your application to"
" production (e.g. in your continuous integration server):"
msgstr ""

#: ../../../templates.rst:611
msgid "Inspecting Twig Information"
msgstr ""

#: ../../../templates.rst:613
msgid ""
"The ``debug:twig`` command lists all the information available about Twig"
" (functions, filters, global variables, etc.). It's useful to check if "
"your :doc:`custom Twig extensions </templating/twig_extension>` are "
"working properly and also to check the Twig features added when "
":ref:`installing packages <symfony-flex>`:"
msgstr ""

#: ../../../templates.rst:630
msgid "The Dump Twig Utilities"
msgstr ""

#: ../../../templates.rst:632
msgid ""
"Symfony provides a :ref:`dump() function <components-var-dumper-dump>` as"
" an improved alternative to PHP's ``var_dump()`` function. This function "
"is useful to inspect the contents of any variable and you can use it in "
"Twig templates too."
msgstr ""

#: ../../../templates.rst:636
msgid ""
"First, make sure that the VarDumper component is installed in the "
"application:"
msgstr ""

#: ../../../templates.rst:642
#, python-format
msgid ""
"Then, use either the ``{% dump %}`` tag or the ``{{ dump() }}`` function "
"depending on your needs:"
msgstr ""

#: ../../../templates.rst:662
msgid ""
"To avoid leaking sensitive information, the ``dump()`` function/tag is "
"only available in the ``dev`` and ``test`` :ref:`configuration "
"environments <configuration-environments>`. If you try to use it in the "
"``prod`` environment, you will see a PHP error."
msgstr ""

#: ../../../templates.rst:669
msgid "Reusing Template Contents"
msgstr ""

#: ../../../templates.rst:674
msgid "Including Templates"
msgstr ""

#: ../../../templates.rst:676
msgid ""
"If certain Twig code is repeated in several templates, you can extract it"
" into a single \"template fragment\" and include it in other templates. "
"Imagine that the following code to display the user information is "
"repeated in several places:"
msgstr ""

#: ../../../templates.rst:690
msgid ""
"First, create a new Twig template called ``blog/_user_profile.html.twig``"
" (the ``_`` prefix is optional, but it's a convention used to better "
"differentiate between full templates and template fragments)."
msgstr ""

#: ../../../templates.rst:694
msgid ""
"Then, remove that content from the original ``blog/index.html.twig`` "
"template and add the following to include the template fragment:"
msgstr ""

#: ../../../templates.rst:704
msgid ""
"The ``include()`` Twig function takes as argument the path of the "
"template to include. The included template has access to all the "
"variables of the template that includes it (use the `with_context`_ "
"option to control this)."
msgstr ""

#: ../../../templates.rst:708
msgid ""
"You can also pass variables to the included template. This is useful for "
"example to rename variables. Imagine that your template stores the user "
"information in a variable called ``blog_post.author`` instead of the "
"``user`` variable that the template fragment expects. Use the following "
"to *rename* the variable:"
msgstr ""

#: ../../../templates.rst:723
msgid "Embedding Controllers"
msgstr ""

#: ../../../templates.rst:725
msgid ""
":ref:`Including template fragments <templates-include>` is useful to "
"reuse the same content on several pages. However, this technique is not "
"the best solution in some cases."
msgstr ""

#: ../../../templates.rst:729
msgid ""
"Imagine that the template fragment displays the three most recent blog "
"articles. To do that, it needs to make a database query to get those "
"articles. When using the ``include()`` function, you'd need to do the "
"same database query in every page that includes the fragment. This is not"
" very convenient."
msgstr ""

#: ../../../templates.rst:734
msgid ""
"A better alternative is to **embed the result of executing some "
"controller** with the ``render()`` and ``controller()`` Twig functions."
msgstr ""

#: ../../../templates.rst:737
msgid ""
"First, create the controller that renders a certain number of recent "
"articles::"
msgstr ""

#: ../../../templates.rst:757
msgid ""
"Then, create the ``blog/_recent_articles.html.twig`` template fragment "
"(the ``_`` prefix in the template name is optional, but it's a convention"
" used to better differentiate between full templates and template "
"fragments):"
msgstr ""

#: ../../../templates.rst:770
msgid "Now you can call to this controller from any template to embed its result:"
msgstr ""

#: ../../../templates.rst:791
msgid ""
"When using the ``controller()`` function, controllers are not accessed "
"using a regular Symfony route but through a special URL used exclusively "
"to serve those template fragments. Configure that special URL in the "
"``fragments`` option:"
msgstr ""

#: ../../../templates.rst:831
msgid ""
"Embedding controllers requires making requests to those controllers and "
"rendering some templates as result. This can have a significant impact on"
" the application performance if you embed lots of controllers. If "
"possible, :doc:`cache the template fragment </http_cache/esi>`."
msgstr ""

#: ../../../templates.rst:838
msgid ""
"Templates can also :doc:`embed contents asynchronously "
"</templating/hinclude>` with the ``hinclude.js`` JavaScript library."
msgstr ""

#: ../../../templates.rst:842
msgid "Template Inheritance and Layouts"
msgstr ""

#: ../../../templates.rst:844
msgid ""
"As your application grows you'll find more and more repeated elements "
"between pages, such as headers, footers, sidebars, etc. :ref:`Including "
"templates <templates-include>` and :ref:`embedding controllers "
"<templates-embed-controllers>` can help, but when pages share a common "
"structure, it's better to use **inheritance**."
msgstr ""

#: ../../../templates.rst:849
msgid ""
"The concept of `Twig template inheritance`_ is similar to PHP class "
"inheritance. You define a parent template that other templates can extend"
" from and child templates can override parts of the parent template."
msgstr ""

#: ../../../templates.rst:853
msgid ""
"Symfony recommends the following three-level template inheritance for "
"medium and complex applications:"
msgstr ""

#: ../../../templates.rst:856
msgid ""
"``templates/base.html.twig``, defines the common elements of all "
"application templates, such as ``<head>``, ``<header>``, ``<footer>``, "
"etc.;"
msgstr ""

#: ../../../templates.rst:858
msgid ""
"``templates/layout.html.twig``, extends from ``base.html.twig`` and "
"defines the content structure used in all or most of the pages, such as a"
" two-column content + sidebar layout. Some sections of the application "
"can define their own layouts (e.g. ``templates/blog/layout.html.twig``);"
msgstr ""

#: ../../../templates.rst:862
msgid ""
"``templates/*.html.twig``, the application pages which extend from the "
"main ``layout.html.twig`` template or any other section layout."
msgstr ""

#: ../../../templates.rst:865
msgid "In practice, the ``base.html.twig`` template would look like this:"
msgstr ""

#: ../../../templates.rst:897
msgid ""
"The `Twig block tag`_ defines the page sections that can be overridden in"
" the child templates. They can be empty, like the ``content`` block or "
"define a default content, like the ``title`` block, which is displayed "
"when child templates don't override them."
msgstr ""

#: ../../../templates.rst:902
msgid "The ``blog/layout.html.twig`` template could be like this:"
msgstr ""

#: ../../../templates.rst:915
msgid ""
"The template extends from ``base.html.twig`` and only defines the "
"contents of the ``content`` block. The rest of the parent template blocks"
" will display their default contents. However, they can be overridden by "
"the third-level inheritance template, such as ``blog/index.html.twig``, "
"which displays the blog index:"
msgstr ""

#: ../../../templates.rst:934
msgid ""
"This template extends from the second-level template "
"(``blog/layout.html.twig``) but overrides blocks of different parent "
"templates: ``page_contents`` from ``blog/layout.html.twig`` and ``title``"
" from ``base.html.twig``."
msgstr ""

#: ../../../templates.rst:938
msgid ""
"When you render the ``blog/index.html.twig`` template, Symfony uses three"
" different templates to create the final contents. This inheritance "
"mechanism boosts your productivity because each template includes only "
"its unique contents and leaves the repeated contents and HTML structure "
"to some parent templates."
msgstr ""

#: ../../../templates.rst:945
msgid ""
"When using ``extends``, a child template is forbidden to define template "
"parts outside of a block. The following code throws a ``SyntaxError``:"
msgstr ""

#: ../../../templates.rst:959
msgid ""
"Read the `Twig template inheritance`_ docs to learn more about how to "
"reuse parent block contents when overriding templates and other advanced "
"features."
msgstr ""

#: ../../../templates.rst:963
msgid "Output Escaping"
msgstr ""

#: ../../../templates.rst:965
msgid ""
"Imagine that your template includes the ``Hello {{ name }}`` code to "
"display the user name. If a malicious user sets "
"``<script>alert('hello!')</script>`` as their name and you output that "
"value unchanged, the application will display a JavaScript popup window."
msgstr ""

#: ../../../templates.rst:970
msgid ""
"This is known as a `Cross-Site Scripting`_ (XSS) attack. And while the "
"previous example seems harmless, the attacker could write more advanced "
"JavaScript code to performs malicious actions."
msgstr ""

#: ../../../templates.rst:974
msgid ""
"To prevent this attack, use *\"output escaping\"* to transform the "
"characters which have special meaning (e.g. replace ``<`` by the ``&lt;``"
" HTML entity). Symfony applications are safe by default because they "
"perform automatic output escaping thanks to the :ref:`Twig autoescape "
"option <config-twig-autoescape>`:"
msgstr ""

#: ../../../templates.rst:985
msgid ""
"If you are rendering a variable that is trusted and contains HTML "
"contents, use the `Twig raw filter`_ to disable the output escaping for "
"that variable:"
msgstr ""

#: ../../../templates.rst:994
msgid ""
"Read the `Twig output escaping docs`_ to learn more about how to disable "
"output escaping for a block or even an entire template."
msgstr ""

#: ../../../templates.rst:1000
msgid "Template Namespaces"
msgstr ""

#: ../../../templates.rst:1002
msgid ""
"Although most applications store their templates in the default "
"``templates/`` directory, you may need to store some or all of them in "
"different directories. Use the ``twig.paths`` option to configure those "
"extra directories. Each path is defined as a ``key: value`` pair where "
"the ``key`` is the template directory and the ``value`` is the Twig "
"namespace, which is explained later:"
msgstr ""

#: ../../../templates.rst:1053
msgid ""
"When rendering a template, Symfony looks for it first in the "
"``twig.paths`` directories that don't define a namespace and then falls "
"back to the default template directory (usually, ``templates/``)."
msgstr ""

#: ../../../templates.rst:1057
msgid ""
"Using the above configuration, if your application renders for example "
"the ``layout.html.twig`` template, Symfony will first look for "
"``email/default/templates/layout.html.twig`` and "
"``backend/templates/layout.html.twig``. If any of those templates exists,"
" Symfony will use it instead of using ``templates/layout.html.twig``, "
"which is probably the template you wanted to use."
msgstr ""

#: ../../../templates.rst:1063
msgid ""
"Twig solves this problem with **namespaces**, which group several "
"templates under a logic name unrelated to their actual location. Update "
"the previous configuration to define a namespace for each template "
"directory:"
msgstr ""

#: ../../../templates.rst:1106
msgid ""
"Now, if you render the ``layout.html.twig`` template, Symfony will render"
" the ``templates/layout.html.twig`` file. Use the special syntax ``@`` + "
"namespace to refer to the other namespaced templates (e.g. "
"``@email/layout.html.twig`` and ``@admin/layout.html.twig``)."
msgstr ""

#: ../../../templates.rst:1113
msgid ""
"A single Twig namespace can be associated with more than one template "
"directory. In that case, the order in which paths are added is important "
"because Twig will start looking for templates from the first defined "
"path."
msgstr ""

#: ../../../templates.rst:1118
msgid "Bundle Templates"
msgstr ""

#: ../../../templates.rst:1120
msgid ""
"If you :ref:`install packages/bundles <symfony-flex>` in your "
"application, they may include their own Twig templates (in the "
"``Resources/views/`` directory of each bundle). To avoid messing with "
"your own templates, Symfony adds bundle templates under an automatic "
"namespace created after the bundle name."
msgstr ""

#: ../../../templates.rst:1125
msgid ""
"For example, the templates of a bundle called ``AcmeFooBundle`` are "
"available under the ``AcmeFoo`` namespace. If this bundle includes the "
"template ``<your-project>/vendor/acmefoo-"
"bundle/Resources/views/user/profile.html.twig``, you can refer to it as "
"``@AcmeFoo/user/profile.html.twig``."
msgstr ""

#: ../../../templates.rst:1132
msgid ""
"You can also :ref:`override bundle templates <override-templates>` in "
"case you want to change some parts of the original bundle templates."
msgstr ""

#: ../../../templates.rst:1136
msgid "Learn more"
msgstr ""

